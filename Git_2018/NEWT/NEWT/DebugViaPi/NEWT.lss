
NEWT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000186  00800200  0000240a  0000249e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000240a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a49  00800386  00800386  00002624  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002624  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000026c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fed  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b8  00000000  00000000  000058cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016cd  00000000  00000000  00006b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007e8  00000000  00000000  00008254  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c7a  00000000  00000000  00008a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e9e  00000000  00000000  000096b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0000b554  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b7 c1       	rjmp	.+878    	; 0x370 <__ctors_end>
       2:	00 00       	nop
       4:	d5 c1       	rjmp	.+938    	; 0x3b0 <__bad_interrupt>
       6:	00 00       	nop
       8:	d3 c1       	rjmp	.+934    	; 0x3b0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d1 c1       	rjmp	.+930    	; 0x3b0 <__bad_interrupt>
       e:	00 00       	nop
      10:	cf c1       	rjmp	.+926    	; 0x3b0 <__bad_interrupt>
      12:	00 00       	nop
      14:	cd c1       	rjmp	.+922    	; 0x3b0 <__bad_interrupt>
      16:	00 00       	nop
      18:	cb c1       	rjmp	.+918    	; 0x3b0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c9 c1       	rjmp	.+914    	; 0x3b0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c7 c1       	rjmp	.+910    	; 0x3b0 <__bad_interrupt>
      22:	00 00       	nop
      24:	c5 c1       	rjmp	.+906    	; 0x3b0 <__bad_interrupt>
      26:	00 00       	nop
      28:	c3 c1       	rjmp	.+902    	; 0x3b0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c1 c1       	rjmp	.+898    	; 0x3b0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	bf c1       	rjmp	.+894    	; 0x3b0 <__bad_interrupt>
      32:	00 00       	nop
      34:	bd c1       	rjmp	.+890    	; 0x3b0 <__bad_interrupt>
      36:	00 00       	nop
      38:	bb c1       	rjmp	.+886    	; 0x3b0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b9 c1       	rjmp	.+882    	; 0x3b0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b7 c1       	rjmp	.+878    	; 0x3b0 <__bad_interrupt>
      42:	00 00       	nop
      44:	5e c2       	rjmp	.+1212   	; 0x502 <__vector_17>
      46:	00 00       	nop
      48:	b3 c1       	rjmp	.+870    	; 0x3b0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b1 c1       	rjmp	.+866    	; 0x3b0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	af c1       	rjmp	.+862    	; 0x3b0 <__bad_interrupt>
      52:	00 00       	nop
      54:	ad c1       	rjmp	.+858    	; 0x3b0 <__bad_interrupt>
      56:	00 00       	nop
      58:	ab c1       	rjmp	.+854    	; 0x3b0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a9 c1       	rjmp	.+850    	; 0x3b0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a7 c1       	rjmp	.+846    	; 0x3b0 <__bad_interrupt>
      62:	00 00       	nop
      64:	a5 c1       	rjmp	.+842    	; 0x3b0 <__bad_interrupt>
      66:	00 00       	nop
      68:	a3 c1       	rjmp	.+838    	; 0x3b0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a1 c1       	rjmp	.+834    	; 0x3b0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9f c1       	rjmp	.+830    	; 0x3b0 <__bad_interrupt>
      72:	00 00       	nop
      74:	9d c1       	rjmp	.+826    	; 0x3b0 <__bad_interrupt>
      76:	00 00       	nop
      78:	9b c1       	rjmp	.+822    	; 0x3b0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	99 c1       	rjmp	.+818    	; 0x3b0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	97 c1       	rjmp	.+814    	; 0x3b0 <__bad_interrupt>
      82:	00 00       	nop
      84:	95 c1       	rjmp	.+810    	; 0x3b0 <__bad_interrupt>
      86:	00 00       	nop
      88:	93 c1       	rjmp	.+806    	; 0x3b0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	91 c1       	rjmp	.+802    	; 0x3b0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	8f c1       	rjmp	.+798    	; 0x3b0 <__bad_interrupt>
      92:	00 00       	nop
      94:	8d c1       	rjmp	.+794    	; 0x3b0 <__bad_interrupt>
      96:	00 00       	nop
      98:	8b c1       	rjmp	.+790    	; 0x3b0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__vector_39>
      a0:	87 c1       	rjmp	.+782    	; 0x3b0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	85 c1       	rjmp	.+778    	; 0x3b0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	83 c1       	rjmp	.+774    	; 0x3b0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	81 c1       	rjmp	.+770    	; 0x3b0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7f c1       	rjmp	.+766    	; 0x3b0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	7d c1       	rjmp	.+762    	; 0x3b0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	7b c1       	rjmp	.+758    	; 0x3b0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	79 c1       	rjmp	.+754    	; 0x3b0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	77 c1       	rjmp	.+750    	; 0x3b0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	75 c1       	rjmp	.+746    	; 0x3b0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	73 c1       	rjmp	.+742    	; 0x3b0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	71 c1       	rjmp	.+738    	; 0x3b0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6f c1       	rjmp	.+734    	; 0x3b0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	6d c1       	rjmp	.+730    	; 0x3b0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	6b c1       	rjmp	.+726    	; 0x3b0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	69 c1       	rjmp	.+722    	; 0x3b0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	67 c1       	rjmp	.+718    	; 0x3b0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	16 0a       	sbc	r1, r22
      e6:	19 0a       	sbc	r1, r25
      e8:	19 0a       	sbc	r1, r25
      ea:	19 0a       	sbc	r1, r25
      ec:	19 0a       	sbc	r1, r25
      ee:	19 0a       	sbc	r1, r25
      f0:	19 0a       	sbc	r1, r25
      f2:	19 0a       	sbc	r1, r25
      f4:	31 09       	sbc	r19, r1
      f6:	19 0a       	sbc	r1, r25
      f8:	19 0a       	sbc	r1, r25
      fa:	19 0a       	sbc	r1, r25
      fc:	19 0a       	sbc	r1, r25
      fe:	19 0a       	sbc	r1, r25
     100:	19 0a       	sbc	r1, r25
     102:	19 0a       	sbc	r1, r25
     104:	31 09       	sbc	r19, r1
     106:	19 0a       	sbc	r1, r25
     108:	19 0a       	sbc	r1, r25
     10a:	19 0a       	sbc	r1, r25
     10c:	19 0a       	sbc	r1, r25
     10e:	19 0a       	sbc	r1, r25
     110:	19 0a       	sbc	r1, r25
     112:	19 0a       	sbc	r1, r25
     114:	39 09       	sbc	r19, r9
     116:	19 0a       	sbc	r1, r25
     118:	19 0a       	sbc	r1, r25
     11a:	19 0a       	sbc	r1, r25
     11c:	19 0a       	sbc	r1, r25
     11e:	19 0a       	sbc	r1, r25
     120:	19 0a       	sbc	r1, r25
     122:	19 0a       	sbc	r1, r25
     124:	5e 09       	sbc	r21, r14
     126:	19 0a       	sbc	r1, r25
     128:	19 0a       	sbc	r1, r25
     12a:	19 0a       	sbc	r1, r25
     12c:	19 0a       	sbc	r1, r25
     12e:	19 0a       	sbc	r1, r25
     130:	19 0a       	sbc	r1, r25
     132:	19 0a       	sbc	r1, r25
     134:	39 09       	sbc	r19, r9
     136:	19 0a       	sbc	r1, r25
     138:	19 0a       	sbc	r1, r25
     13a:	19 0a       	sbc	r1, r25
     13c:	19 0a       	sbc	r1, r25
     13e:	19 0a       	sbc	r1, r25
     140:	19 0a       	sbc	r1, r25
     142:	19 0a       	sbc	r1, r25
     144:	63 09       	sbc	r22, r3
     146:	19 0a       	sbc	r1, r25
     148:	19 0a       	sbc	r1, r25
     14a:	19 0a       	sbc	r1, r25
     14c:	19 0a       	sbc	r1, r25
     14e:	19 0a       	sbc	r1, r25
     150:	19 0a       	sbc	r1, r25
     152:	19 0a       	sbc	r1, r25
     154:	68 09       	sbc	r22, r8
     156:	19 0a       	sbc	r1, r25
     158:	19 0a       	sbc	r1, r25
     15a:	19 0a       	sbc	r1, r25
     15c:	19 0a       	sbc	r1, r25
     15e:	19 0a       	sbc	r1, r25
     160:	19 0a       	sbc	r1, r25
     162:	19 0a       	sbc	r1, r25
     164:	79 09       	sbc	r23, r9
     166:	19 0a       	sbc	r1, r25
     168:	19 0a       	sbc	r1, r25
     16a:	19 0a       	sbc	r1, r25
     16c:	19 0a       	sbc	r1, r25
     16e:	19 0a       	sbc	r1, r25
     170:	19 0a       	sbc	r1, r25
     172:	19 0a       	sbc	r1, r25
     174:	a2 09       	sbc	r26, r2
     176:	19 0a       	sbc	r1, r25
     178:	19 0a       	sbc	r1, r25
     17a:	19 0a       	sbc	r1, r25
     17c:	19 0a       	sbc	r1, r25
     17e:	19 0a       	sbc	r1, r25
     180:	19 0a       	sbc	r1, r25
     182:	19 0a       	sbc	r1, r25
     184:	6d 09       	sbc	r22, r13
     186:	19 0a       	sbc	r1, r25
     188:	19 0a       	sbc	r1, r25
     18a:	19 0a       	sbc	r1, r25
     18c:	19 0a       	sbc	r1, r25
     18e:	19 0a       	sbc	r1, r25
     190:	19 0a       	sbc	r1, r25
     192:	19 0a       	sbc	r1, r25
     194:	87 09       	sbc	r24, r7
     196:	19 0a       	sbc	r1, r25
     198:	19 0a       	sbc	r1, r25
     19a:	19 0a       	sbc	r1, r25
     19c:	19 0a       	sbc	r1, r25
     19e:	19 0a       	sbc	r1, r25
     1a0:	19 0a       	sbc	r1, r25
     1a2:	19 0a       	sbc	r1, r25
     1a4:	a4 09       	sbc	r26, r4
     1a6:	19 0a       	sbc	r1, r25
     1a8:	19 0a       	sbc	r1, r25
     1aa:	19 0a       	sbc	r1, r25
     1ac:	19 0a       	sbc	r1, r25
     1ae:	19 0a       	sbc	r1, r25
     1b0:	19 0a       	sbc	r1, r25
     1b2:	19 0a       	sbc	r1, r25
     1b4:	a4 09       	sbc	r26, r4
     1b6:	19 0a       	sbc	r1, r25
     1b8:	19 0a       	sbc	r1, r25
     1ba:	19 0a       	sbc	r1, r25
     1bc:	19 0a       	sbc	r1, r25
     1be:	19 0a       	sbc	r1, r25
     1c0:	19 0a       	sbc	r1, r25
     1c2:	19 0a       	sbc	r1, r25
     1c4:	a4 09       	sbc	r26, r4
     1c6:	19 0a       	sbc	r1, r25
     1c8:	19 0a       	sbc	r1, r25
     1ca:	19 0a       	sbc	r1, r25
     1cc:	19 0a       	sbc	r1, r25
     1ce:	19 0a       	sbc	r1, r25
     1d0:	19 0a       	sbc	r1, r25
     1d2:	19 0a       	sbc	r1, r25
     1d4:	a4 09       	sbc	r26, r4
     1d6:	19 0a       	sbc	r1, r25
     1d8:	19 0a       	sbc	r1, r25
     1da:	19 0a       	sbc	r1, r25
     1dc:	19 0a       	sbc	r1, r25
     1de:	19 0a       	sbc	r1, r25
     1e0:	19 0a       	sbc	r1, r25
     1e2:	19 0a       	sbc	r1, r25
     1e4:	ad 09       	sbc	r26, r13
     1e6:	19 0a       	sbc	r1, r25
     1e8:	19 0a       	sbc	r1, r25
     1ea:	19 0a       	sbc	r1, r25
     1ec:	19 0a       	sbc	r1, r25
     1ee:	19 0a       	sbc	r1, r25
     1f0:	19 0a       	sbc	r1, r25
     1f2:	19 0a       	sbc	r1, r25
     1f4:	dd 09       	sbc	r29, r13
     1f6:	19 0a       	sbc	r1, r25
     1f8:	19 0a       	sbc	r1, r25
     1fa:	19 0a       	sbc	r1, r25
     1fc:	19 0a       	sbc	r1, r25
     1fe:	19 0a       	sbc	r1, r25
     200:	19 0a       	sbc	r1, r25
     202:	19 0a       	sbc	r1, r25
     204:	ad 09       	sbc	r26, r13
     206:	19 0a       	sbc	r1, r25
     208:	19 0a       	sbc	r1, r25
     20a:	19 0a       	sbc	r1, r25
     20c:	19 0a       	sbc	r1, r25
     20e:	19 0a       	sbc	r1, r25
     210:	19 0a       	sbc	r1, r25
     212:	19 0a       	sbc	r1, r25
     214:	dd 09       	sbc	r29, r13
     216:	19 0a       	sbc	r1, r25
     218:	19 0a       	sbc	r1, r25
     21a:	19 0a       	sbc	r1, r25
     21c:	19 0a       	sbc	r1, r25
     21e:	19 0a       	sbc	r1, r25
     220:	19 0a       	sbc	r1, r25
     222:	19 0a       	sbc	r1, r25
     224:	c5 09       	sbc	r28, r5
     226:	19 0a       	sbc	r1, r25
     228:	19 0a       	sbc	r1, r25
     22a:	19 0a       	sbc	r1, r25
     22c:	19 0a       	sbc	r1, r25
     22e:	19 0a       	sbc	r1, r25
     230:	19 0a       	sbc	r1, r25
     232:	19 0a       	sbc	r1, r25
     234:	e1 09       	sbc	r30, r1
     236:	19 0a       	sbc	r1, r25
     238:	19 0a       	sbc	r1, r25
     23a:	19 0a       	sbc	r1, r25
     23c:	19 0a       	sbc	r1, r25
     23e:	19 0a       	sbc	r1, r25
     240:	19 0a       	sbc	r1, r25
     242:	19 0a       	sbc	r1, r25
     244:	e1 09       	sbc	r30, r1
     246:	19 0a       	sbc	r1, r25
     248:	19 0a       	sbc	r1, r25
     24a:	19 0a       	sbc	r1, r25
     24c:	19 0a       	sbc	r1, r25
     24e:	19 0a       	sbc	r1, r25
     250:	19 0a       	sbc	r1, r25
     252:	19 0a       	sbc	r1, r25
     254:	f6 09       	sbc	r31, r6
     256:	19 0a       	sbc	r1, r25
     258:	19 0a       	sbc	r1, r25
     25a:	19 0a       	sbc	r1, r25
     25c:	19 0a       	sbc	r1, r25
     25e:	19 0a       	sbc	r1, r25
     260:	19 0a       	sbc	r1, r25
     262:	19 0a       	sbc	r1, r25
     264:	10 0a       	sbc	r1, r16
     266:	19 0a       	sbc	r1, r25
     268:	19 0a       	sbc	r1, r25
     26a:	19 0a       	sbc	r1, r25
     26c:	19 0a       	sbc	r1, r25
     26e:	19 0a       	sbc	r1, r25
     270:	19 0a       	sbc	r1, r25
     272:	19 0a       	sbc	r1, r25
     274:	10 0a       	sbc	r1, r16

00000276 <__trampolines_end>:
     276:	00 40       	sbci	r16, 0x00	; 0
     278:	7a 10       	cpse	r7, r10
     27a:	f3 5a       	subi	r31, 0xA3	; 163
     27c:	00 a0       	ldd	r0, Z+32	; 0x20
     27e:	72 4e       	sbci	r23, 0xE2	; 226
     280:	18 09       	sbc	r17, r8
     282:	00 10       	cpse	r0, r0
     284:	a5 d4       	rcall	.+2378   	; 0xbd0 <resetDataToRaspberry+0x40>
     286:	e8 00       	.word	0x00e8	; ????
     288:	00 e8       	ldi	r16, 0x80	; 128
     28a:	76 48       	sbci	r23, 0x86	; 134
     28c:	17 00       	.word	0x0017	; ????
     28e:	00 e4       	ldi	r16, 0x40	; 64
     290:	0b 54       	subi	r16, 0x4B	; 75
     292:	02 00       	.word	0x0002	; ????
     294:	00 ca       	rjmp	.-3072   	; 0xfffff696 <__eeprom_end+0xff7ef696>
     296:	9a 3b       	cpi	r25, 0xBA	; 186
     298:	00 00       	nop
     29a:	00 e1       	ldi	r16, 0x10	; 16
     29c:	f5 05       	cpc	r31, r5
     29e:	00 00       	nop
     2a0:	80 96       	adiw	r24, 0x20	; 32
     2a2:	98 00       	.word	0x0098	; ????
     2a4:	00 00       	nop
     2a6:	40 42       	sbci	r20, 0x20	; 32
     2a8:	0f 00       	.word	0x000f	; ????
     2aa:	00 00       	nop
     2ac:	a0 86       	std	Z+8, r10	; 0x08
     2ae:	01 00       	.word	0x0001	; ????
     2b0:	00 00       	nop
     2b2:	10 27       	eor	r17, r16
     2b4:	00 00       	nop
     2b6:	00 00       	nop
     2b8:	e8 03       	fmulsu	r22, r16
     2ba:	00 00       	nop
     2bc:	00 00       	nop
     2be:	64 00       	.word	0x0064	; ????
     2c0:	00 00       	nop
     2c2:	00 00       	nop
     2c4:	0a 00       	.word	0x000a	; ????
     2c6:	00 00       	nop
     2c8:	00 00       	nop
     2ca:	01 00       	.word	0x0001	; ????
     2cc:	00 00       	nop
     2ce:	00 00       	nop
     2d0:	2c 76       	andi	r18, 0x6C	; 108
     2d2:	d8 88       	ldd	r13, Y+16	; 0x10
     2d4:	dc 67       	ori	r29, 0x7C	; 124
     2d6:	4f 08       	sbc	r4, r15
     2d8:	23 df       	rcall	.-442    	; 0x120 <__SREG__+0xe1>
     2da:	c1 df       	rcall	.-126    	; 0x25e <__SREG__+0x21f>
     2dc:	ae 59       	subi	r26, 0x9E	; 158
     2de:	e1 b1       	in	r30, 0x01	; 1
     2e0:	b7 96       	adiw	r30, 0x27	; 39
     2e2:	e5 e3       	ldi	r30, 0x35	; 53
     2e4:	e4 53       	subi	r30, 0x34	; 52
     2e6:	c6 3a       	cpi	r28, 0xA6	; 166
     2e8:	e6 51       	subi	r30, 0x16	; 22
     2ea:	99 76       	andi	r25, 0x69	; 105
     2ec:	96 e8       	ldi	r25, 0x86	; 134
     2ee:	e6 c2       	rjmp	.+1484   	; 0x8bc <InitSSI+0x22>
     2f0:	84 26       	eor	r8, r20
     2f2:	eb 89       	ldd	r30, Y+19	; 0x13
     2f4:	8c 9b       	sbis	0x11, 4	; 17
     2f6:	62 ed       	ldi	r22, 0xD2	; 210
     2f8:	40 7c       	andi	r20, 0xC0	; 192
     2fa:	6f fc       	.word	0xfc6f	; ????
     2fc:	ef bc       	out	0x2f, r14	; 47
     2fe:	9c 9f       	mul	r25, r28
     300:	40 f2       	brcs	.-112    	; 0x292 <__trampolines_end+0x1c>
     302:	ba a5       	ldd	r27, Y+42	; 0x2a
     304:	6f a5       	ldd	r22, Y+47	; 0x2f
     306:	f4 90       	lpm	r15, Z
     308:	05 5a       	subi	r16, 0xA5	; 165
     30a:	2a f7       	brpl	.-54     	; 0x2d6 <__trampolines_end+0x60>
     30c:	5c 93       	st	X, r21
     30e:	6b 6c       	ori	r22, 0xCB	; 203
     310:	f9 67       	ori	r31, 0x79	; 121
     312:	6d c1       	rjmp	.+730    	; 0x5ee <IMU_init+0x14>
     314:	1b fc       	.word	0xfc1b	; ????
     316:	e0 e4       	ldi	r30, 0x40	; 64
     318:	0d 47       	sbci	r16, 0x7D	; 125
     31a:	fe f5       	brtc	.+126    	; 0x39a <__do_clear_bss>
     31c:	20 e6       	ldi	r18, 0x60	; 96
     31e:	b5 00       	.word	0x00b5	; ????
     320:	d0 ed       	ldi	r29, 0xD0	; 208
     322:	90 2e       	mov	r9, r16
     324:	03 00       	.word	0x0003	; ????
     326:	94 35       	cpi	r25, 0x54	; 84
     328:	77 05       	cpc	r23, r7
     32a:	00 80       	ld	r0, Z
     32c:	84 1e       	adc	r8, r20
     32e:	08 00       	.word	0x0008	; ????
     330:	00 20       	and	r0, r0
     332:	4e 0a       	sbc	r4, r30
     334:	00 00       	nop
     336:	00 c8       	rjmp	.-4096   	; 0xfffff338 <__eeprom_end+0xff7ef338>
     338:	0c 33       	cpi	r16, 0x3C	; 60
     33a:	33 33       	cpi	r19, 0x33	; 51
     33c:	33 0f       	add	r19, r19
     33e:	98 6e       	ori	r25, 0xE8	; 232
     340:	12 83       	std	Z+2, r17	; 0x02
     342:	11 41       	sbci	r17, 0x11	; 17
     344:	ef 8d       	ldd	r30, Y+31	; 0x1f
     346:	21 14       	cp	r2, r1
     348:	89 3b       	cpi	r24, 0xB9	; 185
     34a:	e6 55       	subi	r30, 0x56	; 86
     34c:	16 cf       	rjmp	.-468    	; 0x17a <__SREG__+0x13b>
     34e:	fe e6       	ldi	r31, 0x6E	; 110
     350:	db 18       	sub	r13, r11
     352:	d1 84       	ldd	r13, Z+9	; 0x09
     354:	4b 38       	cpi	r20, 0x8B	; 139
     356:	1b f7       	brvc	.-58     	; 0x31e <__trampolines_end+0xa8>
     358:	7c 1d       	adc	r23, r12
     35a:	90 1d       	adc	r25, r0
     35c:	a4 bb       	out	0x14, r26	; 20
     35e:	e4 24       	eor	r14, r4
     360:	20 32       	cpi	r18, 0x20	; 32
     362:	84 72       	andi	r24, 0x24	; 36
     364:	5e 22       	and	r5, r30
     366:	81 00       	.word	0x0081	; ????
     368:	c9 f1       	breq	.+114    	; 0x3dc <i2c_beginTransmission+0x12>
     36a:	24 ec       	ldi	r18, 0xC4	; 196
     36c:	a1 e5       	ldi	r26, 0x51	; 81
     36e:	3d 27       	eor	r19, r29

00000370 <__ctors_end>:
     370:	11 24       	eor	r1, r1
     372:	1f be       	out	0x3f, r1	; 63
     374:	cf ef       	ldi	r28, 0xFF	; 255
     376:	d1 e2       	ldi	r29, 0x21	; 33
     378:	de bf       	out	0x3e, r29	; 62
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	00 e0       	ldi	r16, 0x00	; 0
     37e:	0c bf       	out	0x3c, r16	; 60

00000380 <__do_copy_data>:
     380:	13 e0       	ldi	r17, 0x03	; 3
     382:	a0 e0       	ldi	r26, 0x00	; 0
     384:	b2 e0       	ldi	r27, 0x02	; 2
     386:	ea e0       	ldi	r30, 0x0A	; 10
     388:	f4 e2       	ldi	r31, 0x24	; 36
     38a:	00 e0       	ldi	r16, 0x00	; 0
     38c:	0b bf       	out	0x3b, r16	; 59
     38e:	02 c0       	rjmp	.+4      	; 0x394 <__do_copy_data+0x14>
     390:	07 90       	elpm	r0, Z+
     392:	0d 92       	st	X+, r0
     394:	a6 38       	cpi	r26, 0x86	; 134
     396:	b1 07       	cpc	r27, r17
     398:	d9 f7       	brne	.-10     	; 0x390 <__do_copy_data+0x10>

0000039a <__do_clear_bss>:
     39a:	2d e0       	ldi	r18, 0x0D	; 13
     39c:	a6 e8       	ldi	r26, 0x86	; 134
     39e:	b3 e0       	ldi	r27, 0x03	; 3
     3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <.do_clear_bss_start>

000003a2 <.do_clear_bss_loop>:
     3a2:	1d 92       	st	X+, r1

000003a4 <.do_clear_bss_start>:
     3a4:	af 3c       	cpi	r26, 0xCF	; 207
     3a6:	b2 07       	cpc	r27, r18
     3a8:	e1 f7       	brne	.-8      	; 0x3a2 <.do_clear_bss_loop>
     3aa:	01 d5       	rcall	.+2562   	; 0xdae <main>
     3ac:	0c 94 03 12 	jmp	0x2406	; 0x2406 <_exit>

000003b0 <__bad_interrupt>:
     3b0:	27 ce       	rjmp	.-946    	; 0x0 <__vectors>

000003b2 <i2c_begin>:
}

int i2c_available(void)
{
	return rxBufferLength - rxBufferIndex;
}
     3b2:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <rxBufferIndex>
     3b6:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <rxBufferLength>
     3ba:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <txBufferIndex>
     3be:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <txBufferLength>
     3c2:	8d c5       	rjmp	.+2842   	; 0xede <twi_init>
     3c4:	08 95       	ret

000003c6 <i2c_setClock>:
     3c6:	a5 c5       	rjmp	.+2890   	; 0xf12 <twi_setFrequency>
     3c8:	08 95       	ret

000003ca <i2c_beginTransmission>:
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <__data_end>
     3d0:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <txAddress>
     3d4:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <txBufferIndex>
     3d8:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <txBufferLength>
     3dc:	08 95       	ret

000003de <i2c_endTransmission>:
     3de:	0f 93       	push	r16
     3e0:	08 2f       	mov	r16, r24
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	40 91 87 03 	lds	r20, 0x0387	; 0x800387 <txBufferLength>
     3e8:	69 e8       	ldi	r22, 0x89	; 137
     3ea:	73 e0       	ldi	r23, 0x03	; 3
     3ec:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <txAddress>
     3f0:	7b d6       	rcall	.+3318   	; 0x10e8 <twi_writeTo>
     3f2:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <txBufferIndex>
     3f6:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <txBufferLength>
     3fa:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <__data_end>
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <i2c_write_byte>:
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	1f 92       	push	r1
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	89 83       	std	Y+1, r24	; 0x01
     40e:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <__data_end>
     412:	88 23       	and	r24, r24
     414:	99 f0       	breq	.+38     	; 0x43c <i2c_write_byte+0x3a>
     416:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <txBufferLength>
     41a:	80 32       	cpi	r24, 0x20	; 32
     41c:	a8 f4       	brcc	.+42     	; 0x448 <i2c_write_byte+0x46>
     41e:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <txBufferIndex>
     422:	e8 2f       	mov	r30, r24
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	e7 57       	subi	r30, 0x77	; 119
     428:	fc 4f       	sbci	r31, 0xFC	; 252
     42a:	99 81       	ldd	r25, Y+1	; 0x01
     42c:	90 83       	st	Z, r25
     42e:	8f 5f       	subi	r24, 0xFF	; 255
     430:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <txBufferIndex>
     434:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <txBufferLength>
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	07 c0       	rjmp	.+14     	; 0x44a <i2c_write_byte+0x48>
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	7a d5       	rcall	.+2804   	; 0xf38 <twi_transmit>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	01 c0       	rjmp	.+2      	; 0x44a <i2c_write_byte+0x48>
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0f 90       	pop	r0
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <i2c_requestFrom>:
     452:	8f 92       	push	r8
     454:	9f 92       	push	r9
     456:	af 92       	push	r10
     458:	bf 92       	push	r11
     45a:	ef 92       	push	r14
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	18 2f       	mov	r17, r24
     466:	d6 2f       	mov	r29, r22
     468:	49 01       	movw	r8, r18
     46a:	5a 01       	movw	r10, r20
     46c:	00 23       	and	r16, r16
     46e:	f1 f0       	breq	.+60     	; 0x4ac <i2c_requestFrom+0x5a>
     470:	ac df       	rcall	.-168    	; 0x3ca <i2c_beginTransmission>
     472:	04 30       	cpi	r16, 0x04	; 4
     474:	08 f0       	brcs	.+2      	; 0x478 <i2c_requestFrom+0x26>
     476:	03 e0       	ldi	r16, 0x03	; 3
     478:	cf ef       	ldi	r28, 0xFF	; 255
     47a:	c0 0f       	add	r28, r16
     47c:	00 23       	and	r16, r16
     47e:	a1 f0       	breq	.+40     	; 0x4a8 <i2c_requestFrom+0x56>
     480:	8c 2f       	mov	r24, r28
     482:	88 0f       	add	r24, r24
     484:	88 0f       	add	r24, r24
     486:	88 0f       	add	r24, r24
     488:	a5 01       	movw	r20, r10
     48a:	94 01       	movw	r18, r8
     48c:	04 c0       	rjmp	.+8      	; 0x496 <i2c_requestFrom+0x44>
     48e:	56 95       	lsr	r21
     490:	47 95       	ror	r20
     492:	37 95       	ror	r19
     494:	27 95       	ror	r18
     496:	8a 95       	dec	r24
     498:	d2 f7       	brpl	.-12     	; 0x48e <i2c_requestFrom+0x3c>
     49a:	da 01       	movw	r26, r20
     49c:	c9 01       	movw	r24, r18
     49e:	b1 df       	rcall	.-158    	; 0x402 <i2c_write_byte>
     4a0:	8c 2f       	mov	r24, r28
     4a2:	c1 50       	subi	r28, 0x01	; 1
     4a4:	81 11       	cpse	r24, r1
     4a6:	ec cf       	rjmp	.-40     	; 0x480 <i2c_requestFrom+0x2e>
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	99 df       	rcall	.-206    	; 0x3de <i2c_endTransmission>
     4ac:	4d 2f       	mov	r20, r29
     4ae:	d1 32       	cpi	r29, 0x21	; 33
     4b0:	08 f0       	brcs	.+2      	; 0x4b4 <i2c_requestFrom+0x62>
     4b2:	40 e2       	ldi	r20, 0x20	; 32
     4b4:	2e 2d       	mov	r18, r14
     4b6:	6c ea       	ldi	r22, 0xAC	; 172
     4b8:	73 e0       	ldi	r23, 0x03	; 3
     4ba:	81 2f       	mov	r24, r17
     4bc:	a5 d5       	rcall	.+2890   	; 0x1008 <twi_readFrom>
     4be:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <rxBufferIndex>
     4c2:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <rxBufferLength>
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	ef 90       	pop	r14
     4d0:	bf 90       	pop	r11
     4d2:	af 90       	pop	r10
     4d4:	9f 90       	pop	r9
     4d6:	8f 90       	pop	r8
     4d8:	08 95       	ret

000004da <i2c_read>:

int i2c_read(void)
{
	int value = -1;
	
	if(rxBufferIndex < rxBufferLength){
     4da:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <rxBufferIndex>
     4de:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <rxBufferLength>
     4e2:	98 17       	cp	r25, r24
     4e4:	50 f4       	brcc	.+20     	; 0x4fa <i2c_read+0x20>
		value = rxBuffer[rxBufferIndex];
     4e6:	e9 2f       	mov	r30, r25
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	e4 55       	subi	r30, 0x54	; 84
     4ec:	fc 4f       	sbci	r31, 0xFC	; 252
     4ee:	20 81       	ld	r18, Z
     4f0:	30 e0       	ldi	r19, 0x00	; 0
		++rxBufferIndex;
     4f2:	9f 5f       	subi	r25, 0xFF	; 255
     4f4:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <rxBufferIndex>
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <i2c_read+0x24>
	return rxBufferLength - rxBufferIndex;
}

int i2c_read(void)
{
	int value = -1;
     4fa:	2f ef       	ldi	r18, 0xFF	; 255
     4fc:	3f ef       	ldi	r19, 0xFF	; 255
		value = rxBuffer[rxBufferIndex];
		++rxBufferIndex;
	}

	return value;
}
     4fe:	c9 01       	movw	r24, r18
     500:	08 95       	ret

00000502 <__vector_17>:
	//USART_Transmit_Line(buffer);

	OCR0B = 0;

	controlBuffer[buffCount] = control;
}
     502:	1f 92       	push	r1
     504:	0f 92       	push	r0
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	0f 92       	push	r0
     50a:	11 24       	eor	r1, r1
     50c:	8f 93       	push	r24
     50e:	9f 93       	push	r25
     510:	af 93       	push	r26
     512:	bf 93       	push	r27
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <flag>
     51a:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <counter>
     51e:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <counter+0x1>
     522:	a0 91 ce 03 	lds	r26, 0x03CE	; 0x8003ce <counter+0x2>
     526:	b0 91 cf 03 	lds	r27, 0x03CF	; 0x8003cf <counter+0x3>
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	a1 1d       	adc	r26, r1
     52e:	b1 1d       	adc	r27, r1
     530:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <counter>
     534:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <counter+0x1>
     538:	a0 93 ce 03 	sts	0x03CE, r26	; 0x8003ce <counter+0x2>
     53c:	b0 93 cf 03 	sts	0x03CF, r27	; 0x8003cf <counter+0x3>
     540:	bf 91       	pop	r27
     542:	af 91       	pop	r26
     544:	9f 91       	pop	r25
     546:	8f 91       	pop	r24
     548:	0f 90       	pop	r0
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	0f 90       	pop	r0
     54e:	1f 90       	pop	r1
     550:	18 95       	reti

00000552 <InitPrecessionMotor>:
     552:	e1 e0       	ldi	r30, 0x01	; 1
     554:	f1 e0       	ldi	r31, 0x01	; 1
     556:	80 81       	ld	r24, Z
     558:	80 64       	ori	r24, 0x40	; 64
     55a:	80 83       	st	Z, r24
     55c:	e2 e0       	ldi	r30, 0x02	; 2
     55e:	f1 e0       	ldi	r31, 0x01	; 1
     560:	80 81       	ld	r24, Z
     562:	80 64       	ori	r24, 0x40	; 64
     564:	80 83       	st	Z, r24
     566:	6b 9a       	sbi	0x0d, 3	; 13
     568:	73 98       	cbi	0x0e, 3	; 14
     56a:	9d 9a       	sbi	0x13, 5	; 19
     56c:	27 9a       	sbi	0x04, 7	; 4
     56e:	14 bc       	out	0x24, r1	; 36
     570:	15 bc       	out	0x25, r1	; 37
     572:	84 b5       	in	r24, 0x24	; 36
     574:	80 6a       	ori	r24, 0xA0	; 160
     576:	84 bd       	out	0x24, r24	; 36
     578:	84 b5       	in	r24, 0x24	; 36
     57a:	83 60       	ori	r24, 0x03	; 3
     57c:	84 bd       	out	0x24, r24	; 36
     57e:	85 b5       	in	r24, 0x25	; 37
     580:	84 60       	ori	r24, 0x04	; 4
     582:	85 bd       	out	0x25, r24	; 37
     584:	18 bc       	out	0x28, r1	; 40
     586:	81 ea       	ldi	r24, 0xA1	; 161
     588:	87 bd       	out	0x27, r24	; 39
     58a:	08 95       	ret

0000058c <InitClocks>:
     58c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     590:	e1 e8       	ldi	r30, 0x81	; 129
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	10 82       	st	Z, r1
     596:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     59a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     59e:	8c e9       	ldi	r24, 0x9C	; 156
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     5a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     5aa:	80 81       	ld	r24, Z
     5ac:	88 60       	ori	r24, 0x08	; 8
     5ae:	80 83       	st	Z, r24
     5b0:	80 81       	ld	r24, Z
     5b2:	85 60       	ori	r24, 0x05	; 5
     5b4:	80 83       	st	Z, r24
     5b6:	ef e6       	ldi	r30, 0x6F	; 111
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	82 60       	ori	r24, 0x02	; 2
     5be:	80 83       	st	Z, r24
     5c0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     5c4:	e1 e9       	ldi	r30, 0x91	; 145
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	10 82       	st	Z, r1
     5ca:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     5ce:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     5d2:	80 81       	ld	r24, Z
     5d4:	83 60       	ori	r24, 0x03	; 3
     5d6:	80 83       	st	Z, r24
     5d8:	08 95       	ret

000005da <IMU_init>:
     5da:	87 e7       	ldi	r24, 0x77	; 119
     5dc:	f6 de       	rcall	.-532    	; 0x3ca <i2c_beginTransmission>
     5de:	82 e4       	ldi	r24, 0x42	; 66
     5e0:	10 df       	rcall	.-480    	; 0x402 <i2c_write_byte>
     5e2:	80 e6       	ldi	r24, 0x60	; 96
     5e4:	0e df       	rcall	.-484    	; 0x402 <i2c_write_byte>
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	fa de       	rcall	.-524    	; 0x3de <i2c_endTransmission>
     5ea:	85 30       	cpi	r24, 0x05	; 5
     5ec:	29 f4       	brne	.+10     	; 0x5f8 <IMU_init+0x1e>
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	6f d7       	rcall	.+3806   	; 0x14d2 <USART_Transmit_Line>
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	08 95       	ret
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	08 95       	ret

000005fc <IMURead_eulerAngle>:
     5fc:	4f 92       	push	r4
     5fe:	5f 92       	push	r5
     600:	6f 92       	push	r6
     602:	7f 92       	push	r7
     604:	8f 92       	push	r8
     606:	9f 92       	push	r9
     608:	af 92       	push	r10
     60a:	bf 92       	push	r11
     60c:	cf 92       	push	r12
     60e:	df 92       	push	r13
     610:	ef 92       	push	r14
     612:	ff 92       	push	r15
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	00 d0       	rcall	.+0      	; 0x61e <IMURead_eulerAngle+0x22>
     61e:	1f 92       	push	r1
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	5c 01       	movw	r10, r24
     626:	87 e7       	ldi	r24, 0x77	; 119
     628:	d0 de       	rcall	.-608    	; 0x3ca <i2c_beginTransmission>
     62a:	82 e4       	ldi	r24, 0x42	; 66
     62c:	ea de       	rcall	.-556    	; 0x402 <i2c_write_byte>
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	e8 de       	rcall	.-560    	; 0x402 <i2c_write_byte>
     632:	83 e4       	ldi	r24, 0x43	; 67
     634:	e6 de       	rcall	.-564    	; 0x402 <i2c_write_byte>
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	d2 de       	rcall	.-604    	; 0x3de <i2c_endTransmission>
     63a:	85 30       	cpi	r24, 0x05	; 5
     63c:	29 f4       	brne	.+10     	; 0x648 <IMURead_eulerAngle+0x4c>
     63e:	84 e2       	ldi	r24, 0x24	; 36
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	47 d7       	rcall	.+3726   	; 0x14d2 <USART_Transmit_Line>
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	64 c0       	rjmp	.+200    	; 0x710 <IMURead_eulerAngle+0x114>
     648:	ee 24       	eor	r14, r14
     64a:	e3 94       	inc	r14
     64c:	00 e0       	ldi	r16, 0x00	; 0
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	a9 01       	movw	r20, r18
     654:	6c e0       	ldi	r22, 0x0C	; 12
     656:	87 e7       	ldi	r24, 0x77	; 119
     658:	fc de       	rcall	.-520    	; 0x452 <i2c_requestFrom>
     65a:	0f 2e       	mov	r0, r31
     65c:	fd ed       	ldi	r31, 0xDD	; 221
     65e:	cf 2e       	mov	r12, r31
     660:	f3 e0       	ldi	r31, 0x03	; 3
     662:	df 2e       	mov	r13, r31
     664:	f0 2d       	mov	r31, r0
     666:	0f 2e       	mov	r0, r31
     668:	f9 ee       	ldi	r31, 0xE9	; 233
     66a:	8f 2e       	mov	r8, r31
     66c:	f3 e0       	ldi	r31, 0x03	; 3
     66e:	9f 2e       	mov	r9, r31
     670:	f0 2d       	mov	r31, r0
     672:	ce 01       	movw	r24, r28
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	7c 01       	movw	r14, r24
     678:	19 82       	std	Y+1, r1	; 0x01
     67a:	1a 82       	std	Y+2, r1	; 0x02
     67c:	1b 82       	std	Y+3, r1	; 0x03
     67e:	1c 82       	std	Y+4, r1	; 0x04
     680:	8e 01       	movw	r16, r28
     682:	0b 5f       	subi	r16, 0xFB	; 251
     684:	1f 4f       	sbci	r17, 0xFF	; 255
     686:	29 df       	rcall	.-430    	; 0x4da <i2c_read>
     688:	f8 01       	movw	r30, r16
     68a:	82 93       	st	-Z, r24
     68c:	8f 01       	movw	r16, r30
     68e:	ee 15       	cp	r30, r14
     690:	ff 05       	cpc	r31, r15
     692:	c9 f7       	brne	.-14     	; 0x686 <IMURead_eulerAngle+0x8a>
     694:	49 80       	ldd	r4, Y+1	; 0x01
     696:	5a 80       	ldd	r5, Y+2	; 0x02
     698:	6b 80       	ldd	r6, Y+3	; 0x03
     69a:	7c 80       	ldd	r7, Y+4	; 0x04
     69c:	c3 01       	movw	r24, r6
     69e:	b2 01       	movw	r22, r4
     6a0:	f6 d7       	rcall	.+4076   	; 0x168e <__fixsfsi>
     6a2:	9b 01       	movw	r18, r22
     6a4:	77 23       	and	r23, r23
     6a6:	24 f4       	brge	.+8      	; 0x6b0 <IMURead_eulerAngle+0xb4>
     6a8:	22 27       	eor	r18, r18
     6aa:	33 27       	eor	r19, r19
     6ac:	26 1b       	sub	r18, r22
     6ae:	37 0b       	sbc	r19, r23
     6b0:	b9 01       	movw	r22, r18
     6b2:	33 0f       	add	r19, r19
     6b4:	88 0b       	sbc	r24, r24
     6b6:	99 0b       	sbc	r25, r25
     6b8:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__floatsisf>
     6bc:	2b ed       	ldi	r18, 0xDB	; 219
     6be:	3f e0       	ldi	r19, 0x0F	; 15
     6c0:	49 e4       	ldi	r20, 0x49	; 73
     6c2:	50 e4       	ldi	r21, 0x40	; 64
     6c4:	78 d7       	rcall	.+3824   	; 0x15b6 <__cmpsf2>
     6c6:	18 16       	cp	r1, r24
     6c8:	4c f0       	brlt	.+18     	; 0x6dc <IMURead_eulerAngle+0xe0>
     6ca:	77 fa       	bst	r7, 7
     6cc:	70 94       	com	r7
     6ce:	77 f8       	bld	r7, 7
     6d0:	70 94       	com	r7
     6d2:	f6 01       	movw	r30, r12
     6d4:	40 82       	st	Z, r4
     6d6:	51 82       	std	Z+1, r5	; 0x01
     6d8:	62 82       	std	Z+2, r6	; 0x02
     6da:	73 82       	std	Z+3, r7	; 0x03
     6dc:	f4 e0       	ldi	r31, 0x04	; 4
     6de:	cf 0e       	add	r12, r31
     6e0:	d1 1c       	adc	r13, r1
     6e2:	c8 14       	cp	r12, r8
     6e4:	d9 04       	cpc	r13, r9
     6e6:	41 f6       	brne	.-112    	; 0x678 <IMURead_eulerAngle+0x7c>
     6e8:	f5 01       	movw	r30, r10
     6ea:	ee 0f       	add	r30, r30
     6ec:	ff 1f       	adc	r31, r31
     6ee:	ee 0f       	add	r30, r30
     6f0:	ff 1f       	adc	r31, r31
     6f2:	e1 5c       	subi	r30, 0xC1	; 193
     6f4:	f3 4f       	sbci	r31, 0xF3	; 243
     6f6:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <euler_angles+0x4>
     6fa:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <euler_angles+0x5>
     6fe:	a0 91 e3 03 	lds	r26, 0x03E3	; 0x8003e3 <euler_angles+0x6>
     702:	b0 91 e4 03 	lds	r27, 0x03E4	; 0x8003e4 <euler_angles+0x7>
     706:	80 83       	st	Z, r24
     708:	91 83       	std	Z+1, r25	; 0x01
     70a:	a2 83       	std	Z+2, r26	; 0x02
     70c:	b3 83       	std	Z+3, r27	; 0x03
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	ef 90       	pop	r14
     724:	df 90       	pop	r13
     726:	cf 90       	pop	r12
     728:	bf 90       	pop	r11
     72a:	af 90       	pop	r10
     72c:	9f 90       	pop	r9
     72e:	8f 90       	pop	r8
     730:	7f 90       	pop	r7
     732:	6f 90       	pop	r6
     734:	5f 90       	pop	r5
     736:	4f 90       	pop	r4
     738:	08 95       	ret

0000073a <IMURead_eulerVelocities>:
     73a:	4f 92       	push	r4
     73c:	5f 92       	push	r5
     73e:	6f 92       	push	r6
     740:	7f 92       	push	r7
     742:	8f 92       	push	r8
     744:	9f 92       	push	r9
     746:	af 92       	push	r10
     748:	bf 92       	push	r11
     74a:	cf 92       	push	r12
     74c:	df 92       	push	r13
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	00 d0       	rcall	.+0      	; 0x75c <IMURead_eulerVelocities+0x22>
     75c:	1f 92       	push	r1
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	5c 01       	movw	r10, r24
     764:	87 e7       	ldi	r24, 0x77	; 119
     766:	31 de       	rcall	.-926    	; 0x3ca <i2c_beginTransmission>
     768:	82 e4       	ldi	r24, 0x42	; 66
     76a:	4b de       	rcall	.-874    	; 0x402 <i2c_write_byte>
     76c:	86 e2       	ldi	r24, 0x26	; 38
     76e:	49 de       	rcall	.-878    	; 0x402 <i2c_write_byte>
     770:	83 e4       	ldi	r24, 0x43	; 67
     772:	47 de       	rcall	.-882    	; 0x402 <i2c_write_byte>
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	33 de       	rcall	.-922    	; 0x3de <i2c_endTransmission>
     778:	85 30       	cpi	r24, 0x05	; 5
     77a:	29 f4       	brne	.+10     	; 0x786 <IMURead_eulerVelocities+0x4c>
     77c:	82 e5       	ldi	r24, 0x52	; 82
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	a8 d6       	rcall	.+3408   	; 0x14d2 <USART_Transmit_Line>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	56 c0       	rjmp	.+172    	; 0x832 <IMURead_eulerVelocities+0xf8>
     786:	ee 24       	eor	r14, r14
     788:	e3 94       	inc	r14
     78a:	00 e0       	ldi	r16, 0x00	; 0
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	a9 01       	movw	r20, r18
     792:	6c e0       	ldi	r22, 0x0C	; 12
     794:	87 e7       	ldi	r24, 0x77	; 119
     796:	5d de       	rcall	.-838    	; 0x452 <i2c_requestFrom>
     798:	0f 2e       	mov	r0, r31
     79a:	f1 ed       	ldi	r31, 0xD1	; 209
     79c:	cf 2e       	mov	r12, r31
     79e:	f3 e0       	ldi	r31, 0x03	; 3
     7a0:	df 2e       	mov	r13, r31
     7a2:	f0 2d       	mov	r31, r0
     7a4:	0f 2e       	mov	r0, r31
     7a6:	fd ed       	ldi	r31, 0xDD	; 221
     7a8:	8f 2e       	mov	r8, r31
     7aa:	f3 e0       	ldi	r31, 0x03	; 3
     7ac:	9f 2e       	mov	r9, r31
     7ae:	f0 2d       	mov	r31, r0
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	7c 01       	movw	r14, r24
     7b6:	19 82       	std	Y+1, r1	; 0x01
     7b8:	1a 82       	std	Y+2, r1	; 0x02
     7ba:	1b 82       	std	Y+3, r1	; 0x03
     7bc:	1c 82       	std	Y+4, r1	; 0x04
     7be:	8e 01       	movw	r16, r28
     7c0:	0b 5f       	subi	r16, 0xFB	; 251
     7c2:	1f 4f       	sbci	r17, 0xFF	; 255
     7c4:	8a de       	rcall	.-748    	; 0x4da <i2c_read>
     7c6:	f8 01       	movw	r30, r16
     7c8:	82 93       	st	-Z, r24
     7ca:	8f 01       	movw	r16, r30
     7cc:	ee 15       	cp	r30, r14
     7ce:	ff 05       	cpc	r31, r15
     7d0:	c9 f7       	brne	.-14     	; 0x7c4 <IMURead_eulerVelocities+0x8a>
     7d2:	49 80       	ldd	r4, Y+1	; 0x01
     7d4:	5a 80       	ldd	r5, Y+2	; 0x02
     7d6:	6b 80       	ldd	r6, Y+3	; 0x03
     7d8:	7c 80       	ldd	r7, Y+4	; 0x04
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 ea       	ldi	r20, 0xA0	; 160
     7e0:	51 e4       	ldi	r21, 0x41	; 65
     7e2:	c3 01       	movw	r24, r6
     7e4:	b2 01       	movw	r22, r4
     7e6:	e7 d6       	rcall	.+3534   	; 0x15b6 <__cmpsf2>
     7e8:	18 16       	cp	r1, r24
     7ea:	4c f0       	brlt	.+18     	; 0x7fe <IMURead_eulerVelocities+0xc4>
     7ec:	77 fa       	bst	r7, 7
     7ee:	70 94       	com	r7
     7f0:	77 f8       	bld	r7, 7
     7f2:	70 94       	com	r7
     7f4:	f6 01       	movw	r30, r12
     7f6:	40 82       	st	Z, r4
     7f8:	51 82       	std	Z+1, r5	; 0x01
     7fa:	62 82       	std	Z+2, r6	; 0x02
     7fc:	73 82       	std	Z+3, r7	; 0x03
     7fe:	f4 e0       	ldi	r31, 0x04	; 4
     800:	cf 0e       	add	r12, r31
     802:	d1 1c       	adc	r13, r1
     804:	c8 14       	cp	r12, r8
     806:	d9 04       	cpc	r13, r9
     808:	b1 f6       	brne	.-84     	; 0x7b6 <IMURead_eulerVelocities+0x7c>
     80a:	f5 01       	movw	r30, r10
     80c:	ee 0f       	add	r30, r30
     80e:	ff 1f       	adc	r31, r31
     810:	ee 0f       	add	r30, r30
     812:	ff 1f       	adc	r31, r31
     814:	e1 55       	subi	r30, 0x51	; 81
     816:	f5 4f       	sbci	r31, 0xF5	; 245
     818:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <euler_velocities+0x4>
     81c:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <euler_velocities+0x5>
     820:	a0 91 d7 03 	lds	r26, 0x03D7	; 0x8003d7 <euler_velocities+0x6>
     824:	b0 91 d8 03 	lds	r27, 0x03D8	; 0x8003d8 <euler_velocities+0x7>
     828:	80 83       	st	Z, r24
     82a:	91 83       	std	Z+1, r25	; 0x01
     82c:	a2 83       	std	Z+2, r26	; 0x02
     82e:	b3 83       	std	Z+3, r27	; 0x03
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	9f 90       	pop	r9
     850:	8f 90       	pop	r8
     852:	7f 90       	pop	r7
     854:	6f 90       	pop	r6
     856:	5f 90       	pop	r5
     858:	4f 90       	pop	r4
     85a:	08 95       	ret

0000085c <ReadSSI>:
/*********************************************************************
*						Read SSI via SPI
*********************************************************************/

uint32_t ReadSSI() //Mimic SSI communication
{
     85c:	24 e0       	ldi	r18, 0x04	; 4
	uint8_t u8byteCount;      // Data length counter
	uint8_t u8data;           // Data temporary variable
	uint32_t u32result = 0;   // Data complete variable
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	dc 01       	movw	r26, r24

	for(u8byteCount = 0; u8byteCount < 4; u8byteCount++)            // Fetch data function
	{
		// send a dummy byte, read the result
		SPDR = 0xFF;                      // Send dummy message
     864:	4f ef       	ldi	r20, 0xFF	; 255
     866:	4e bd       	out	0x2e, r20	; 46
		u32result <<= 8;                  // Shift old result
     868:	ba 2f       	mov	r27, r26
     86a:	a9 2f       	mov	r26, r25
     86c:	98 2f       	mov	r25, r24
     86e:	88 27       	eor	r24, r24
		while( (SPSR & (1<<SPIF)) == 0 ); // Wait for new data
     870:	0d b4       	in	r0, 0x2d	; 45
     872:	07 fe       	sbrs	r0, 7
     874:	fd cf       	rjmp	.-6      	; 0x870 <ReadSSI+0x14>
		u8data = SPDR;                    // Store data
     876:	3e b5       	in	r19, 0x2e	; 46
		u32result |= u8data;              // Update complete data variable
     878:	83 2b       	or	r24, r19
     87a:	21 50       	subi	r18, 0x01	; 1
{
	uint8_t u8byteCount;      // Data length counter
	uint8_t u8data;           // Data temporary variable
	uint32_t u32result = 0;   // Data complete variable

	for(u8byteCount = 0; u8byteCount < 4; u8byteCount++)            // Fetch data function
     87c:	a1 f7       	brne	.-24     	; 0x866 <ReadSSI+0xa>
		while( (SPSR & (1<<SPIF)) == 0 ); // Wait for new data
		u8data = SPDR;                    // Store data
		u32result |= u8data;              // Update complete data variable
	}
	//u32result = u32result >> 7;					// The last seven bits are timeout
	return ((u32result >> 12) & IMU_MAX_ENCVAL);		// Return only absolute position
     87e:	07 2e       	mov	r0, r23
     880:	7c e0       	ldi	r23, 0x0C	; 12
     882:	b6 95       	lsr	r27
     884:	a7 95       	ror	r26
     886:	97 95       	ror	r25
     888:	87 95       	ror	r24
     88a:	7a 95       	dec	r23
     88c:	d1 f7       	brne	.-12     	; 0x882 <ReadSSI+0x26>
     88e:	70 2d       	mov	r23, r0
     890:	bc 01       	movw	r22, r24
     892:	cd 01       	movw	r24, r26
     894:	87 70       	andi	r24, 0x07	; 7
     896:	99 27       	eor	r25, r25
}
     898:	08 95       	ret

0000089a <InitSSI>:
*              Initalize SPI to mimic SSI
*********************************************************************/

void InitSSI() // Initialize the encoder communication
{
	DDRB = _BV(DDB1) | _BV(DDB3) | _BV(DDB0);   // Configure SCK, MOSI and  Slave Select
     89a:	8b e0       	ldi	r24, 0x0B	; 11
     89c:	84 b9       	out	0x04, r24	; 4
	SPCR |= _BV(SPR1);                // divided clock by 128
     89e:	8c b5       	in	r24, 0x2c	; 44
     8a0:	82 60       	ori	r24, 0x02	; 2
     8a2:	8c bd       	out	0x2c, r24	; 44
	SPCR |= _BV(SPE) | _BV(MSTR) | _BV(CPOL);    // Configure SPI as master, with CLK idle high
     8a4:	8c b5       	in	r24, 0x2c	; 44
     8a6:	88 65       	ori	r24, 0x58	; 88
     8a8:	8c bd       	out	0x2c, r24	; 44
	encval_offset = ReadSSI();                  // Save initial value
     8aa:	d8 df       	rcall	.-80     	; 0x85c <ReadSSI>
     8ac:	60 93 f1 03 	sts	0x03F1, r22	; 0x8003f1 <encval_offset>
     8b0:	70 93 f2 03 	sts	0x03F2, r23	; 0x8003f2 <encval_offset+0x1>
     8b4:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <encval_offset+0x2>
     8b8:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <encval_offset+0x3>
     8bc:	08 95       	ret

000008be <EncoderRead>:
/*********************************************************************
*                    Read encoder function
*********************************************************************/

char EncoderRead(int buffCount) // Requests values from the Encoder
{
     8be:	4f 92       	push	r4
     8c0:	5f 92       	push	r5
     8c2:	6f 92       	push	r6
     8c4:	7f 92       	push	r7
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	ec 01       	movw	r28, r24
	oldtimer = timer;						// Last data point timer
     8dc:	a0 90 ed 03 	lds	r10, 0x03ED	; 0x8003ed <timer>
     8e0:	b0 90 ee 03 	lds	r11, 0x03EE	; 0x8003ee <timer+0x1>
     8e4:	b0 92 f0 03 	sts	0x03F0, r11	; 0x8003f0 <oldtimer+0x1>
     8e8:	a0 92 ef 03 	sts	0x03EF, r10	; 0x8003ef <oldtimer>
	float oldEncfloat = encfloat;			// Save previous time
     8ec:	40 90 f9 03 	lds	r4, 0x03F9	; 0x8003f9 <encfloat>
     8f0:	50 90 fa 03 	lds	r5, 0x03FA	; 0x8003fa <encfloat+0x1>
     8f4:	60 90 fb 03 	lds	r6, 0x03FB	; 0x8003fb <encfloat+0x2>
     8f8:	70 90 fc 03 	lds	r7, 0x03FC	; 0x8003fc <encfloat+0x3>
	timer = TCNT3;
     8fc:	00 91 94 00 	lds	r16, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     900:	10 91 95 00 	lds	r17, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     904:	10 93 ee 03 	sts	0x03EE, r17	; 0x8003ee <timer+0x1>
     908:	00 93 ed 03 	sts	0x03ED, r16	; 0x8003ed <timer>
	}
	else {
		deltaClock = (timer - oldtimer) * ENCODER_TICK_PER_S;
	}

	encval = ReadSSI();												// Get encoder position
     90c:	a7 df       	rcall	.-178    	; 0x85c <ReadSSI>
     90e:	60 93 f5 03 	sts	0x03F5, r22	; 0x8003f5 <encval>
     912:	70 93 f6 03 	sts	0x03F6, r23	; 0x8003f6 <encval+0x1>
     916:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <encval+0x2>
     91a:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <encval+0x3>
	encfloat = ((float)encval * 8 * M_PI)/ (IMU_MAX_ENCVAL + 1);    // Counts to radians
#ifndef _CALIBRATION
	encfloat -= ENCODER_MID_POINT;									// Centers the encoder value so that straight up is 0
	encfloat = -encfloat;											// Inverts value in order to match model
     91e:	e8 d6       	rcall	.+3536   	; 0x16f0 <__floatunsisf>
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	51 e4       	ldi	r21, 0x41	; 65
     928:	99 d7       	rcall	.+3890   	; 0x185c <__mulsf3>
     92a:	2b ed       	ldi	r18, 0xDB	; 219
     92c:	3f e0       	ldi	r19, 0x0F	; 15
     92e:	49 e4       	ldi	r20, 0x49	; 73
     930:	50 e4       	ldi	r21, 0x40	; 64
     932:	94 d7       	rcall	.+3880   	; 0x185c <__mulsf3>
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	56 e3       	ldi	r21, 0x36	; 54
     93c:	8f d7       	rcall	.+3870   	; 0x185c <__mulsf3>
     93e:	2b e7       	ldi	r18, 0x7B	; 123
     940:	33 e8       	ldi	r19, 0x83	; 131
     942:	4d ef       	ldi	r20, 0xFD	; 253
     944:	50 e4       	ldi	r21, 0x40	; 64
     946:	d2 d5       	rcall	.+2980   	; 0x14ec <__subsf3>
     948:	6b 01       	movw	r12, r22
     94a:	7c 01       	movw	r14, r24
     94c:	f7 fa       	bst	r15, 7
     94e:	f0 94       	com	r15
     950:	f7 f8       	bld	r15, 7
     952:	f0 94       	com	r15
     954:	c0 92 f9 03 	sts	0x03F9, r12	; 0x8003f9 <encfloat>
     958:	d0 92 fa 03 	sts	0x03FA, r13	; 0x8003fa <encfloat+0x1>
     95c:	e0 92 fb 03 	sts	0x03FB, r14	; 0x8003fb <encfloat+0x2>
     960:	f0 92 fc 03 	sts	0x03FC, r15	; 0x8003fc <encfloat+0x3>
     964:	a3 01       	movw	r20, r6
	char buffer[32];
	USART_Transmit_String("encfloat: ");
	dtostrf(encfloat, 4, 4, buffer);
	USART_Transmit_Line(buffer);
#endif
	prec_velocity = (encfloat - oldEncfloat) / deltaClock;			// Calculate the velocity
     966:	92 01       	movw	r18, r4
     968:	c7 01       	movw	r24, r14
     96a:	b6 01       	movw	r22, r12
     96c:	bf d5       	rcall	.+2942   	; 0x14ec <__subsf3>
     96e:	2b 01       	movw	r4, r22
     970:	3c 01       	movw	r6, r24
     972:	b8 01       	movw	r22, r16
     974:	6a 19       	sub	r22, r10
     976:	7b 09       	sbc	r23, r11
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	b9 d6       	rcall	.+3442   	; 0x16f0 <__floatunsisf>
     97e:	2d eb       	ldi	r18, 0xBD	; 189
     980:	37 e3       	ldi	r19, 0x37	; 55
     982:	46 e0       	ldi	r20, 0x06	; 6
     984:	55 e3       	ldi	r21, 0x35	; 53
     986:	6a d7       	rcall	.+3796   	; 0x185c <__mulsf3>
     988:	9b 01       	movw	r18, r22
     98a:	ac 01       	movw	r20, r24
     98c:	c3 01       	movw	r24, r6
     98e:	b2 01       	movw	r22, r4
     990:	16 d6       	rcall	.+3116   	; 0x15be <__divsf3>
     992:	60 93 e9 03 	sts	0x03E9, r22	; 0x8003e9 <prec_velocity>
     996:	70 93 ea 03 	sts	0x03EA, r23	; 0x8003ea <prec_velocity+0x1>
     99a:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <prec_velocity+0x2>
     99e:	90 93 ec 03 	sts	0x03EC, r25	; 0x8003ec <prec_velocity+0x3>
     9a2:	9e 01       	movw	r18, r28
	angleBuffer[buffCount] = encfloat;								// Encoder angle data into buffer
     9a4:	22 0f       	add	r18, r18
     9a6:	33 1f       	adc	r19, r19
     9a8:	22 0f       	add	r18, r18
     9aa:	33 1f       	adc	r19, r19
     9ac:	f9 01       	movw	r30, r18
     9ae:	e1 50       	subi	r30, 0x01	; 1
     9b0:	fa 4f       	sbci	r31, 0xFA	; 250
     9b2:	c0 82       	st	Z, r12
     9b4:	d1 82       	std	Z+1, r13	; 0x01
     9b6:	e2 82       	std	Z+2, r14	; 0x02
     9b8:	f3 82       	std	Z+3, r15	; 0x03
     9ba:	f9 01       	movw	r30, r18
	velocityBuffer[buffCount] = prec_velocity;
     9bc:	e1 57       	subi	r30, 0x71	; 113
     9be:	f8 4f       	sbci	r31, 0xF8	; 248
     9c0:	60 83       	st	Z, r22
     9c2:	71 83       	std	Z+1, r23	; 0x01
     9c4:	82 83       	std	Z+2, r24	; 0x02
     9c6:	93 83       	std	Z+3, r25	; 0x03

	return encfloat >= ENCODER_MIN_ANGLE && encfloat <= ENCODER_MAX_ANGLE;
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	40 e4       	ldi	r20, 0x40	; 64
     9ce:	5f eb       	ldi	r21, 0xBF	; 191
     9d0:	c7 01       	movw	r24, r14
     9d2:	b6 01       	movw	r22, r12
     9d4:	3f d7       	rcall	.+3710   	; 0x1854 <__gesf2>
     9d6:	88 23       	and	r24, r24
     9d8:	6c f0       	brlt	.+26     	; 0x9f4 <EncoderRead+0x136>
     9da:	c1 e0       	ldi	r28, 0x01	; 1
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	40 e4       	ldi	r20, 0x40	; 64
     9e2:	5f e3       	ldi	r21, 0x3F	; 63
     9e4:	c7 01       	movw	r24, r14
     9e6:	b6 01       	movw	r22, r12
     9e8:	e6 d5       	rcall	.+3020   	; 0x15b6 <__cmpsf2>
     9ea:	18 16       	cp	r1, r24
     9ec:	0c f4       	brge	.+2      	; 0x9f0 <EncoderRead+0x132>
     9ee:	c0 e0       	ldi	r28, 0x00	; 0
     9f0:	8c 2f       	mov	r24, r28
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <EncoderRead+0x138>
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	df 91       	pop	r29
}
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	df 90       	pop	r13
     a04:	cf 90       	pop	r12
     a06:	bf 90       	pop	r11
     a08:	af 90       	pop	r10
     a0a:	7f 90       	pop	r7
     a0c:	6f 90       	pop	r6
     a0e:	5f 90       	pop	r5
     a10:	4f 90       	pop	r4
     a12:	08 95       	ret

00000a14 <precessToZero>:
     a14:	4f 92       	push	r4
/*********************************************************************
*							precessToZero
*********************************************************************/

void precessToZero()
{
     a16:	5f 92       	push	r5
     a18:	6f 92       	push	r6
     a1a:	7f 92       	push	r7
     a1c:	8f 92       	push	r8
     a1e:	9f 92       	push	r9
     a20:	af 92       	push	r10
     a22:	bf 92       	push	r11
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	a0 97       	sbiw	r28, 0x20	; 32
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
	//return;
	int buffCount = 0;
	double tickToSec = 1.0 / (F_CPU / 64.0);
	uint32_t totalTime = 0;
	uint16_t lastTime = TCNT3;
     a44:	c0 90 94 00 	lds	r12, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     a48:	d0 90 95 00 	lds	r13, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
void precessToZero()
{
	//return;
	int buffCount = 0;
	double tickToSec = 1.0 / (F_CPU / 64.0);
	uint32_t totalTime = 0;
     a4c:	81 2c       	mov	r8, r1
     a4e:	91 2c       	mov	r9, r1
     a50:	54 01       	movw	r10, r8
*********************************************************************/

void precessToZero()
{
	//return;
	int buffCount = 0;
     a52:	00 e0       	ldi	r16, 0x00	; 0
     a54:	10 e0       	ldi	r17, 0x00	; 0

		float control = fabs(encfloat);
		unsigned char torquePWM = min(TEST_MAX_SPEED * control, PREC_TO_ZERO_MAX_PWM);


		totalTime += (uint16_t)(TCNT3 - lastTime);
     a56:	0f 2e       	mov	r0, r31
     a58:	f4 e9       	ldi	r31, 0x94	; 148
     a5a:	ef 2e       	mov	r14, r31
     a5c:	f1 2c       	mov	r15, r1
     a5e:	f0 2d       	mov	r31, r0
	{
		if (iter >= 500) {
			break;
		}

		while (flag == 0);
     a60:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <flag>
     a64:	88 23       	and	r24, r24
     a66:	e1 f3       	breq	.-8      	; 0xa60 <precessToZero+0x4c>
		
		if (!IMURead_eulerAngle(buffCount)) {
     a68:	c8 01       	movw	r24, r16
     a6a:	c8 dd       	rcall	.-1136   	; 0x5fc <IMURead_eulerAngle>
     a6c:	88 23       	and	r24, r24
     a6e:	09 f4       	brne	.+2      	; 0xa72 <precessToZero+0x5e>
     a70:	4b c0       	rjmp	.+150    	; 0xb08 <precessToZero+0xf4>
			break;
		}
		if (!IMURead_eulerVelocities(buffCount)) {
     a72:	c8 01       	movw	r24, r16
     a74:	62 de       	rcall	.-828    	; 0x73a <IMURead_eulerVelocities>
     a76:	88 23       	and	r24, r24
     a78:	09 f4       	brne	.+2      	; 0xa7c <precessToZero+0x68>
     a7a:	46 c0       	rjmp	.+140    	; 0xb08 <precessToZero+0xf4>
			break;
		}

		EncoderRead(buffCount);
     a7c:	c8 01       	movw	r24, r16
     a7e:	1f df       	rcall	.-450    	; 0x8be <EncoderRead>
     a80:	20 e0       	ldi	r18, 0x00	; 0

		if (encfloat < 0.0f) PORTE &= ~_BV(PORTE3);
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	a9 01       	movw	r20, r18
     a86:	60 91 f9 03 	lds	r22, 0x03F9	; 0x8003f9 <encfloat>
     a8a:	70 91 fa 03 	lds	r23, 0x03FA	; 0x8003fa <encfloat+0x1>
     a8e:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <encfloat+0x2>
     a92:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <encfloat+0x3>
     a96:	8f d5       	rcall	.+2846   	; 0x15b6 <__cmpsf2>
     a98:	88 23       	and	r24, r24
     a9a:	14 f4       	brge	.+4      	; 0xaa0 <precessToZero+0x8c>
     a9c:	73 98       	cbi	0x0e, 3	; 14
     a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <precessToZero+0x8e>
     aa0:	73 9a       	sbi	0x0e, 3	; 14
		else PORTE |= _BV(PORTE3);
     aa2:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <encfloat>

		float control = fabs(encfloat);
		unsigned char torquePWM = min(TEST_MAX_SPEED * control, PREC_TO_ZERO_MAX_PWM);
     aa6:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <encfloat+0x1>
     aaa:	a0 91 fb 03 	lds	r26, 0x03FB	; 0x8003fb <encfloat+0x2>
     aae:	b0 91 fc 03 	lds	r27, 0x03FC	; 0x8003fc <encfloat+0x3>
     ab2:	bc 01       	movw	r22, r24
     ab4:	cd 01       	movw	r24, r26
     ab6:	9f 77       	andi	r25, 0x7F	; 127
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	4f e7       	ldi	r20, 0x7F	; 127
     abe:	53 e4       	ldi	r21, 0x43	; 67
     ac0:	cd d6       	rcall	.+3482   	; 0x185c <__mulsf3>
     ac2:	2b 01       	movw	r4, r22
     ac4:	3c 01       	movw	r6, r24
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	4c e8       	ldi	r20, 0x8C	; 140
     acc:	52 e4       	ldi	r21, 0x42	; 66
     ace:	73 d5       	rcall	.+2790   	; 0x15b6 <__cmpsf2>
     ad0:	88 23       	and	r24, r24
     ad2:	24 f4       	brge	.+8      	; 0xadc <precessToZero+0xc8>
     ad4:	c3 01       	movw	r24, r6
     ad6:	b2 01       	movw	r22, r4
     ad8:	df d5       	rcall	.+3006   	; 0x1698 <__fixunssfsi>
     ada:	01 c0       	rjmp	.+2      	; 0xade <precessToZero+0xca>
     adc:	66 e4       	ldi	r22, 0x46	; 70
     ade:	f7 01       	movw	r30, r14


		totalTime += (uint16_t)(TCNT3 - lastTime);
     ae0:	80 81       	ld	r24, Z
     ae2:	91 81       	ldd	r25, Z+1	; 0x01
     ae4:	8c 19       	sub	r24, r12
     ae6:	9d 09       	sbc	r25, r13
     ae8:	88 0e       	add	r8, r24
     aea:	99 1e       	adc	r9, r25
     aec:	a1 1c       	adc	r10, r1
     aee:	b1 1c       	adc	r11, r1
     af0:	c0 80       	ld	r12, Z
		lastTime = TCNT3;
     af2:	d1 80       	ldd	r13, Z+1	; 0x01
     af4:	68 bd       	out	0x28, r22	; 40
		OCR0B = torquePWM;
     af6:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <flag>
		flag = 0;
     afa:	0f 5f       	subi	r16, 0xFF	; 255
		iter++;
		buffCount++;
     afc:	1f 4f       	sbci	r17, 0xFF	; 255
     afe:	04 3f       	cpi	r16, 0xF4	; 244

	int iter = 0;
	// Start up sequence
	while (1)
	{
		if (iter >= 500) {
     b00:	f1 e0       	ldi	r31, 0x01	; 1
     b02:	1f 07       	cpc	r17, r31
     b04:	09 f0       	breq	.+2      	; 0xb08 <precessToZero+0xf4>
     b06:	ac cf       	rjmp	.-168    	; 0xa60 <precessToZero+0x4c>
		iter++;
		buffCount++;
	}
	
	char buffer[32];
	USART_Transmit_String("Time spent in precessToZero: ");
     b08:	8e eb       	ldi	r24, 0xBE	; 190
     b0a:	92 e0       	ldi	r25, 0x02	; 2
     b0c:	d6 d4       	rcall	.+2476   	; 0x14ba <USART_Transmit_String>
     b0e:	bf 92       	push	r11
	sprintf(buffer, "%lu", totalTime);
     b10:	af 92       	push	r10
     b12:	9f 92       	push	r9
     b14:	8f 92       	push	r8
     b16:	8c ed       	ldi	r24, 0xDC	; 220
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	9f 93       	push	r25
     b1c:	8f 93       	push	r24
     b1e:	ce 01       	movw	r24, r28
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	7c 01       	movw	r14, r24
     b24:	9f 93       	push	r25
     b26:	8f 93       	push	r24
	USART_Transmit_String(buffer);
     b28:	45 d7       	rcall	.+3722   	; 0x19b4 <sprintf>
     b2a:	c7 01       	movw	r24, r14
     b2c:	c6 d4       	rcall	.+2444   	; 0x14ba <USART_Transmit_String>
	USART_Transmit_String(" ticks, ");
     b2e:	80 ee       	ldi	r24, 0xE0	; 224
     b30:	92 e0       	ldi	r25, 0x02	; 2
     b32:	c3 d4       	rcall	.+2438   	; 0x14ba <USART_Transmit_String>
	dtostrf(totalTime * tickToSec, 4, 2, buffer);
     b34:	c5 01       	movw	r24, r10
     b36:	b4 01       	movw	r22, r8
     b38:	db d5       	rcall	.+2998   	; 0x16f0 <__floatunsisf>
     b3a:	2d eb       	ldi	r18, 0xBD	; 189
     b3c:	37 e3       	ldi	r19, 0x37	; 55
     b3e:	46 e8       	ldi	r20, 0x86	; 134
     b40:	56 e3       	ldi	r21, 0x36	; 54
     b42:	8c d6       	rcall	.+3352   	; 0x185c <__mulsf3>
     b44:	87 01       	movw	r16, r14
     b46:	22 e0       	ldi	r18, 0x02	; 2
     b48:	44 e0       	ldi	r20, 0x04	; 4
     b4a:	15 d7       	rcall	.+3626   	; 0x1976 <dtostrf>
	USART_Transmit_String(buffer);
     b4c:	c7 01       	movw	r24, r14
     b4e:	b5 d4       	rcall	.+2410   	; 0x14ba <USART_Transmit_String>
     b50:	89 ee       	ldi	r24, 0xE9	; 233
	USART_Transmit_Line(" seconds.");
     b52:	92 e0       	ldi	r25, 0x02	; 2
     b54:	be d4       	rcall	.+2428   	; 0x14d2 <USART_Transmit_Line>
     b56:	18 bc       	out	0x28, r1	; 40
     b58:	0f b6       	in	r0, 0x3f	; 63
	OCR0B = 0;
     b5a:	f8 94       	cli
}
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	a0 96       	adiw	r28, 0x20	; 32
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	de bf       	out	0x3e, r29	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	ff 90       	pop	r15
     b78:	ef 90       	pop	r14
     b7a:	df 90       	pop	r13
     b7c:	cf 90       	pop	r12
     b7e:	bf 90       	pop	r11
     b80:	af 90       	pop	r10
     b82:	9f 90       	pop	r9
     b84:	8f 90       	pop	r8
     b86:	7f 90       	pop	r7
     b88:	6f 90       	pop	r6
     b8a:	5f 90       	pop	r5
     b8c:	4f 90       	pop	r4
     b8e:	08 95       	ret

00000b90 <resetDataToRaspberry>:
     b90:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <counter>
*						resetDataToRaspberry
*********************************************************************/

void resetDataToRaspberry(){

	counter=0;															//Auxiliary counter for timer
     b94:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <counter+0x1>
     b98:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <counter+0x2>
     b9c:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <counter+0x3>
	memset(timerBuffer, 0, sizeof(*timerBuffer) * BUFFER_SIZE);			//Time of data into buffer
     ba0:	80 e9       	ldi	r24, 0x90	; 144
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	ef e1       	ldi	r30, 0x1F	; 31
     ba6:	f9 e0       	ldi	r31, 0x09	; 9
     ba8:	df 01       	movw	r26, r30
     baa:	9c 01       	movw	r18, r24
     bac:	1d 92       	st	X+, r1
     bae:	21 50       	subi	r18, 0x01	; 1
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <resetDataToRaspberry+0x1c>
	memset(IMUX_angle, 0, sizeof(*IMUX_angle) * BUFFER_SIZE);			//IMU X angle data into buffer
     bb4:	ef e3       	ldi	r30, 0x3F	; 63
     bb6:	fc e0       	ldi	r31, 0x0C	; 12
     bb8:	df 01       	movw	r26, r30
     bba:	9c 01       	movw	r18, r24
     bbc:	1d 92       	st	X+, r1
     bbe:	21 50       	subi	r18, 0x01	; 1
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	e1 f7       	brne	.-8      	; 0xbbc <resetDataToRaspberry+0x2c>
	memset(IMUX_velocity, 0, sizeof(*IMUX_velocity) * BUFFER_SIZE);		//IMU X velocity data into buffer
     bc4:	ef ea       	ldi	r30, 0xAF	; 175
     bc6:	fa e0       	ldi	r31, 0x0A	; 10
     bc8:	df 01       	movw	r26, r30
     bca:	9c 01       	movw	r18, r24
     bcc:	1d 92       	st	X+, r1
     bce:	21 50       	subi	r18, 0x01	; 1
     bd0:	30 40       	sbci	r19, 0x00	; 0
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <resetDataToRaspberry+0x3c>
	memset(angleBuffer, 0, sizeof(*angleBuffer) * BUFFER_SIZE);		//Encoder angle data into buffer
     bd4:	ef ef       	ldi	r30, 0xFF	; 255
     bd6:	f5 e0       	ldi	r31, 0x05	; 5
     bd8:	df 01       	movw	r26, r30
     bda:	9c 01       	movw	r18, r24
     bdc:	1d 92       	st	X+, r1
     bde:	21 50       	subi	r18, 0x01	; 1
     be0:	30 40       	sbci	r19, 0x00	; 0
     be2:	e1 f7       	brne	.-8      	; 0xbdc <resetDataToRaspberry+0x4c>
	memset(velocityBuffer, 0, sizeof(*velocityBuffer) * BUFFER_SIZE);	//Encoder velocity data into buffer
     be4:	ef e8       	ldi	r30, 0x8F	; 143
     be6:	f7 e0       	ldi	r31, 0x07	; 7
     be8:	df 01       	movw	r26, r30
     bea:	9c 01       	movw	r18, r24
     bec:	1d 92       	st	X+, r1
     bee:	21 50       	subi	r18, 0x01	; 1
     bf0:	30 40       	sbci	r19, 0x00	; 0
     bf2:	e1 f7       	brne	.-8      	; 0xbec <resetDataToRaspberry+0x5c>
	memset(controlBuffer, 0, sizeof(*controlBuffer) * BUFFER_SIZE);			//Control input u, into buffer
     bf4:	ef e6       	ldi	r30, 0x6F	; 111
     bf6:	f4 e0       	ldi	r31, 0x04	; 4
     bf8:	df 01       	movw	r26, r30
     bfa:	9c 01       	movw	r18, r24
     bfc:	1d 92       	st	X+, r1
     bfe:	21 50       	subi	r18, 0x01	; 1
     c00:	30 40       	sbci	r19, 0x00	; 0
     c02:	e1 f7       	brne	.-8      	; 0xbfc <resetDataToRaspberry+0x6c>
     c04:	08 95       	ret

00000c06 <logDataToRaspberry>:
/*********************************************************************
*						logDataToRaspberry
*********************************************************************/

void logDataToRaspberry(){
	USART_Transmit_Line("\ntimerBuffer:");
     c06:	83 ef       	ldi	r24, 0xF3	; 243
     c08:	92 e0       	ldi	r25, 0x02	; 2
     c0a:	63 d4       	rcall	.+2246   	; 0x14d2 <USART_Transmit_Line>
	USART_Transmit((uint8_t*)timerBuffer, sizeof(*timerBuffer) * BUFFER_SIZE);
     c0c:	40 e9       	ldi	r20, 0x90	; 144
     c0e:	51 e0       	ldi	r21, 0x01	; 1
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	8f e1       	ldi	r24, 0x1F	; 31
     c16:	99 e0       	ldi	r25, 0x09	; 9
     c18:	3b d4       	rcall	.+2166   	; 0x1490 <USART_Transmit>
	USART_Transmit_Line("\nIMUX_angle:");
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	93 e0       	ldi	r25, 0x03	; 3
     c1e:	59 d4       	rcall	.+2226   	; 0x14d2 <USART_Transmit_Line>
	USART_Transmit((uint8_t*)IMUX_angle, sizeof(*IMUX_angle) * BUFFER_SIZE);
     c20:	40 e9       	ldi	r20, 0x90	; 144
     c22:	51 e0       	ldi	r21, 0x01	; 1
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	8f e3       	ldi	r24, 0x3F	; 63
     c2a:	9c e0       	ldi	r25, 0x0C	; 12
	USART_Transmit_Line("\nIMUX_velocity:");
     c2c:	31 d4       	rcall	.+2146   	; 0x1490 <USART_Transmit>
     c2e:	8e e0       	ldi	r24, 0x0E	; 14
     c30:	93 e0       	ldi	r25, 0x03	; 3
     c32:	4f d4       	rcall	.+2206   	; 0x14d2 <USART_Transmit_Line>
	USART_Transmit((uint8_t*)IMUX_velocity, sizeof(*IMUX_velocity) * BUFFER_SIZE);
     c34:	40 e9       	ldi	r20, 0x90	; 144
     c36:	51 e0       	ldi	r21, 0x01	; 1
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	8f ea       	ldi	r24, 0xAF	; 175
     c3e:	9a e0       	ldi	r25, 0x0A	; 10
	USART_Transmit_Line("\nangleBuffer:");
     c40:	27 d4       	rcall	.+2126   	; 0x1490 <USART_Transmit>
     c42:	8e e1       	ldi	r24, 0x1E	; 30
     c44:	93 e0       	ldi	r25, 0x03	; 3
	USART_Transmit((uint8_t*)angleBuffer, sizeof(*angleBuffer) * BUFFER_SIZE);
     c46:	45 d4       	rcall	.+2186   	; 0x14d2 <USART_Transmit_Line>
     c48:	40 e9       	ldi	r20, 0x90	; 144
     c4a:	51 e0       	ldi	r21, 0x01	; 1
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	95 e0       	ldi	r25, 0x05	; 5
	USART_Transmit_Line("\nvelocityBuffer:");
     c54:	1d d4       	rcall	.+2106   	; 0x1490 <USART_Transmit>
     c56:	8c e2       	ldi	r24, 0x2C	; 44
     c58:	93 e0       	ldi	r25, 0x03	; 3
	USART_Transmit((uint8_t*)velocityBuffer, sizeof(*velocityBuffer) * BUFFER_SIZE);
     c5a:	3b d4       	rcall	.+2166   	; 0x14d2 <USART_Transmit_Line>
     c5c:	40 e9       	ldi	r20, 0x90	; 144
     c5e:	51 e0       	ldi	r21, 0x01	; 1
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	8f e8       	ldi	r24, 0x8F	; 143
     c66:	97 e0       	ldi	r25, 0x07	; 7
	USART_Transmit_Line("\ncontrolBuffer:");
     c68:	13 d4       	rcall	.+2086   	; 0x1490 <USART_Transmit>
     c6a:	8d e3       	ldi	r24, 0x3D	; 61
     c6c:	93 e0       	ldi	r25, 0x03	; 3
     c6e:	31 d4       	rcall	.+2146   	; 0x14d2 <USART_Transmit_Line>
	USART_Transmit((uint8_t*)controlBuffer, sizeof(*controlBuffer) * BUFFER_SIZE);
     c70:	40 e9       	ldi	r20, 0x90	; 144
     c72:	51 e0       	ldi	r21, 0x01	; 1
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	8f e6       	ldi	r24, 0x6F	; 111
     c7a:	94 e0       	ldi	r25, 0x04	; 4
     c7c:	09 c4       	rjmp	.+2066   	; 0x1490 <USART_Transmit>
     c7e:	08 95       	ret

00000c80 <shutDown>:
     c80:	8f 92       	push	r8
/*********************************************************************
*							shutDown
*********************************************************************/

void shutDown()
{
     c82:	9f 92       	push	r9
     c84:	af 92       	push	r10
     c86:	bf 92       	push	r11
     c88:	cf 92       	push	r12
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
	USART_Transmit_Line("Shutting down");
     c98:	8d e4       	ldi	r24, 0x4D	; 77
     c9a:	93 e0       	ldi	r25, 0x03	; 3
     c9c:	1a d4       	rcall	.+2100   	; 0x14d2 <USART_Transmit_Line>

	char isPositive = prec_velocity > 0.0f;
     c9e:	99 24       	eor	r9, r9
     ca0:	93 94       	inc	r9
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	a9 01       	movw	r20, r18
     ca8:	60 91 e9 03 	lds	r22, 0x03E9	; 0x8003e9 <prec_velocity>
     cac:	70 91 ea 03 	lds	r23, 0x03EA	; 0x8003ea <prec_velocity+0x1>
     cb0:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <prec_velocity+0x2>
     cb4:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <prec_velocity+0x3>
     cb8:	cd d5       	rcall	.+2970   	; 0x1854 <__gesf2>
     cba:	18 16       	cp	r1, r24
     cbc:	0c f0       	brlt	.+2      	; 0xcc0 <shutDown+0x40>
     cbe:	91 2c       	mov	r9, r1
	
	// Set torque direction
	if (encfloat < 0.0f) PORTE &= ~_BV(PORTE3);
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	a9 01       	movw	r20, r18
     cc6:	60 91 f9 03 	lds	r22, 0x03F9	; 0x8003f9 <encfloat>
     cca:	70 91 fa 03 	lds	r23, 0x03FA	; 0x8003fa <encfloat+0x1>
     cce:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <encfloat+0x2>
     cd2:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <encfloat+0x3>
     cd6:	6f d4       	rcall	.+2270   	; 0x15b6 <__cmpsf2>
     cd8:	88 23       	and	r24, r24
     cda:	14 f4       	brge	.+4      	; 0xce0 <shutDown+0x60>
     cdc:	73 98       	cbi	0x0e, 3	; 14
     cde:	01 c0       	rjmp	.+2      	; 0xce2 <shutDown+0x62>
	else PORTE |= _BV(PORTE3);
     ce0:	73 9a       	sbi	0x0e, 3	; 14
	OCR0B = 90;
     ce2:	8a e5       	ldi	r24, 0x5A	; 90
     ce4:	88 bd       	out	0x28, r24	; 40

	float lastPrecVel = 10.0f;
     ce6:	b1 2c       	mov	r11, r1
     ce8:	c1 2c       	mov	r12, r1
     cea:	68 94       	set
     cec:	dd 24       	eor	r13, r13
     cee:	d5 f8       	bld	r13, 5
     cf0:	0f 2e       	mov	r0, r31
     cf2:	f1 e4       	ldi	r31, 0x41	; 65
     cf4:	ef 2e       	mov	r14, r31
     cf6:	f0 2d       	mov	r31, r0
	while (1)
	{
		while (flag == 0);

		char posi = prec_velocity > 0.0f;
		if (posi != isPositive || (lastPrecVel < 0.01f && prec_velocity < 0.01f)) {
     cf8:	88 24       	eor	r8, r8
     cfa:	83 94       	inc	r8
     cfc:	a1 2c       	mov	r10, r1
	float lastPrecVel = 10.0f;

	// Start up sequence
	while (1)
	{
		while (flag == 0);
     cfe:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <flag>
     d02:	88 23       	and	r24, r24
     d04:	e1 f3       	breq	.-8      	; 0xcfe <shutDown+0x7e>

		char posi = prec_velocity > 0.0f;
     d06:	00 91 e9 03 	lds	r16, 0x03E9	; 0x8003e9 <prec_velocity>
     d0a:	10 91 ea 03 	lds	r17, 0x03EA	; 0x8003ea <prec_velocity+0x1>
     d0e:	d0 91 eb 03 	lds	r29, 0x03EB	; 0x8003eb <prec_velocity+0x2>
     d12:	c0 91 ec 03 	lds	r28, 0x03EC	; 0x8003ec <prec_velocity+0x3>
		if (posi != isPositive || (lastPrecVel < 0.01f && prec_velocity < 0.01f)) {
     d16:	f8 2c       	mov	r15, r8
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	a9 01       	movw	r20, r18
     d1e:	60 2f       	mov	r22, r16
     d20:	71 2f       	mov	r23, r17
     d22:	8d 2f       	mov	r24, r29
     d24:	9c 2f       	mov	r25, r28
     d26:	96 d5       	rcall	.+2860   	; 0x1854 <__gesf2>
     d28:	18 16       	cp	r1, r24
     d2a:	0c f0       	brlt	.+2      	; 0xd2e <shutDown+0xae>
     d2c:	fa 2c       	mov	r15, r10
     d2e:	9f 10       	cpse	r9, r15
     d30:	20 c0       	rjmp	.+64     	; 0xd72 <shutDown+0xf2>
     d32:	2a e0       	ldi	r18, 0x0A	; 10
     d34:	37 ed       	ldi	r19, 0xD7	; 215
     d36:	43 e2       	ldi	r20, 0x23	; 35
     d38:	5c e3       	ldi	r21, 0x3C	; 60
     d3a:	6b 2d       	mov	r22, r11
     d3c:	7c 2d       	mov	r23, r12
     d3e:	8d 2d       	mov	r24, r13
     d40:	9e 2d       	mov	r25, r14
     d42:	39 d4       	rcall	.+2162   	; 0x15b6 <__cmpsf2>
     d44:	88 23       	and	r24, r24
     d46:	5c f4       	brge	.+22     	; 0xd5e <shutDown+0xde>
     d48:	2a e0       	ldi	r18, 0x0A	; 10
     d4a:	37 ed       	ldi	r19, 0xD7	; 215
     d4c:	43 e2       	ldi	r20, 0x23	; 35
     d4e:	5c e3       	ldi	r21, 0x3C	; 60
     d50:	60 2f       	mov	r22, r16
     d52:	71 2f       	mov	r23, r17
     d54:	8d 2f       	mov	r24, r29
     d56:	9c 2f       	mov	r25, r28
     d58:	2e d4       	rcall	.+2140   	; 0x15b6 <__cmpsf2>
     d5a:	88 23       	and	r24, r24
			break;
		}
		
		lastPrecVel = prec_velocity;
		EncoderRead(0);
     d5c:	54 f0       	brlt	.+20     	; 0xd72 <shutDown+0xf2>
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	ad dd       	rcall	.-1190   	; 0x8be <EncoderRead>
		flag = 0;
     d64:	a0 92 d0 03 	sts	0x03D0, r10	; 0x8003d0 <flag>
		char posi = prec_velocity > 0.0f;
		if (posi != isPositive || (lastPrecVel < 0.01f && prec_velocity < 0.01f)) {
			break;
		}
		
		lastPrecVel = prec_velocity;
     d68:	b0 2e       	mov	r11, r16
     d6a:	c1 2e       	mov	r12, r17
		EncoderRead(0);
		flag = 0;
	}
     d6c:	dd 2e       	mov	r13, r29

	USART_Transmit_Line("Breaking done");
     d6e:	ec 2e       	mov	r14, r28
     d70:	c6 cf       	rjmp	.-116    	; 0xcfe <shutDown+0x7e>
     d72:	8b e5       	ldi	r24, 0x5B	; 91

#ifndef _CALIBRATION
	precessToZero();
     d74:	93 e0       	ldi	r25, 0x03	; 3
#endif

	//Shut down precession motor enabler
	PORTH &= ~_BV(PORTH6); //digitalWrite(9, LOW);  //Enable OFF
     d76:	ad d3       	rcall	.+1882   	; 0x14d2 <USART_Transmit_Line>
     d78:	4d de       	rcall	.-870    	; 0xa14 <precessToZero>
     d7a:	e2 e0       	ldi	r30, 0x02	; 2

	//Shut down velocity motor enabler
	//Enable OFF

	//Store whatever data is now stored in buffer
	logDataToRaspberry();
     d7c:	f1 e0       	ldi	r31, 0x01	; 1
     d7e:	80 81       	ld	r24, Z

	//Software Reset IMU
	i2c_beginTransmission(IMU_ID);
     d80:	8f 7b       	andi	r24, 0xBF	; 191
     d82:	80 83       	st	Z, r24
     d84:	40 df       	rcall	.-384    	; 0xc06 <logDataToRaspberry>
	i2c_write_byte(0xE2);
     d86:	87 e7       	ldi	r24, 0x77	; 119
     d88:	20 db       	rcall	.-2496   	; 0x3ca <i2c_beginTransmission>
     d8a:	82 ee       	ldi	r24, 0xE2	; 226
	i2c_endTransmission(1);
     d8c:	3a db       	rcall	.-2444   	; 0x402 <i2c_write_byte>
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	26 db       	rcall	.-2484   	; 0x3de <i2c_endTransmission>
	//Close Serial communication
	//Serial.close();
	//Serial2.close();

	//Disable interrupts
	cli();
     d92:	f8 94       	cli
}
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	df 90       	pop	r13
     da2:	cf 90       	pop	r12
     da4:	bf 90       	pop	r11
     da6:	af 90       	pop	r10
     da8:	9f 90       	pop	r9
     daa:	8f 90       	pop	r8
     dac:	08 95       	ret

00000dae <main>:
	flag = 1;               // flag = 1: executes control function
	counter++;
}

int main(void)
{
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	a0 97       	sbiw	r28, 0x20	; 32
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
	resetDataToRaspberry();
     dca:	e2 de       	rcall	.-572    	; 0xb90 <resetDataToRaspberry>

	// Starts USART (serial) communication to the raspberry pi
	USART_Init(BAUD);
     dcc:	60 e9       	ldi	r22, 0x90	; 144
     dce:	70 ed       	ldi	r23, 0xD0	; 208
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	90 e0       	ldi	r25, 0x00	; 0
	// Initialize communication with the IMU
	i2c_begin();
     dd4:	41 d3       	rcall	.+1666   	; 0x1458 <USART_Init>
     dd6:	ed da       	rcall	.-2598   	; 0x3b2 <i2c_begin>
	i2c_setClock(IMU_CLOCK);
     dd8:	60 ee       	ldi	r22, 0xE0	; 224
     dda:	73 e9       	ldi	r23, 0x93	; 147
     ddc:	84 e0       	ldi	r24, 0x04	; 4
	// Setup PWM for the precession motor
	InitPrecessionMotor();
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	f2 da       	rcall	.-2588   	; 0x3c6 <i2c_setClock>
	// Initialize timer interrupts
	InitClocks();
     de2:	b7 db       	rcall	.-2194   	; 0x552 <InitPrecessionMotor>
     de4:	d3 db       	rcall	.-2138   	; 0x58c <InitClocks>
	// Initialize communication with the encoder
	InitSSI();
     de6:	59 dd       	rcall	.-1358   	; 0x89a <InitSSI>
     de8:	78 94       	sei

	// Activate interrupts
	sei();
     dea:	25 e6       	ldi	r18, 0x65	; 101
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <flag>

	int iter = 0;
	while (1)
	{
		while (flag == 0);
     df2:	88 23       	and	r24, r24
     df4:	e1 f3       	breq	.-8      	; 0xdee <main+0x40>
     df6:	21 50       	subi	r18, 0x01	; 1
     df8:	31 09       	sbc	r19, r1
		if (iter >= 100) {
			break;
		}
		iter++;
		flag = 0;
     dfa:	19 f0       	breq	.+6      	; 0xe02 <main+0x54>
     dfc:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <flag>
	}
	
	//while (flag == 0);
	
	//Initialize the IMU
	if (!IMU_init())
     e00:	f6 cf       	rjmp	.-20     	; 0xdee <main+0x40>
     e02:	eb db       	rcall	.-2090   	; 0x5da <IMU_init>
     e04:	81 11       	cpse	r24, r1
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <main+0x5e>
	{
		shutDown();
     e08:	3b df       	rcall	.-394    	; 0xc80 <shutDown>
     e0a:	5a c0       	rjmp	.+180    	; 0xec0 <main+0x112>
     e0c:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <flag>
		return 0;
	}

	flag = 0;
     e10:	1a 82       	std	Y+2, r1	; 0x02

	// Wait for message from the pi before we continue
	uint8_t recBuffer[RECBUFFER_LEN] = "";
     e12:	19 82       	std	Y+1, r1	; 0x01
     e14:	fe 01       	movw	r30, r28
     e16:	33 96       	adiw	r30, 0x03	; 3
     e18:	8e e1       	ldi	r24, 0x1E	; 30
     e1a:	df 01       	movw	r26, r30
     e1c:	1d 92       	st	X+, r1
     e1e:	8a 95       	dec	r24
     e20:	e9 f7       	brne	.-6      	; 0xe1c <main+0x6e>
     e22:	32 97       	sbiw	r30, 0x02	; 2
     e24:	7f 01       	movw	r14, r30
	uint8_t recLen = 0, last = 'A';
     e26:	10 e0       	ldi	r17, 0x00	; 0

	while (last != '\n' && recLen < RECBUFFER_LEN)
	{
		last = USART_Receive_Byte();
     e28:	59 d3       	rcall	.+1714   	; 0x14dc <USART_Receive_Byte>
     e2a:	d7 01       	movw	r26, r14
		recBuffer[recLen] = last;
     e2c:	8d 93       	st	X+, r24
     e2e:	7d 01       	movw	r14, r26
     e30:	1f 5f       	subi	r17, 0xFF	; 255
		recLen++;
     e32:	8a 30       	cpi	r24, 0x0A	; 10

	// Wait for message from the pi before we continue
	uint8_t recBuffer[RECBUFFER_LEN] = "";
	uint8_t recLen = 0, last = 'A';

	while (last != '\n' && recLen < RECBUFFER_LEN)
     e34:	11 f0       	breq	.+4      	; 0xe3a <main+0x8c>
     e36:	10 32       	cpi	r17, 0x20	; 32
     e38:	b9 f7       	brne	.-18     	; 0xe28 <main+0x7a>
		last = USART_Receive_Byte();
		recBuffer[recLen] = last;
		recLen++;
	}

	USART_Transmit(recBuffer, recLen);
     e3a:	41 2f       	mov	r20, r17
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	ce 01       	movw	r24, r28
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	24 d3       	rcall	.+1608   	; 0x1490 <USART_Transmit>

#ifndef _CALIBRATION
	precessToZero();
     e48:	e5 dd       	rcall	.-1078   	; 0xa14 <precessToZero>
#endif

	int buffCount = 0;
     e4a:	00 e0       	ldi	r16, 0x00	; 0
     e4c:	10 e0       	ldi	r17, 0x00	; 0
	while (1)
	{
		while (flag == 0);
     e4e:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <flag>
     e52:	88 23       	and	r24, r24
		
		if (!IMURead_eulerAngle(buffCount)) {
     e54:	e1 f3       	breq	.-8      	; 0xe4e <main+0xa0>
     e56:	c8 01       	movw	r24, r16
     e58:	d1 db       	rcall	.-2142   	; 0x5fc <IMURead_eulerAngle>
     e5a:	88 23       	and	r24, r24
     e5c:	81 f1       	breq	.+96     	; 0xebe <main+0x110>
			break;
		}
		if (!IMURead_eulerVelocities(buffCount)) {
     e5e:	c8 01       	movw	r24, r16
     e60:	6c dc       	rcall	.-1832   	; 0x73a <IMURead_eulerVelocities>
     e62:	88 23       	and	r24, r24
     e64:	61 f1       	breq	.+88     	; 0xebe <main+0x110>
     e66:	c8 01       	movw	r24, r16
			break;
		}
#ifndef _CALIBRATION
		if (!EncoderRead(buffCount)) {
     e68:	2a dd       	rcall	.-1452   	; 0x8be <EncoderRead>
     e6a:	88 23       	and	r24, r24
     e6c:	41 f1       	breq	.+80     	; 0xebe <main+0x110>
     e6e:	60 91 cc 03 	lds	r22, 0x03CC	; 0x8003cc <counter>
		}
#else
		EncoderRead(buffCount);
#endif

		timerBuffer[buffCount]=counter*0.01;
     e72:	70 91 cd 03 	lds	r23, 0x03CD	; 0x8003cd <counter+0x1>
     e76:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <counter+0x2>
     e7a:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <counter+0x3>
     e7e:	98 01       	movw	r18, r16
     e80:	22 0f       	add	r18, r18
     e82:	33 1f       	adc	r19, r19
     e84:	22 0f       	add	r18, r18
     e86:	33 1f       	adc	r19, r19
     e88:	f9 01       	movw	r30, r18
     e8a:	e1 5e       	subi	r30, 0xE1	; 225
     e8c:	f6 4f       	sbci	r31, 0xF6	; 246
     e8e:	7f 01       	movw	r14, r30
     e90:	31 d4       	rcall	.+2146   	; 0x16f4 <__floatsisf>
     e92:	2a e0       	ldi	r18, 0x0A	; 10
     e94:	37 ed       	ldi	r19, 0xD7	; 215
     e96:	43 e2       	ldi	r20, 0x23	; 35
     e98:	5c e3       	ldi	r21, 0x3C	; 60
     e9a:	e0 d4       	rcall	.+2496   	; 0x185c <__mulsf3>
     e9c:	f8 d3       	rcall	.+2032   	; 0x168e <__fixsfsi>
     e9e:	d7 01       	movw	r26, r14
     ea0:	6d 93       	st	X+, r22
     ea2:	7d 93       	st	X+, r23
     ea4:	8d 93       	st	X+, r24
     ea6:	9c 93       	st	X, r25
     ea8:	13 97       	sbiw	r26, 0x03	; 3
     eaa:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <flag>
		//ControlTest(buffCount);
		//ControlPID(buffCount);
		//ControlLQR(buffCount);
#endif

		flag = 0;
     eae:	0f 5f       	subi	r16, 0xFF	; 255
		buffCount++;
     eb0:	1f 4f       	sbci	r17, 0xFF	; 255
     eb2:	04 36       	cpi	r16, 0x64	; 100

		if (buffCount >= BUFFER_SIZE)
     eb4:	11 05       	cpc	r17, r1
     eb6:	5c f2       	brlt	.-106    	; 0xe4e <main+0xa0>
     eb8:	00 e0       	ldi	r16, 0x00	; 0
		buffCount = 0;
     eba:	10 e0       	ldi	r17, 0x00	; 0
     ebc:	c8 cf       	rjmp	.-112    	; 0xe4e <main+0xa0>
     ebe:	e0 de       	rcall	.-576    	; 0xc80 <shutDown>
	}
	
	shutDown();
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
}
     ec4:	a0 96       	adiw	r28, 0x20	; 32
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	08 95       	ret

00000ede <twi_init>:
     ede:	ac eb       	ldi	r26, 0xBC	; 188
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
		}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     ee2:	1c 92       	st	X, r1
     ee4:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <twi_state>
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <twi_sendStop>
     eee:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <twi_inRepStart>
     ef2:	58 9a       	sbi	0x0b, 0	; 11
     ef4:	59 9a       	sbi	0x0b, 1	; 11
     ef6:	e9 eb       	ldi	r30, 0xB9	; 185
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8e 7f       	andi	r24, 0xFE	; 254
     efe:	80 83       	st	Z, r24
     f00:	80 81       	ld	r24, Z
     f02:	8d 7f       	andi	r24, 0xFD	; 253
     f04:	80 83       	st	Z, r24
     f06:	88 e4       	ldi	r24, 0x48	; 72
     f08:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     f0c:	85 e4       	ldi	r24, 0x45	; 69
     f0e:	8c 93       	st	X, r24
     f10:	08 95       	ret

00000f12 <twi_setFrequency>:
     f12:	9b 01       	movw	r18, r22
     f14:	ac 01       	movw	r20, r24
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	74 e2       	ldi	r23, 0x24	; 36
     f1a:	84 ef       	ldi	r24, 0xF4	; 244
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	01 d5       	rcall	.+2562   	; 0x1922 <__udivmodsi4>
     f20:	da 01       	movw	r26, r20
     f22:	c9 01       	movw	r24, r18
     f24:	40 97       	sbiw	r24, 0x10	; 16
     f26:	a1 09       	sbc	r26, r1
     f28:	b1 09       	sbc	r27, r1
     f2a:	b6 95       	lsr	r27
     f2c:	a7 95       	ror	r26
     f2e:	97 95       	ror	r25
     f30:	87 95       	ror	r24
     f32:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     f36:	08 95       	ret

00000f38 <twi_transmit>:
     f38:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <twi_txBufferLength>
     f3c:	26 2f       	mov	r18, r22
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	24 0f       	add	r18, r20
     f42:	31 1d       	adc	r19, r1
     f44:	21 32       	cpi	r18, 0x21	; 33
     f46:	31 05       	cpc	r19, r1
     f48:	ec f4       	brge	.+58     	; 0xf84 <twi_transmit+0x4c>
     f4a:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <twi_state>
     f4e:	24 30       	cpi	r18, 0x04	; 4
     f50:	d9 f4       	brne	.+54     	; 0xf88 <twi_transmit+0x50>
     f52:	66 23       	and	r22, r22
     f54:	81 f0       	breq	.+32     	; 0xf76 <twi_transmit+0x3e>
     f56:	a8 2f       	mov	r26, r24
     f58:	b9 2f       	mov	r27, r25
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	30 91 23 04 	lds	r19, 0x0423	; 0x800423 <twi_txBufferLength>
     f62:	2d 91       	ld	r18, X+
     f64:	fc 01       	movw	r30, r24
     f66:	eb 5d       	subi	r30, 0xDB	; 219
     f68:	fb 4f       	sbci	r31, 0xFB	; 251
     f6a:	e3 0f       	add	r30, r19
     f6c:	f1 1d       	adc	r31, r1
     f6e:	20 83       	st	Z, r18
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	86 17       	cp	r24, r22
     f74:	a0 f3       	brcs	.-24     	; 0xf5e <twi_transmit+0x26>
     f76:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <twi_txBufferLength>
     f7a:	68 0f       	add	r22, r24
     f7c:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <twi_txBufferLength>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	08 95       	ret
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	08 95       	ret
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	08 95       	ret

00000f8c <twi_releaseBus>:
* Output   none
*/
void twi_releaseBus(void)
{
	// release bus
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     f8c:	85 ec       	ldi	r24, 0xC5	; 197
     f8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// update twi state
	twi_state = TWI_READY;
     f92:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <twi_state>
     f96:	08 95       	ret

00000f98 <twi_tout>:

//Time Out
static volatile uint32_t twi_toutc;
uint8_t twi_tout(uint8_t ini)
{
	if (ini) twi_toutc=0; else twi_toutc++;
     f98:	88 23       	and	r24, r24
     f9a:	49 f0       	breq	.+18     	; 0xfae <twi_tout+0x16>
     f9c:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <twi_toutc>
     fa0:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <twi_toutc+0x1>
     fa4:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <twi_toutc+0x2>
     fa8:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <twi_toutc+0x3>
     fac:	13 c0       	rjmp	.+38     	; 0xfd4 <twi_tout+0x3c>
     fae:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <twi_toutc>
     fb2:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <twi_toutc+0x1>
     fb6:	a0 91 ff 03 	lds	r26, 0x03FF	; 0x8003ff <twi_toutc+0x2>
     fba:	b0 91 00 04 	lds	r27, 0x0400	; 0x800400 <twi_toutc+0x3>
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	a1 1d       	adc	r26, r1
     fc2:	b1 1d       	adc	r27, r1
     fc4:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <twi_toutc>
     fc8:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <twi_toutc+0x1>
     fcc:	a0 93 ff 03 	sts	0x03FF, r26	; 0x8003ff <twi_toutc+0x2>
     fd0:	b0 93 00 04 	sts	0x0400, r27	; 0x800400 <twi_toutc+0x3>
	if (twi_toutc>=TWI_LOOPT_TIMEOUT) {
     fd4:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <twi_toutc>
     fd8:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <twi_toutc+0x1>
     fdc:	a0 91 ff 03 	lds	r26, 0x03FF	; 0x8003ff <twi_toutc+0x2>
     fe0:	b0 91 00 04 	lds	r27, 0x0400	; 0x800400 <twi_toutc+0x3>
     fe4:	88 3e       	cpi	r24, 0xE8	; 232
     fe6:	93 40       	sbci	r25, 0x03	; 3
     fe8:	a1 05       	cpc	r26, r1
     fea:	b1 05       	cpc	r27, r1
     fec:	58 f0       	brcs	.+22     	; 0x1004 <twi_tout+0x6c>
		twi_toutc=0;
     fee:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <twi_toutc>
     ff2:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <twi_toutc+0x1>
     ff6:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <twi_toutc+0x2>
     ffa:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <twi_toutc+0x3>
		twi_init();
     ffe:	6f df       	rcall	.-290    	; 0xede <twi_init>
		return 1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	08 95       	ret
	}
	return 0;
    1004:	80 e0       	ldi	r24, 0x00	; 0
}
    1006:	08 95       	ret

00001008 <twi_readFrom>:
*          length: number of bytes to read into array
*          sendStop: Boolean indicating whether to send a stop at the end
* Output   number of bytes read
*/
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    1008:	ff 92       	push	r15
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	d8 2f       	mov	r29, r24
    1014:	06 2f       	mov	r16, r22
    1016:	17 2f       	mov	r17, r23
    1018:	c4 2f       	mov	r28, r20
    101a:	f2 2e       	mov	r15, r18
	uint8_t i;

	// ensure data will fit into buffer
	if(TWI_BUFFER_LENGTH < length){
    101c:	41 32       	cpi	r20, 0x21	; 33
    101e:	08 f0       	brcs	.+2      	; 0x1022 <twi_readFrom+0x1a>
    1020:	5a c0       	rjmp	.+180    	; 0x10d6 <twi_readFrom+0xce>
		return 0;
	}
	
	// wait until twi is ready, become master receiver
	twi_tout(1);//Ini TimeOut
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	b9 df       	rcall	.-142    	; 0xf98 <twi_tout>
	while(TWI_READY != twi_state){
    1026:	04 c0       	rjmp	.+8      	; 0x1030 <twi_readFrom+0x28>
		if (twi_tout(0)) break;
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	b6 df       	rcall	.-148    	; 0xf98 <twi_tout>
    102c:	81 11       	cpse	r24, r1
    102e:	04 c0       	rjmp	.+8      	; 0x1038 <twi_readFrom+0x30>
		return 0;
	}
	
	// wait until twi is ready, become master receiver
	twi_tout(1);//Ini TimeOut
	while(TWI_READY != twi_state){
    1030:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <twi_state>
    1034:	81 11       	cpse	r24, r1
    1036:	f8 cf       	rjmp	.-16     	; 0x1028 <twi_readFrom+0x20>
		if (twi_tout(0)) break;
		continue;
	}
	
	twi_state = TWI_MRX;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <twi_state>
	twi_sendStop = sendStop;
    103e:	f0 92 6c 04 	sts	0x046C, r15	; 0x80046c <twi_sendStop>
	// reset error state (0xFF.. no error occured)
	twi_error = 0xFF;
    1042:	9f ef       	ldi	r25, 0xFF	; 255
    1044:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <twi_error>

	// initialize buffer iteration vars
	twi_masterBufferIndex = 0;
    1048:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <twi_masterBufferIndex>
	twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    104c:	9c 0f       	add	r25, r28
    104e:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <twi_masterBufferLength>
	// Therefor we must actually set NACK when the _next_ to last byte is
	// received, causing that NACK to be sent in response to receiving the last
	// expected byte of data.

	// build sla+w, slave device address + w bit
	twi_slarw = TW_READ;
    1052:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <twi_slarw>
	twi_slarw |= address << 1;
    1056:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <twi_slarw>
    105a:	dd 0f       	add	r29, r29
    105c:	d8 2b       	or	r29, r24
    105e:	d0 93 6d 04 	sts	0x046D, r29	; 0x80046d <twi_slarw>

	if (twi_inRepStart) {
    1062:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <twi_inRepStart>
    1066:	88 23       	and	r24, r24
    1068:	81 f0       	breq	.+32     	; 0x108a <twi_readFrom+0x82>
		// (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
		// We need to remove ourselves from the repeated start state before we enable interrupts,
		// since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
		// up. Also, don't enable the START interrupt. There may be one pending from the
		// repeated start that we sent ourselves, and that would really confuse things.
		twi_inRepStart = 0;			// remember, we're dealing with an ASYNC ISR
    106a:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <twi_inRepStart>
		do {
			TWDR = twi_slarw;
    106e:	ab eb       	ldi	r26, 0xBB	; 187
    1070:	b0 e0       	ldi	r27, 0x00	; 0
		} while(TWCR & _BV(TWWC));
    1072:	ec eb       	ldi	r30, 0xBC	; 188
    1074:	f0 e0       	ldi	r31, 0x00	; 0
		// since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
		// up. Also, don't enable the START interrupt. There may be one pending from the
		// repeated start that we sent ourselves, and that would really confuse things.
		twi_inRepStart = 0;			// remember, we're dealing with an ASYNC ISR
		do {
			TWDR = twi_slarw;
    1076:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <twi_slarw>
    107a:	8c 93       	st	X, r24
		} while(TWCR & _BV(TWWC));
    107c:	80 81       	ld	r24, Z
    107e:	83 fd       	sbrc	r24, 3
    1080:	fa cf       	rjmp	.-12     	; 0x1076 <twi_readFrom+0x6e>
		TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1082:	85 ec       	ldi	r24, 0xC5	; 197
    1084:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1088:	03 c0       	rjmp	.+6      	; 0x1090 <twi_readFrom+0x88>
	}
	else
	// send start condition
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    108a:	85 ee       	ldi	r24, 0xE5	; 229
    108c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait for read operation to complete
	twi_tout(1);
    1090:	81 e0       	ldi	r24, 0x01	; 1
	while(TWI_MRX == twi_state){
    1092:	82 df       	rcall	.-252    	; 0xf98 <twi_tout>
		if (twi_tout(0)) break;
    1094:	04 c0       	rjmp	.+8      	; 0x109e <twi_readFrom+0x96>
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	7f df       	rcall	.-258    	; 0xf98 <twi_tout>
    109a:	81 11       	cpse	r24, r1
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <twi_readFrom+0x9e>
	// send start condition
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

	// wait for read operation to complete
	twi_tout(1);
	while(TWI_MRX == twi_state){
    109e:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <twi_state>
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	c1 f3       	breq	.-16     	; 0x1096 <twi_readFrom+0x8e>
		if (twi_tout(0)) break;
		continue;
	}

	if (twi_masterBufferIndex < length)
    10a6:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <twi_masterBufferIndex>
    10aa:	8c 17       	cp	r24, r28
    10ac:	10 f4       	brcc	.+4      	; 0x10b2 <twi_readFrom+0xaa>
	length = twi_masterBufferIndex;
    10ae:	c0 91 46 04 	lds	r28, 0x0446	; 0x800446 <twi_masterBufferIndex>

	// copy twi buffer to data
	for(i = 0; i < length; ++i){
    10b2:	cc 23       	and	r28, r28
    10b4:	91 f0       	breq	.+36     	; 0x10da <twi_readFrom+0xd2>
    10b6:	e7 e4       	ldi	r30, 0x47	; 71
    10b8:	f4 e0       	ldi	r31, 0x04	; 4
    10ba:	a0 2f       	mov	r26, r16
    10bc:	b1 2f       	mov	r27, r17
    10be:	2f ef       	ldi	r18, 0xFF	; 255
    10c0:	2c 0f       	add	r18, r28
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	28 5b       	subi	r18, 0xB8	; 184
    10c6:	3b 4f       	sbci	r19, 0xFB	; 251
		data[i] = twi_masterBuffer[i];
    10c8:	91 91       	ld	r25, Z+
    10ca:	9d 93       	st	X+, r25

	if (twi_masterBufferIndex < length)
	length = twi_masterBufferIndex;

	// copy twi buffer to data
	for(i = 0; i < length; ++i){
    10cc:	e2 17       	cp	r30, r18
    10ce:	f3 07       	cpc	r31, r19
    10d0:	d9 f7       	brne	.-10     	; 0x10c8 <twi_readFrom+0xc0>
		data[i] = twi_masterBuffer[i];
	}
	
	return length;
    10d2:	8c 2f       	mov	r24, r28
    10d4:	03 c0       	rjmp	.+6      	; 0x10dc <twi_readFrom+0xd4>
{
	uint8_t i;

	// ensure data will fit into buffer
	if(TWI_BUFFER_LENGTH < length){
		return 0;
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <twi_readFrom+0xd4>
	// copy twi buffer to data
	for(i = 0; i < length; ++i){
		data[i] = twi_masterBuffer[i];
	}
	
	return length;
    10da:	80 e0       	ldi	r24, 0x00	; 0
}
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	08 95       	ret

000010e8 <twi_writeTo>:
*          2 .. address send, NACK received
*          3 .. data send, NACK received
*          4 .. other twi error (lost bus arbitration, bus error, ..)
*/
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
	uint8_t i;

	// ensure data will fit into buffer
	if(TWI_BUFFER_LENGTH < length){
    10f6:	41 32       	cpi	r20, 0x21	; 33
    10f8:	08 f0       	brcs	.+2      	; 0x10fc <twi_writeTo+0x14>
    10fa:	6a c0       	rjmp	.+212    	; 0x11d0 <twi_writeTo+0xe8>
    10fc:	d2 2e       	mov	r13, r18
    10fe:	c4 2f       	mov	r28, r20
    1100:	7b 01       	movw	r14, r22
    1102:	18 2f       	mov	r17, r24
		return 1;
	}

	// wait until twi is ready, become master transmitter
	twi_tout(1);
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	48 df       	rcall	.-368    	; 0xf98 <twi_tout>
	while(TWI_READY != twi_state){
    1108:	04 c0       	rjmp	.+8      	; 0x1112 <twi_writeTo+0x2a>
		if (twi_tout(0))
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	45 df       	rcall	.-374    	; 0xf98 <twi_tout>
    110e:	81 11       	cpse	r24, r1
    1110:	61 c0       	rjmp	.+194    	; 0x11d4 <twi_writeTo+0xec>
		return 1;
	}

	// wait until twi is ready, become master transmitter
	twi_tout(1);
	while(TWI_READY != twi_state){
    1112:	d0 91 6e 04 	lds	r29, 0x046E	; 0x80046e <twi_state>
    1116:	d1 11       	cpse	r29, r1
    1118:	f8 cf       	rjmp	.-16     	; 0x110a <twi_writeTo+0x22>
		if (twi_tout(0))
			return 5;
		continue;
	}

	twi_state = TWI_MTX;
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <twi_state>
	twi_sendStop = sendStop;
    1120:	00 93 6c 04 	sts	0x046C, r16	; 0x80046c <twi_sendStop>
	// reset error state (0xFF.. no error occured)
	twi_error = 0xFF;
    1124:	8f ef       	ldi	r24, 0xFF	; 255
    1126:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <twi_error>

	// initialize buffer iteration vars
	twi_masterBufferIndex = 0;
    112a:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <twi_masterBufferIndex>
	twi_masterBufferLength = length;
    112e:	c0 93 45 04 	sts	0x0445, r28	; 0x800445 <twi_masterBufferLength>
	
	// copy data to twi buffer
	for(i = 0; i < length; ++i){
    1132:	cc 23       	and	r28, r28
    1134:	81 f0       	breq	.+32     	; 0x1156 <twi_writeTo+0x6e>
    1136:	f7 01       	movw	r30, r14
    1138:	a7 e4       	ldi	r26, 0x47	; 71
    113a:	b4 e0       	ldi	r27, 0x04	; 4
    113c:	4f ef       	ldi	r20, 0xFF	; 255
    113e:	4c 0f       	add	r20, r28
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	4f 5f       	subi	r20, 0xFF	; 255
    1144:	5f 4f       	sbci	r21, 0xFF	; 255
    1146:	b7 01       	movw	r22, r14
    1148:	64 0f       	add	r22, r20
    114a:	75 1f       	adc	r23, r21
		twi_masterBuffer[i] = data[i];
    114c:	81 91       	ld	r24, Z+
    114e:	8d 93       	st	X+, r24
	// initialize buffer iteration vars
	twi_masterBufferIndex = 0;
	twi_masterBufferLength = length;
	
	// copy data to twi buffer
	for(i = 0; i < length; ++i){
    1150:	e6 17       	cp	r30, r22
    1152:	f7 07       	cpc	r31, r23
    1154:	d9 f7       	brne	.-10     	; 0x114c <twi_writeTo+0x64>
		twi_masterBuffer[i] = data[i];
	}
	
	// build sla+w, slave device address + w bit
	twi_slarw = TW_WRITE;
    1156:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <twi_slarw>
	twi_slarw |= address << 1;
    115a:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <twi_slarw>
    115e:	11 0f       	add	r17, r17
    1160:	18 2b       	or	r17, r24
    1162:	10 93 6d 04 	sts	0x046D, r17	; 0x80046d <twi_slarw>
	
	// if we're in a repeated start, then we've already sent the START
	// in the ISR. Don't do it again.
	//
	if (twi_inRepStart) {
    1166:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <twi_inRepStart>
    116a:	88 23       	and	r24, r24
    116c:	81 f0       	breq	.+32     	; 0x118e <twi_writeTo+0xa6>
		// (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
		// We need to remove ourselves from the repeated start state before we enable interrupts,
		// since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
		// up. Also, don't enable the START interrupt. There may be one pending from the
		// repeated start that we sent outselves, and that would really confuse things.
		twi_inRepStart = 0;			// remember, we're dealing with an ASYNC ISR
    116e:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <twi_inRepStart>
		do {
			TWDR = twi_slarw;
    1172:	ab eb       	ldi	r26, 0xBB	; 187
    1174:	b0 e0       	ldi	r27, 0x00	; 0
		} while(TWCR & _BV(TWWC));
    1176:	ec eb       	ldi	r30, 0xBC	; 188
    1178:	f0 e0       	ldi	r31, 0x00	; 0
		// since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
		// up. Also, don't enable the START interrupt. There may be one pending from the
		// repeated start that we sent outselves, and that would really confuse things.
		twi_inRepStart = 0;			// remember, we're dealing with an ASYNC ISR
		do {
			TWDR = twi_slarw;
    117a:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <twi_slarw>
    117e:	8c 93       	st	X, r24
		} while(TWCR & _BV(TWWC));
    1180:	80 81       	ld	r24, Z
    1182:	83 fd       	sbrc	r24, 3
    1184:	fa cf       	rjmp	.-12     	; 0x117a <twi_writeTo+0x92>
		TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1186:	85 ec       	ldi	r24, 0xC5	; 197
    1188:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    118c:	03 c0       	rjmp	.+6      	; 0x1194 <twi_writeTo+0xac>
	}
	else
	// send start condition
	TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    118e:	85 ee       	ldi	r24, 0xE5	; 229
    1190:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait for write operation to complete
	twi_tout(1);
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	00 df       	rcall	.-512    	; 0xf98 <twi_tout>
	while(wait && (TWI_MTX == twi_state)){
    1198:	dd 20       	and	r13, r13
    119a:	61 f0       	breq	.+24     	; 0x11b4 <twi_writeTo+0xcc>
    119c:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <twi_state>
    11a0:	82 30       	cpi	r24, 0x02	; 2
		if (twi_tout(0)) return 5;
    11a2:	41 f4       	brne	.+16     	; 0x11b4 <twi_writeTo+0xcc>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	f8 de       	rcall	.-528    	; 0xf98 <twi_tout>
    11a8:	81 11       	cpse	r24, r1
    11aa:	16 c0       	rjmp	.+44     	; 0x11d8 <twi_writeTo+0xf0>
	// send start condition
	TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
	
	// wait for write operation to complete
	twi_tout(1);
	while(wait && (TWI_MTX == twi_state)){
    11ac:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <twi_state>
    11b0:	82 30       	cpi	r24, 0x02	; 2
    11b2:	c1 f3       	breq	.-16     	; 0x11a4 <twi_writeTo+0xbc>
		if (twi_tout(0)) return 5;
		continue;
	}
	
	if (twi_error == 0xFF)
    11b4:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <twi_error>
    11b8:	8f 3f       	cpi	r24, 0xFF	; 255
    11ba:	99 f0       	breq	.+38     	; 0x11e2 <twi_writeTo+0xfa>
	return 0;	// success
	else if (twi_error == TW_MT_SLA_NACK)
    11bc:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <twi_error>
    11c0:	80 32       	cpi	r24, 0x20	; 32
    11c2:	61 f0       	breq	.+24     	; 0x11dc <twi_writeTo+0xf4>
	return 2;	// error: address send, nack received
	else if (twi_error == TW_MT_DATA_NACK)
    11c4:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <twi_error>
    11c8:	80 33       	cpi	r24, 0x30	; 48
    11ca:	51 f0       	breq	.+20     	; 0x11e0 <twi_writeTo+0xf8>
	return 3;	// error: data send, nack received
	else
	return 4;	// other twi error
    11cc:	d4 e0       	ldi	r29, 0x04	; 4
    11ce:	09 c0       	rjmp	.+18     	; 0x11e2 <twi_writeTo+0xfa>
{
	uint8_t i;

	// ensure data will fit into buffer
	if(TWI_BUFFER_LENGTH < length){
		return 1;
    11d0:	d1 e0       	ldi	r29, 0x01	; 1
    11d2:	07 c0       	rjmp	.+14     	; 0x11e2 <twi_writeTo+0xfa>

	// wait until twi is ready, become master transmitter
	twi_tout(1);
	while(TWI_READY != twi_state){
		if (twi_tout(0))
			return 5;
    11d4:	d5 e0       	ldi	r29, 0x05	; 5
    11d6:	05 c0       	rjmp	.+10     	; 0x11e2 <twi_writeTo+0xfa>
	TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
	
	// wait for write operation to complete
	twi_tout(1);
	while(wait && (TWI_MTX == twi_state)){
		if (twi_tout(0)) return 5;
    11d8:	d5 e0       	ldi	r29, 0x05	; 5
    11da:	03 c0       	rjmp	.+6      	; 0x11e2 <twi_writeTo+0xfa>
	}
	
	if (twi_error == 0xFF)
	return 0;	// success
	else if (twi_error == TW_MT_SLA_NACK)
	return 2;	// error: address send, nack received
    11dc:	d2 e0       	ldi	r29, 0x02	; 2
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <twi_writeTo+0xfa>
	else if (twi_error == TW_MT_DATA_NACK)
	return 3;	// error: data send, nack received
    11e0:	d3 e0       	ldi	r29, 0x03	; 3
	else
	return 4;	// other twi error
}
    11e2:	8d 2f       	mov	r24, r29
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	df 90       	pop	r13
    11f2:	08 95       	ret

000011f4 <twi_stop>:
* Desc     relinquishes bus master status
* Input    none
* Output   none
*/
void twi_stop(void)
{
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
	// send stop condition
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    11f8:	85 ed       	ldi	r24, 0xD5	; 213
    11fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait for stop condition to be exectued on bus
	// TWINT is not set after a stop condition!
	twi_tout(1);
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	cb de       	rcall	.-618    	; 0xf98 <twi_tout>
	while(TWCR & _BV(TWSTO)){
    1202:	cc eb       	ldi	r28, 0xBC	; 188
    1204:	d0 e0       	ldi	r29, 0x00	; 0
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <twi_stop+0x1c>
		if (twi_tout(0)) return;
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	c6 de       	rcall	.-628    	; 0xf98 <twi_tout>
    120c:	81 11       	cpse	r24, r1
    120e:	05 c0       	rjmp	.+10     	; 0x121a <twi_stop+0x26>
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

	// wait for stop condition to be exectued on bus
	// TWINT is not set after a stop condition!
	twi_tout(1);
	while(TWCR & _BV(TWSTO)){
    1210:	88 81       	ld	r24, Y
    1212:	84 fd       	sbrc	r24, 4
    1214:	f9 cf       	rjmp	.-14     	; 0x1208 <twi_stop+0x14>
		if (twi_tout(0)) return;
		continue;
	}

	// update twi state
	twi_state = TWI_READY;
    1216:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <twi_state>
}
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <__vector_39>:
	}
	return 0;
}

ISR(TWI_vect)
{
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	0b b6       	in	r0, 0x3b	; 59
    122c:	0f 92       	push	r0
    122e:	2f 93       	push	r18
    1230:	3f 93       	push	r19
    1232:	4f 93       	push	r20
    1234:	5f 93       	push	r21
    1236:	6f 93       	push	r22
    1238:	7f 93       	push	r23
    123a:	8f 93       	push	r24
    123c:	9f 93       	push	r25
    123e:	af 93       	push	r26
    1240:	bf 93       	push	r27
    1242:	ef 93       	push	r30
    1244:	ff 93       	push	r31
	switch(TW_STATUS){
    1246:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    124a:	88 7f       	andi	r24, 0xF8	; 248
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	89 3c       	cpi	r24, 0xC9	; 201
    1250:	91 05       	cpc	r25, r1
    1252:	08 f0       	brcs	.+2      	; 0x1256 <__vector_39+0x36>
    1254:	ee c0       	rjmp	.+476    	; 0x1432 <__vector_39+0x212>
    1256:	fc 01       	movw	r30, r24
    1258:	88 27       	eor	r24, r24
    125a:	ee 58       	subi	r30, 0x8E	; 142
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	8f 4f       	sbci	r24, 0xFF	; 255
    1260:	82 c3       	rjmp	.+1796   	; 0x1966 <__tablejump2__>
		// All Master
		case TW_START:     // sent start condition
		case TW_REP_START: // sent repeated start condition
		// copy device address and r/w bit to output register and ack
		TWDR = twi_slarw;
    1262:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <twi_slarw>
    1266:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
*/
void twi_reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    126a:	85 ec       	ldi	r24, 0xC5	; 197
    126c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1270:	e0 c0       	rjmp	.+448    	; 0x1432 <__vector_39+0x212>

		// Master Transmitter
		case TW_MT_SLA_ACK:  // slave receiver acked address
		case TW_MT_DATA_ACK: // slave receiver acked data
		// if there is data to send, send it, otherwise stop
		if(twi_masterBufferIndex < twi_masterBufferLength){
    1272:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <twi_masterBufferIndex>
    1276:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_masterBufferLength>
    127a:	98 17       	cp	r25, r24
    127c:	80 f4       	brcc	.+32     	; 0x129e <__vector_39+0x7e>
			// copy data to output register and ack
			TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    127e:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <twi_masterBufferIndex>
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	8e 0f       	add	r24, r30
    1286:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <twi_masterBufferIndex>
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	e9 5b       	subi	r30, 0xB9	; 185
    128e:	fb 4f       	sbci	r31, 0xFB	; 251
    1290:	80 81       	ld	r24, Z
    1292:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
*/
void twi_reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1296:	85 ec       	ldi	r24, 0xC5	; 197
    1298:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    129c:	ca c0       	rjmp	.+404    	; 0x1432 <__vector_39+0x212>
		if(twi_masterBufferIndex < twi_masterBufferLength){
			// copy data to output register and ack
			TWDR = twi_masterBuffer[twi_masterBufferIndex++];
			twi_reply(1);
			}else{
			if (twi_sendStop)
    129e:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_sendStop>
    12a2:	88 23       	and	r24, r24
			twi_stop();
    12a4:	11 f0       	breq	.+4      	; 0x12aa <__vector_39+0x8a>
    12a6:	a6 df       	rcall	.-180    	; 0x11f4 <twi_stop>
    12a8:	c4 c0       	rjmp	.+392    	; 0x1432 <__vector_39+0x212>
			else {
				twi_inRepStart = 1;	// we're gonna send the START
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <twi_inRepStart>
				// don't enable the interrupt. We'll generate the start, but we
				// avoid handling the interrupt until we're in the next transaction,
				// at the point where we would normally issue the start.
				TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    12b0:	84 ea       	ldi	r24, 0xA4	; 164
    12b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
				twi_state = TWI_READY;
    12b6:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <twi_state>
    12ba:	bb c0       	rjmp	.+374    	; 0x1432 <__vector_39+0x212>
			}
		}
		break;
		case TW_MT_SLA_NACK:  // address sent, nack received
		twi_error = TW_MT_SLA_NACK;
    12bc:	80 e2       	ldi	r24, 0x20	; 32
    12be:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <twi_error>
		twi_stop();
    12c2:	98 df       	rcall	.-208    	; 0x11f4 <twi_stop>
		break;
    12c4:	b6 c0       	rjmp	.+364    	; 0x1432 <__vector_39+0x212>
		case TW_MT_DATA_NACK: // data sent, nack received
		twi_error = TW_MT_DATA_NACK;
    12c6:	80 e3       	ldi	r24, 0x30	; 48
    12c8:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <twi_error>
		twi_stop();
    12cc:	93 df       	rcall	.-218    	; 0x11f4 <twi_stop>
		break;
		case TW_MT_ARB_LOST: // lost bus arbitration
		twi_error = TW_MT_ARB_LOST;
    12ce:	b1 c0       	rjmp	.+354    	; 0x1432 <__vector_39+0x212>
    12d0:	88 e3       	ldi	r24, 0x38	; 56
    12d2:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <twi_error>
		twi_releaseBus();
    12d6:	5a de       	rcall	.-844    	; 0xf8c <twi_releaseBus>
		break;
    12d8:	ac c0       	rjmp	.+344    	; 0x1432 <__vector_39+0x212>

		// Master Receiver
		case TW_MR_DATA_ACK: // data received, ack sent
		// put byte into buffer
		twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    12da:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <twi_masterBufferIndex>
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	8e 0f       	add	r24, r30
    12e2:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <twi_masterBufferIndex>
    12e6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	e9 5b       	subi	r30, 0xB9	; 185
    12ee:	fb 4f       	sbci	r31, 0xFB	; 251
    12f0:	80 83       	st	Z, r24
		case TW_MR_SLA_ACK:  // address sent, ack received
		// ack if more bytes are expected, otherwise nack
		if(twi_masterBufferIndex < twi_masterBufferLength){
    12f2:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <twi_masterBufferIndex>
    12f6:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_masterBufferLength>
    12fa:	98 17       	cp	r25, r24
    12fc:	20 f4       	brcc	.+8      	; 0x1306 <__vector_39+0xe6>
*/
void twi_reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    12fe:	85 ec       	ldi	r24, 0xC5	; 197
    1300:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1304:	96 c0       	rjmp	.+300    	; 0x1432 <__vector_39+0x212>
		}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1306:	85 e8       	ldi	r24, 0x85	; 133
    1308:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    130c:	92 c0       	rjmp	.+292    	; 0x1432 <__vector_39+0x212>
			twi_reply(0);
		}
		break;
		case TW_MR_DATA_NACK: // data received, nack sent
		// put final byte into buffer
		twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    130e:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <twi_masterBufferIndex>
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	8e 0f       	add	r24, r30
    1316:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <twi_masterBufferIndex>
    131a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	e9 5b       	subi	r30, 0xB9	; 185
    1322:	fb 4f       	sbci	r31, 0xFB	; 251
		if (twi_sendStop)
    1324:	80 83       	st	Z, r24
    1326:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_sendStop>
    132a:	88 23       	and	r24, r24
		twi_stop();
    132c:	11 f0       	breq	.+4      	; 0x1332 <__vector_39+0x112>
    132e:	62 df       	rcall	.-316    	; 0x11f4 <twi_stop>
    1330:	80 c0       	rjmp	.+256    	; 0x1432 <__vector_39+0x212>
		else {
			twi_inRepStart = 1;	// we're gonna send the START
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <twi_inRepStart>
			// don't enable the interrupt. We'll generate the start, but we
			// avoid handling the interrupt until we're in the next transaction,
			// at the point where we would normally issue the start.
			TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1338:	84 ea       	ldi	r24, 0xA4	; 164
    133a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			twi_state = TWI_READY;
    133e:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <twi_state>
		}
		break;
		case TW_MR_SLA_NACK: // address sent, nack received
		twi_stop();
    1342:	77 c0       	rjmp	.+238    	; 0x1432 <__vector_39+0x212>
    1344:	57 df       	rcall	.-338    	; 0x11f4 <twi_stop>
		break;
    1346:	75 c0       	rjmp	.+234    	; 0x1432 <__vector_39+0x212>
		case TW_SR_SLA_ACK:   // addressed, returned ack
		case TW_SR_GCALL_ACK: // addressed generally, returned ack
		case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
		case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
		// enter slave receiver mode
		twi_state = TWI_SRX;
    1348:	83 e0       	ldi	r24, 0x03	; 3
    134a:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <twi_state>
		// indicate that rx buffer can be overwritten and ack
		twi_rxBufferIndex = 0;
    134e:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <twi_rxBufferIndex>
*/
void twi_reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1352:	85 ec       	ldi	r24, 0xC5	; 197
    1354:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1358:	6c c0       	rjmp	.+216    	; 0x1432 <__vector_39+0x212>
		twi_reply(1);
		break;
		case TW_SR_DATA_ACK:       // data received, returned ack
		case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
		// if there is still room in the rx buffer
		if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    135a:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <twi_rxBufferIndex>
    135e:	80 32       	cpi	r24, 0x20	; 32
    1360:	80 f4       	brcc	.+32     	; 0x1382 <__vector_39+0x162>
			// put byte in buffer and ack
			twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1362:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <twi_rxBufferIndex>
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	8e 0f       	add	r24, r30
    136a:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <twi_rxBufferIndex>
    136e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	ed 5f       	subi	r30, 0xFD	; 253
    1376:	fb 4f       	sbci	r31, 0xFB	; 251
    1378:	80 83       	st	Z, r24
*/
void twi_reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    137a:	85 ec       	ldi	r24, 0xC5	; 197
    137c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
		}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1380:	58 c0       	rjmp	.+176    	; 0x1432 <__vector_39+0x212>
    1382:	85 e8       	ldi	r24, 0x85	; 133
    1384:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
			twi_reply(0);
		}
		break;
		case TW_SR_STOP: // stop or repeated start condition received
		// ack future responses and leave slave receiver state
		twi_releaseBus();
    1388:	54 c0       	rjmp	.+168    	; 0x1432 <__vector_39+0x212>
    138a:	00 de       	rcall	.-1024   	; 0xf8c <twi_releaseBus>
		// put a null char after data if there's room
		if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    138c:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <twi_rxBufferIndex>
    1390:	80 32       	cpi	r24, 0x20	; 32
    1392:	30 f4       	brcc	.+12     	; 0x13a0 <__vector_39+0x180>
			twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1394:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <twi_rxBufferIndex>
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	ed 5f       	subi	r30, 0xFD	; 253
    139c:	fb 4f       	sbci	r31, 0xFB	; 251
    139e:	10 82       	st	Z, r1
		}
		// callback to user defined callback
		twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    13a0:	60 91 02 04 	lds	r22, 0x0402	; 0x800402 <twi_rxBufferIndex>
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <twi_onSlaveReceive>
    13aa:	f0 91 68 04 	lds	r31, 0x0468	; 0x800468 <twi_onSlaveReceive+0x1>
    13ae:	83 e0       	ldi	r24, 0x03	; 3
    13b0:	94 e0       	ldi	r25, 0x04	; 4
    13b2:	19 95       	eicall
		// since we submit rx buffer to "wire" library, we can reset it
		twi_rxBufferIndex = 0;
    13b4:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <twi_rxBufferIndex>
		break;
    13b8:	3c c0       	rjmp	.+120    	; 0x1432 <__vector_39+0x212>
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
		}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    13ba:	85 e8       	ldi	r24, 0x85	; 133
    13bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    13c0:	38 c0       	rjmp	.+112    	; 0x1432 <__vector_39+0x212>
		
		// Slave Transmitter
		case TW_ST_SLA_ACK:          // addressed, returned ack
		case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
		// enter slave transmitter mode
		twi_state = TWI_STX;
    13c2:	84 e0       	ldi	r24, 0x04	; 4
    13c4:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <twi_state>
		// ready the tx buffer index for iteration
		twi_txBufferIndex = 0;
    13c8:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <twi_txBufferIndex>
		// set tx buffer length to be zero, to verify if user changes it
		twi_txBufferLength = 0;
    13cc:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <twi_txBufferLength>
		// request for txBuffer to be filled and length to be set
		// note: user must call twi_transmit(bytes, length) to do this
		twi_onSlaveTransmit();
    13d0:	e0 91 69 04 	lds	r30, 0x0469	; 0x800469 <twi_onSlaveTransmit>
    13d4:	f0 91 6a 04 	lds	r31, 0x046A	; 0x80046a <twi_onSlaveTransmit+0x1>
    13d8:	19 95       	eicall
		// if they didn't change buffer & length, initialize it
		if(0 == twi_txBufferLength){
    13da:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <twi_txBufferLength>
    13de:	81 11       	cpse	r24, r1
    13e0:	05 c0       	rjmp	.+10     	; 0x13ec <__vector_39+0x1cc>
			twi_txBufferLength = 1;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <twi_txBufferLength>
			twi_txBuffer[0] = 0x00;
    13e8:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <twi_txBuffer>
		}
		// transmit first byte from buffer, fall
		case TW_ST_DATA_ACK: // byte sent, ack returned
		// copy data to output register
		TWDR = twi_txBuffer[twi_txBufferIndex++];
    13ec:	e0 91 24 04 	lds	r30, 0x0424	; 0x800424 <twi_txBufferIndex>
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	8e 0f       	add	r24, r30
    13f4:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <twi_txBufferIndex>
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	eb 5d       	subi	r30, 0xDB	; 219
    13fc:	fb 4f       	sbci	r31, 0xFB	; 251
    13fe:	80 81       	ld	r24, Z
    1400:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
		// if there is more to send, ack, otherwise nack
		if(twi_txBufferIndex < twi_txBufferLength){
    1404:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <twi_txBufferIndex>
    1408:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <twi_txBufferLength>
    140c:	98 17       	cp	r25, r24
    140e:	20 f4       	brcc	.+8      	; 0x1418 <__vector_39+0x1f8>
*/
void twi_reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1410:	85 ec       	ldi	r24, 0xC5	; 197
    1412:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1416:	0d c0       	rjmp	.+26     	; 0x1432 <__vector_39+0x212>
		}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1418:	85 e8       	ldi	r24, 0x85	; 133
    141a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    141e:	09 c0       	rjmp	.+18     	; 0x1432 <__vector_39+0x212>
*/
void twi_reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1420:	85 ec       	ldi	r24, 0xC5	; 197
    1422:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
		case TW_ST_DATA_NACK: // received nack, we are done
		case TW_ST_LAST_DATA: // received ack, but we are done already!
		// ack future responses
		twi_reply(1);
		// leave slave receiver state
		twi_state = TWI_READY;
    1426:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <twi_state>

		// All
		case TW_NO_INFO:   // no state information
		break;
		case TW_BUS_ERROR: // bus error, illegal stop/start
		twi_error = TW_BUS_ERROR;
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <__vector_39+0x212>
    142c:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <twi_error>
		twi_stop();
    1430:	e1 de       	rcall	.-574    	; 0x11f4 <twi_stop>
		break;
	}
}
    1432:	ff 91       	pop	r31
    1434:	ef 91       	pop	r30
    1436:	bf 91       	pop	r27
    1438:	af 91       	pop	r26
    143a:	9f 91       	pop	r25
    143c:	8f 91       	pop	r24
    143e:	7f 91       	pop	r23
    1440:	6f 91       	pop	r22
    1442:	5f 91       	pop	r21
    1444:	4f 91       	pop	r20
    1446:	3f 91       	pop	r19
    1448:	2f 91       	pop	r18
    144a:	0f 90       	pop	r0
    144c:	0b be       	out	0x3b, r0	; 59
    144e:	0f 90       	pop	r0
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	0f 90       	pop	r0
    1454:	1f 90       	pop	r1
    1456:	18 95       	reti

00001458 <USART_Init>:
#include <avr/io.h>
#include <string.h>
#include "usart.h"

void USART_Init(uint32_t baud)
{
    1458:	9b 01       	movw	r18, r22
    145a:	ac 01       	movw	r20, r24
	unsigned int ubrr = ((F_CPU)/16/(baud)-1);
    145c:	60 e4       	ldi	r22, 0x40	; 64
    145e:	72 e4       	ldi	r23, 0x42	; 66
    1460:	8f e0       	ldi	r24, 0x0F	; 15
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	5e d2       	rcall	.+1212   	; 0x1922 <__udivmodsi4>
    1466:	21 50       	subi	r18, 0x01	; 1
    1468:	31 09       	sbc	r19, r1
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
    146a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;
    146e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1472:	88 e1       	ldi	r24, 0x18	; 24
    1474:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
    1478:	8e e0       	ldi	r24, 0x0E	; 14
    147a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    147e:	08 95       	ret

00001480 <USART_Transmit_Byte>:
}

void USART_Transmit_Byte(uint8_t data)
{
	// Wait until the transmit buffer is empty
	while(!(UCSR0A & (1<<UDRE0)))
    1480:	e0 ec       	ldi	r30, 0xC0	; 192
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	90 81       	ld	r25, Z
    1486:	95 ff       	sbrs	r25, 5
    1488:	fd cf       	rjmp	.-6      	; 0x1484 <USART_Transmit_Byte+0x4>
	;

	// Put data into buffer (sends the data)
	UDR0 = data;
    148a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    148e:	08 95       	ret

00001490 <USART_Transmit>:
}

void USART_Transmit(uint8_t data[], uint32_t length)
{
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	ec 01       	movw	r28, r24
	// Transmit each byte, one after the other
	for (uint8_t *curbyte = data; curbyte != (data+length); curbyte++)
    149a:	8c 01       	movw	r16, r24
    149c:	04 0f       	add	r16, r20
    149e:	15 1f       	adc	r17, r21
    14a0:	80 17       	cp	r24, r16
    14a2:	91 07       	cpc	r25, r17
    14a4:	29 f0       	breq	.+10     	; 0x14b0 <USART_Transmit+0x20>
		USART_Transmit_Byte(*curbyte);
    14a6:	89 91       	ld	r24, Y+
    14a8:	eb df       	rcall	.-42     	; 0x1480 <USART_Transmit_Byte>
}

void USART_Transmit(uint8_t data[], uint32_t length)
{
	// Transmit each byte, one after the other
	for (uint8_t *curbyte = data; curbyte != (data+length); curbyte++)
    14aa:	c0 17       	cp	r28, r16
    14ac:	d1 07       	cpc	r29, r17
    14ae:	d9 f7       	brne	.-10     	; 0x14a6 <USART_Transmit+0x16>
		USART_Transmit_Byte(*curbyte);
}
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	08 95       	ret

000014ba <USART_Transmit_String>:

void USART_Transmit_String(char *text)
{
	USART_Transmit((uint8_t*)text, strlen(text));
    14ba:	fc 01       	movw	r30, r24
    14bc:	01 90       	ld	r0, Z+
    14be:	00 20       	and	r0, r0
    14c0:	e9 f7       	brne	.-6      	; 0x14bc <USART_Transmit_String+0x2>
    14c2:	31 97       	sbiw	r30, 0x01	; 1
    14c4:	af 01       	movw	r20, r30
    14c6:	48 1b       	sub	r20, r24
    14c8:	59 0b       	sbc	r21, r25
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	e0 cf       	rjmp	.-64     	; 0x1490 <USART_Transmit>
    14d0:	08 95       	ret

000014d2 <USART_Transmit_Line>:
}

void USART_Transmit_Line(char *text)
{
	USART_Transmit_String(text);
    14d2:	f3 df       	rcall	.-26     	; 0x14ba <USART_Transmit_String>
	USART_Transmit_String("\r\n");
    14d4:	83 e8       	ldi	r24, 0x83	; 131
    14d6:	93 e0       	ldi	r25, 0x03	; 3
    14d8:	f0 cf       	rjmp	.-32     	; 0x14ba <USART_Transmit_String>
    14da:	08 95       	ret

000014dc <USART_Receive_Byte>:
}

uint8_t USART_Receive_Byte(void)
{
	// Wait while data is being received
	while(!((UCSR0A) & (1<<RXC0)))
    14dc:	e0 ec       	ldi	r30, 0xC0	; 192
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	88 23       	and	r24, r24
    14e4:	ec f7       	brge	.-6      	; 0x14e0 <USART_Receive_Byte+0x4>
	;

	// Return 8-bit data
	return UDR0;
    14e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    14ea:	08 95       	ret

000014ec <__subsf3>:
    14ec:	50 58       	subi	r21, 0x80	; 128

000014ee <__addsf3>:
    14ee:	bb 27       	eor	r27, r27
    14f0:	aa 27       	eor	r26, r26
    14f2:	0e d0       	rcall	.+28     	; 0x1510 <__addsf3x>
    14f4:	75 c1       	rjmp	.+746    	; 0x17e0 <__fp_round>
    14f6:	66 d1       	rcall	.+716    	; 0x17c4 <__fp_pscA>
    14f8:	30 f0       	brcs	.+12     	; 0x1506 <__addsf3+0x18>
    14fa:	6b d1       	rcall	.+726    	; 0x17d2 <__fp_pscB>
    14fc:	20 f0       	brcs	.+8      	; 0x1506 <__addsf3+0x18>
    14fe:	31 f4       	brne	.+12     	; 0x150c <__addsf3+0x1e>
    1500:	9f 3f       	cpi	r25, 0xFF	; 255
    1502:	11 f4       	brne	.+4      	; 0x1508 <__addsf3+0x1a>
    1504:	1e f4       	brtc	.+6      	; 0x150c <__addsf3+0x1e>
    1506:	5b c1       	rjmp	.+694    	; 0x17be <__fp_nan>
    1508:	0e f4       	brtc	.+2      	; 0x150c <__addsf3+0x1e>
    150a:	e0 95       	com	r30
    150c:	e7 fb       	bst	r30, 7
    150e:	51 c1       	rjmp	.+674    	; 0x17b2 <__fp_inf>

00001510 <__addsf3x>:
    1510:	e9 2f       	mov	r30, r25
    1512:	77 d1       	rcall	.+750    	; 0x1802 <__fp_split3>
    1514:	80 f3       	brcs	.-32     	; 0x14f6 <__addsf3+0x8>
    1516:	ba 17       	cp	r27, r26
    1518:	62 07       	cpc	r22, r18
    151a:	73 07       	cpc	r23, r19
    151c:	84 07       	cpc	r24, r20
    151e:	95 07       	cpc	r25, r21
    1520:	18 f0       	brcs	.+6      	; 0x1528 <__addsf3x+0x18>
    1522:	71 f4       	brne	.+28     	; 0x1540 <__addsf3x+0x30>
    1524:	9e f5       	brtc	.+102    	; 0x158c <__addsf3x+0x7c>
    1526:	8f c1       	rjmp	.+798    	; 0x1846 <__fp_zero>
    1528:	0e f4       	brtc	.+2      	; 0x152c <__addsf3x+0x1c>
    152a:	e0 95       	com	r30
    152c:	0b 2e       	mov	r0, r27
    152e:	ba 2f       	mov	r27, r26
    1530:	a0 2d       	mov	r26, r0
    1532:	0b 01       	movw	r0, r22
    1534:	b9 01       	movw	r22, r18
    1536:	90 01       	movw	r18, r0
    1538:	0c 01       	movw	r0, r24
    153a:	ca 01       	movw	r24, r20
    153c:	a0 01       	movw	r20, r0
    153e:	11 24       	eor	r1, r1
    1540:	ff 27       	eor	r31, r31
    1542:	59 1b       	sub	r21, r25
    1544:	99 f0       	breq	.+38     	; 0x156c <__addsf3x+0x5c>
    1546:	59 3f       	cpi	r21, 0xF9	; 249
    1548:	50 f4       	brcc	.+20     	; 0x155e <__addsf3x+0x4e>
    154a:	50 3e       	cpi	r21, 0xE0	; 224
    154c:	68 f1       	brcs	.+90     	; 0x15a8 <__addsf3x+0x98>
    154e:	1a 16       	cp	r1, r26
    1550:	f0 40       	sbci	r31, 0x00	; 0
    1552:	a2 2f       	mov	r26, r18
    1554:	23 2f       	mov	r18, r19
    1556:	34 2f       	mov	r19, r20
    1558:	44 27       	eor	r20, r20
    155a:	58 5f       	subi	r21, 0xF8	; 248
    155c:	f3 cf       	rjmp	.-26     	; 0x1544 <__addsf3x+0x34>
    155e:	46 95       	lsr	r20
    1560:	37 95       	ror	r19
    1562:	27 95       	ror	r18
    1564:	a7 95       	ror	r26
    1566:	f0 40       	sbci	r31, 0x00	; 0
    1568:	53 95       	inc	r21
    156a:	c9 f7       	brne	.-14     	; 0x155e <__addsf3x+0x4e>
    156c:	7e f4       	brtc	.+30     	; 0x158c <__addsf3x+0x7c>
    156e:	1f 16       	cp	r1, r31
    1570:	ba 0b       	sbc	r27, r26
    1572:	62 0b       	sbc	r22, r18
    1574:	73 0b       	sbc	r23, r19
    1576:	84 0b       	sbc	r24, r20
    1578:	ba f0       	brmi	.+46     	; 0x15a8 <__addsf3x+0x98>
    157a:	91 50       	subi	r25, 0x01	; 1
    157c:	a1 f0       	breq	.+40     	; 0x15a6 <__addsf3x+0x96>
    157e:	ff 0f       	add	r31, r31
    1580:	bb 1f       	adc	r27, r27
    1582:	66 1f       	adc	r22, r22
    1584:	77 1f       	adc	r23, r23
    1586:	88 1f       	adc	r24, r24
    1588:	c2 f7       	brpl	.-16     	; 0x157a <__addsf3x+0x6a>
    158a:	0e c0       	rjmp	.+28     	; 0x15a8 <__addsf3x+0x98>
    158c:	ba 0f       	add	r27, r26
    158e:	62 1f       	adc	r22, r18
    1590:	73 1f       	adc	r23, r19
    1592:	84 1f       	adc	r24, r20
    1594:	48 f4       	brcc	.+18     	; 0x15a8 <__addsf3x+0x98>
    1596:	87 95       	ror	r24
    1598:	77 95       	ror	r23
    159a:	67 95       	ror	r22
    159c:	b7 95       	ror	r27
    159e:	f7 95       	ror	r31
    15a0:	9e 3f       	cpi	r25, 0xFE	; 254
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <__addsf3x+0x96>
    15a4:	b3 cf       	rjmp	.-154    	; 0x150c <__addsf3+0x1e>
    15a6:	93 95       	inc	r25
    15a8:	88 0f       	add	r24, r24
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <__addsf3x+0x9e>
    15ac:	99 27       	eor	r25, r25
    15ae:	ee 0f       	add	r30, r30
    15b0:	97 95       	ror	r25
    15b2:	87 95       	ror	r24
    15b4:	08 95       	ret

000015b6 <__cmpsf2>:
    15b6:	d9 d0       	rcall	.+434    	; 0x176a <__fp_cmp>
    15b8:	08 f4       	brcc	.+2      	; 0x15bc <__cmpsf2+0x6>
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	08 95       	ret

000015be <__divsf3>:
    15be:	0c d0       	rcall	.+24     	; 0x15d8 <__divsf3x>
    15c0:	0f c1       	rjmp	.+542    	; 0x17e0 <__fp_round>
    15c2:	07 d1       	rcall	.+526    	; 0x17d2 <__fp_pscB>
    15c4:	40 f0       	brcs	.+16     	; 0x15d6 <__divsf3+0x18>
    15c6:	fe d0       	rcall	.+508    	; 0x17c4 <__fp_pscA>
    15c8:	30 f0       	brcs	.+12     	; 0x15d6 <__divsf3+0x18>
    15ca:	21 f4       	brne	.+8      	; 0x15d4 <__divsf3+0x16>
    15cc:	5f 3f       	cpi	r21, 0xFF	; 255
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <__divsf3+0x18>
    15d0:	f0 c0       	rjmp	.+480    	; 0x17b2 <__fp_inf>
    15d2:	51 11       	cpse	r21, r1
    15d4:	39 c1       	rjmp	.+626    	; 0x1848 <__fp_szero>
    15d6:	f3 c0       	rjmp	.+486    	; 0x17be <__fp_nan>

000015d8 <__divsf3x>:
    15d8:	14 d1       	rcall	.+552    	; 0x1802 <__fp_split3>
    15da:	98 f3       	brcs	.-26     	; 0x15c2 <__divsf3+0x4>

000015dc <__divsf3_pse>:
    15dc:	99 23       	and	r25, r25
    15de:	c9 f3       	breq	.-14     	; 0x15d2 <__divsf3+0x14>
    15e0:	55 23       	and	r21, r21
    15e2:	b1 f3       	breq	.-20     	; 0x15d0 <__divsf3+0x12>
    15e4:	95 1b       	sub	r25, r21
    15e6:	55 0b       	sbc	r21, r21
    15e8:	bb 27       	eor	r27, r27
    15ea:	aa 27       	eor	r26, r26
    15ec:	62 17       	cp	r22, r18
    15ee:	73 07       	cpc	r23, r19
    15f0:	84 07       	cpc	r24, r20
    15f2:	38 f0       	brcs	.+14     	; 0x1602 <__divsf3_pse+0x26>
    15f4:	9f 5f       	subi	r25, 0xFF	; 255
    15f6:	5f 4f       	sbci	r21, 0xFF	; 255
    15f8:	22 0f       	add	r18, r18
    15fa:	33 1f       	adc	r19, r19
    15fc:	44 1f       	adc	r20, r20
    15fe:	aa 1f       	adc	r26, r26
    1600:	a9 f3       	breq	.-22     	; 0x15ec <__divsf3_pse+0x10>
    1602:	33 d0       	rcall	.+102    	; 0x166a <__divsf3_pse+0x8e>
    1604:	0e 2e       	mov	r0, r30
    1606:	3a f0       	brmi	.+14     	; 0x1616 <__divsf3_pse+0x3a>
    1608:	e0 e8       	ldi	r30, 0x80	; 128
    160a:	30 d0       	rcall	.+96     	; 0x166c <__divsf3_pse+0x90>
    160c:	91 50       	subi	r25, 0x01	; 1
    160e:	50 40       	sbci	r21, 0x00	; 0
    1610:	e6 95       	lsr	r30
    1612:	00 1c       	adc	r0, r0
    1614:	ca f7       	brpl	.-14     	; 0x1608 <__divsf3_pse+0x2c>
    1616:	29 d0       	rcall	.+82     	; 0x166a <__divsf3_pse+0x8e>
    1618:	fe 2f       	mov	r31, r30
    161a:	27 d0       	rcall	.+78     	; 0x166a <__divsf3_pse+0x8e>
    161c:	66 0f       	add	r22, r22
    161e:	77 1f       	adc	r23, r23
    1620:	88 1f       	adc	r24, r24
    1622:	bb 1f       	adc	r27, r27
    1624:	26 17       	cp	r18, r22
    1626:	37 07       	cpc	r19, r23
    1628:	48 07       	cpc	r20, r24
    162a:	ab 07       	cpc	r26, r27
    162c:	b0 e8       	ldi	r27, 0x80	; 128
    162e:	09 f0       	breq	.+2      	; 0x1632 <__divsf3_pse+0x56>
    1630:	bb 0b       	sbc	r27, r27
    1632:	80 2d       	mov	r24, r0
    1634:	bf 01       	movw	r22, r30
    1636:	ff 27       	eor	r31, r31
    1638:	93 58       	subi	r25, 0x83	; 131
    163a:	5f 4f       	sbci	r21, 0xFF	; 255
    163c:	2a f0       	brmi	.+10     	; 0x1648 <__divsf3_pse+0x6c>
    163e:	9e 3f       	cpi	r25, 0xFE	; 254
    1640:	51 05       	cpc	r21, r1
    1642:	68 f0       	brcs	.+26     	; 0x165e <__divsf3_pse+0x82>
    1644:	b6 c0       	rjmp	.+364    	; 0x17b2 <__fp_inf>
    1646:	00 c1       	rjmp	.+512    	; 0x1848 <__fp_szero>
    1648:	5f 3f       	cpi	r21, 0xFF	; 255
    164a:	ec f3       	brlt	.-6      	; 0x1646 <__divsf3_pse+0x6a>
    164c:	98 3e       	cpi	r25, 0xE8	; 232
    164e:	dc f3       	brlt	.-10     	; 0x1646 <__divsf3_pse+0x6a>
    1650:	86 95       	lsr	r24
    1652:	77 95       	ror	r23
    1654:	67 95       	ror	r22
    1656:	b7 95       	ror	r27
    1658:	f7 95       	ror	r31
    165a:	9f 5f       	subi	r25, 0xFF	; 255
    165c:	c9 f7       	brne	.-14     	; 0x1650 <__divsf3_pse+0x74>
    165e:	88 0f       	add	r24, r24
    1660:	91 1d       	adc	r25, r1
    1662:	96 95       	lsr	r25
    1664:	87 95       	ror	r24
    1666:	97 f9       	bld	r25, 7
    1668:	08 95       	ret
    166a:	e1 e0       	ldi	r30, 0x01	; 1
    166c:	66 0f       	add	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	88 1f       	adc	r24, r24
    1672:	bb 1f       	adc	r27, r27
    1674:	62 17       	cp	r22, r18
    1676:	73 07       	cpc	r23, r19
    1678:	84 07       	cpc	r24, r20
    167a:	ba 07       	cpc	r27, r26
    167c:	20 f0       	brcs	.+8      	; 0x1686 <__divsf3_pse+0xaa>
    167e:	62 1b       	sub	r22, r18
    1680:	73 0b       	sbc	r23, r19
    1682:	84 0b       	sbc	r24, r20
    1684:	ba 0b       	sbc	r27, r26
    1686:	ee 1f       	adc	r30, r30
    1688:	88 f7       	brcc	.-30     	; 0x166c <__divsf3_pse+0x90>
    168a:	e0 95       	com	r30
    168c:	08 95       	ret

0000168e <__fixsfsi>:
    168e:	04 d0       	rcall	.+8      	; 0x1698 <__fixunssfsi>
    1690:	68 94       	set
    1692:	b1 11       	cpse	r27, r1
    1694:	d9 c0       	rjmp	.+434    	; 0x1848 <__fp_szero>
    1696:	08 95       	ret

00001698 <__fixunssfsi>:
    1698:	bc d0       	rcall	.+376    	; 0x1812 <__fp_splitA>
    169a:	88 f0       	brcs	.+34     	; 0x16be <__fixunssfsi+0x26>
    169c:	9f 57       	subi	r25, 0x7F	; 127
    169e:	90 f0       	brcs	.+36     	; 0x16c4 <__fixunssfsi+0x2c>
    16a0:	b9 2f       	mov	r27, r25
    16a2:	99 27       	eor	r25, r25
    16a4:	b7 51       	subi	r27, 0x17	; 23
    16a6:	a0 f0       	brcs	.+40     	; 0x16d0 <__fixunssfsi+0x38>
    16a8:	d1 f0       	breq	.+52     	; 0x16de <__fixunssfsi+0x46>
    16aa:	66 0f       	add	r22, r22
    16ac:	77 1f       	adc	r23, r23
    16ae:	88 1f       	adc	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	1a f0       	brmi	.+6      	; 0x16ba <__fixunssfsi+0x22>
    16b4:	ba 95       	dec	r27
    16b6:	c9 f7       	brne	.-14     	; 0x16aa <__fixunssfsi+0x12>
    16b8:	12 c0       	rjmp	.+36     	; 0x16de <__fixunssfsi+0x46>
    16ba:	b1 30       	cpi	r27, 0x01	; 1
    16bc:	81 f0       	breq	.+32     	; 0x16de <__fixunssfsi+0x46>
    16be:	c3 d0       	rcall	.+390    	; 0x1846 <__fp_zero>
    16c0:	b1 e0       	ldi	r27, 0x01	; 1
    16c2:	08 95       	ret
    16c4:	c0 c0       	rjmp	.+384    	; 0x1846 <__fp_zero>
    16c6:	67 2f       	mov	r22, r23
    16c8:	78 2f       	mov	r23, r24
    16ca:	88 27       	eor	r24, r24
    16cc:	b8 5f       	subi	r27, 0xF8	; 248
    16ce:	39 f0       	breq	.+14     	; 0x16de <__fixunssfsi+0x46>
    16d0:	b9 3f       	cpi	r27, 0xF9	; 249
    16d2:	cc f3       	brlt	.-14     	; 0x16c6 <__fixunssfsi+0x2e>
    16d4:	86 95       	lsr	r24
    16d6:	77 95       	ror	r23
    16d8:	67 95       	ror	r22
    16da:	b3 95       	inc	r27
    16dc:	d9 f7       	brne	.-10     	; 0x16d4 <__fixunssfsi+0x3c>
    16de:	3e f4       	brtc	.+14     	; 0x16ee <__fixunssfsi+0x56>
    16e0:	90 95       	com	r25
    16e2:	80 95       	com	r24
    16e4:	70 95       	com	r23
    16e6:	61 95       	neg	r22
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ea:	8f 4f       	sbci	r24, 0xFF	; 255
    16ec:	9f 4f       	sbci	r25, 0xFF	; 255
    16ee:	08 95       	ret

000016f0 <__floatunsisf>:
    16f0:	e8 94       	clt
    16f2:	09 c0       	rjmp	.+18     	; 0x1706 <__floatsisf+0x12>

000016f4 <__floatsisf>:
    16f4:	97 fb       	bst	r25, 7
    16f6:	3e f4       	brtc	.+14     	; 0x1706 <__floatsisf+0x12>
    16f8:	90 95       	com	r25
    16fa:	80 95       	com	r24
    16fc:	70 95       	com	r23
    16fe:	61 95       	neg	r22
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	8f 4f       	sbci	r24, 0xFF	; 255
    1704:	9f 4f       	sbci	r25, 0xFF	; 255
    1706:	99 23       	and	r25, r25
    1708:	a9 f0       	breq	.+42     	; 0x1734 <__floatsisf+0x40>
    170a:	f9 2f       	mov	r31, r25
    170c:	96 e9       	ldi	r25, 0x96	; 150
    170e:	bb 27       	eor	r27, r27
    1710:	93 95       	inc	r25
    1712:	f6 95       	lsr	r31
    1714:	87 95       	ror	r24
    1716:	77 95       	ror	r23
    1718:	67 95       	ror	r22
    171a:	b7 95       	ror	r27
    171c:	f1 11       	cpse	r31, r1
    171e:	f8 cf       	rjmp	.-16     	; 0x1710 <__floatsisf+0x1c>
    1720:	fa f4       	brpl	.+62     	; 0x1760 <__floatsisf+0x6c>
    1722:	bb 0f       	add	r27, r27
    1724:	11 f4       	brne	.+4      	; 0x172a <__floatsisf+0x36>
    1726:	60 ff       	sbrs	r22, 0
    1728:	1b c0       	rjmp	.+54     	; 0x1760 <__floatsisf+0x6c>
    172a:	6f 5f       	subi	r22, 0xFF	; 255
    172c:	7f 4f       	sbci	r23, 0xFF	; 255
    172e:	8f 4f       	sbci	r24, 0xFF	; 255
    1730:	9f 4f       	sbci	r25, 0xFF	; 255
    1732:	16 c0       	rjmp	.+44     	; 0x1760 <__floatsisf+0x6c>
    1734:	88 23       	and	r24, r24
    1736:	11 f0       	breq	.+4      	; 0x173c <__floatsisf+0x48>
    1738:	96 e9       	ldi	r25, 0x96	; 150
    173a:	11 c0       	rjmp	.+34     	; 0x175e <__floatsisf+0x6a>
    173c:	77 23       	and	r23, r23
    173e:	21 f0       	breq	.+8      	; 0x1748 <__floatsisf+0x54>
    1740:	9e e8       	ldi	r25, 0x8E	; 142
    1742:	87 2f       	mov	r24, r23
    1744:	76 2f       	mov	r23, r22
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <__floatsisf+0x5e>
    1748:	66 23       	and	r22, r22
    174a:	71 f0       	breq	.+28     	; 0x1768 <__floatsisf+0x74>
    174c:	96 e8       	ldi	r25, 0x86	; 134
    174e:	86 2f       	mov	r24, r22
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	2a f0       	brmi	.+10     	; 0x1760 <__floatsisf+0x6c>
    1756:	9a 95       	dec	r25
    1758:	66 0f       	add	r22, r22
    175a:	77 1f       	adc	r23, r23
    175c:	88 1f       	adc	r24, r24
    175e:	da f7       	brpl	.-10     	; 0x1756 <__floatsisf+0x62>
    1760:	88 0f       	add	r24, r24
    1762:	96 95       	lsr	r25
    1764:	87 95       	ror	r24
    1766:	97 f9       	bld	r25, 7
    1768:	08 95       	ret

0000176a <__fp_cmp>:
    176a:	99 0f       	add	r25, r25
    176c:	00 08       	sbc	r0, r0
    176e:	55 0f       	add	r21, r21
    1770:	aa 0b       	sbc	r26, r26
    1772:	e0 e8       	ldi	r30, 0x80	; 128
    1774:	fe ef       	ldi	r31, 0xFE	; 254
    1776:	16 16       	cp	r1, r22
    1778:	17 06       	cpc	r1, r23
    177a:	e8 07       	cpc	r30, r24
    177c:	f9 07       	cpc	r31, r25
    177e:	c0 f0       	brcs	.+48     	; 0x17b0 <__fp_cmp+0x46>
    1780:	12 16       	cp	r1, r18
    1782:	13 06       	cpc	r1, r19
    1784:	e4 07       	cpc	r30, r20
    1786:	f5 07       	cpc	r31, r21
    1788:	98 f0       	brcs	.+38     	; 0x17b0 <__fp_cmp+0x46>
    178a:	62 1b       	sub	r22, r18
    178c:	73 0b       	sbc	r23, r19
    178e:	84 0b       	sbc	r24, r20
    1790:	95 0b       	sbc	r25, r21
    1792:	39 f4       	brne	.+14     	; 0x17a2 <__fp_cmp+0x38>
    1794:	0a 26       	eor	r0, r26
    1796:	61 f0       	breq	.+24     	; 0x17b0 <__fp_cmp+0x46>
    1798:	23 2b       	or	r18, r19
    179a:	24 2b       	or	r18, r20
    179c:	25 2b       	or	r18, r21
    179e:	21 f4       	brne	.+8      	; 0x17a8 <__fp_cmp+0x3e>
    17a0:	08 95       	ret
    17a2:	0a 26       	eor	r0, r26
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <__fp_cmp+0x3e>
    17a6:	a1 40       	sbci	r26, 0x01	; 1
    17a8:	a6 95       	lsr	r26
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	81 1d       	adc	r24, r1
    17ae:	81 1d       	adc	r24, r1
    17b0:	08 95       	ret

000017b2 <__fp_inf>:
    17b2:	97 f9       	bld	r25, 7
    17b4:	9f 67       	ori	r25, 0x7F	; 127
    17b6:	80 e8       	ldi	r24, 0x80	; 128
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	08 95       	ret

000017be <__fp_nan>:
    17be:	9f ef       	ldi	r25, 0xFF	; 255
    17c0:	80 ec       	ldi	r24, 0xC0	; 192
    17c2:	08 95       	ret

000017c4 <__fp_pscA>:
    17c4:	00 24       	eor	r0, r0
    17c6:	0a 94       	dec	r0
    17c8:	16 16       	cp	r1, r22
    17ca:	17 06       	cpc	r1, r23
    17cc:	18 06       	cpc	r1, r24
    17ce:	09 06       	cpc	r0, r25
    17d0:	08 95       	ret

000017d2 <__fp_pscB>:
    17d2:	00 24       	eor	r0, r0
    17d4:	0a 94       	dec	r0
    17d6:	12 16       	cp	r1, r18
    17d8:	13 06       	cpc	r1, r19
    17da:	14 06       	cpc	r1, r20
    17dc:	05 06       	cpc	r0, r21
    17de:	08 95       	ret

000017e0 <__fp_round>:
    17e0:	09 2e       	mov	r0, r25
    17e2:	03 94       	inc	r0
    17e4:	00 0c       	add	r0, r0
    17e6:	11 f4       	brne	.+4      	; 0x17ec <__fp_round+0xc>
    17e8:	88 23       	and	r24, r24
    17ea:	52 f0       	brmi	.+20     	; 0x1800 <__fp_round+0x20>
    17ec:	bb 0f       	add	r27, r27
    17ee:	40 f4       	brcc	.+16     	; 0x1800 <__fp_round+0x20>
    17f0:	bf 2b       	or	r27, r31
    17f2:	11 f4       	brne	.+4      	; 0x17f8 <__fp_round+0x18>
    17f4:	60 ff       	sbrs	r22, 0
    17f6:	04 c0       	rjmp	.+8      	; 0x1800 <__fp_round+0x20>
    17f8:	6f 5f       	subi	r22, 0xFF	; 255
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	8f 4f       	sbci	r24, 0xFF	; 255
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	08 95       	ret

00001802 <__fp_split3>:
    1802:	57 fd       	sbrc	r21, 7
    1804:	90 58       	subi	r25, 0x80	; 128
    1806:	44 0f       	add	r20, r20
    1808:	55 1f       	adc	r21, r21
    180a:	59 f0       	breq	.+22     	; 0x1822 <__fp_splitA+0x10>
    180c:	5f 3f       	cpi	r21, 0xFF	; 255
    180e:	71 f0       	breq	.+28     	; 0x182c <__fp_splitA+0x1a>
    1810:	47 95       	ror	r20

00001812 <__fp_splitA>:
    1812:	88 0f       	add	r24, r24
    1814:	97 fb       	bst	r25, 7
    1816:	99 1f       	adc	r25, r25
    1818:	61 f0       	breq	.+24     	; 0x1832 <__fp_splitA+0x20>
    181a:	9f 3f       	cpi	r25, 0xFF	; 255
    181c:	79 f0       	breq	.+30     	; 0x183c <__fp_splitA+0x2a>
    181e:	87 95       	ror	r24
    1820:	08 95       	ret
    1822:	12 16       	cp	r1, r18
    1824:	13 06       	cpc	r1, r19
    1826:	14 06       	cpc	r1, r20
    1828:	55 1f       	adc	r21, r21
    182a:	f2 cf       	rjmp	.-28     	; 0x1810 <__fp_split3+0xe>
    182c:	46 95       	lsr	r20
    182e:	f1 df       	rcall	.-30     	; 0x1812 <__fp_splitA>
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <__fp_splitA+0x30>
    1832:	16 16       	cp	r1, r22
    1834:	17 06       	cpc	r1, r23
    1836:	18 06       	cpc	r1, r24
    1838:	99 1f       	adc	r25, r25
    183a:	f1 cf       	rjmp	.-30     	; 0x181e <__fp_splitA+0xc>
    183c:	86 95       	lsr	r24
    183e:	71 05       	cpc	r23, r1
    1840:	61 05       	cpc	r22, r1
    1842:	08 94       	sec
    1844:	08 95       	ret

00001846 <__fp_zero>:
    1846:	e8 94       	clt

00001848 <__fp_szero>:
    1848:	bb 27       	eor	r27, r27
    184a:	66 27       	eor	r22, r22
    184c:	77 27       	eor	r23, r23
    184e:	cb 01       	movw	r24, r22
    1850:	97 f9       	bld	r25, 7
    1852:	08 95       	ret

00001854 <__gesf2>:
    1854:	8a df       	rcall	.-236    	; 0x176a <__fp_cmp>
    1856:	08 f4       	brcc	.+2      	; 0x185a <__gesf2+0x6>
    1858:	8f ef       	ldi	r24, 0xFF	; 255
    185a:	08 95       	ret

0000185c <__mulsf3>:
    185c:	0b d0       	rcall	.+22     	; 0x1874 <__mulsf3x>
    185e:	c0 cf       	rjmp	.-128    	; 0x17e0 <__fp_round>
    1860:	b1 df       	rcall	.-158    	; 0x17c4 <__fp_pscA>
    1862:	28 f0       	brcs	.+10     	; 0x186e <__mulsf3+0x12>
    1864:	b6 df       	rcall	.-148    	; 0x17d2 <__fp_pscB>
    1866:	18 f0       	brcs	.+6      	; 0x186e <__mulsf3+0x12>
    1868:	95 23       	and	r25, r21
    186a:	09 f0       	breq	.+2      	; 0x186e <__mulsf3+0x12>
    186c:	a2 cf       	rjmp	.-188    	; 0x17b2 <__fp_inf>
    186e:	a7 cf       	rjmp	.-178    	; 0x17be <__fp_nan>
    1870:	11 24       	eor	r1, r1
    1872:	ea cf       	rjmp	.-44     	; 0x1848 <__fp_szero>

00001874 <__mulsf3x>:
    1874:	c6 df       	rcall	.-116    	; 0x1802 <__fp_split3>
    1876:	a0 f3       	brcs	.-24     	; 0x1860 <__mulsf3+0x4>

00001878 <__mulsf3_pse>:
    1878:	95 9f       	mul	r25, r21
    187a:	d1 f3       	breq	.-12     	; 0x1870 <__mulsf3+0x14>
    187c:	95 0f       	add	r25, r21
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	55 1f       	adc	r21, r21
    1882:	62 9f       	mul	r22, r18
    1884:	f0 01       	movw	r30, r0
    1886:	72 9f       	mul	r23, r18
    1888:	bb 27       	eor	r27, r27
    188a:	f0 0d       	add	r31, r0
    188c:	b1 1d       	adc	r27, r1
    188e:	63 9f       	mul	r22, r19
    1890:	aa 27       	eor	r26, r26
    1892:	f0 0d       	add	r31, r0
    1894:	b1 1d       	adc	r27, r1
    1896:	aa 1f       	adc	r26, r26
    1898:	64 9f       	mul	r22, r20
    189a:	66 27       	eor	r22, r22
    189c:	b0 0d       	add	r27, r0
    189e:	a1 1d       	adc	r26, r1
    18a0:	66 1f       	adc	r22, r22
    18a2:	82 9f       	mul	r24, r18
    18a4:	22 27       	eor	r18, r18
    18a6:	b0 0d       	add	r27, r0
    18a8:	a1 1d       	adc	r26, r1
    18aa:	62 1f       	adc	r22, r18
    18ac:	73 9f       	mul	r23, r19
    18ae:	b0 0d       	add	r27, r0
    18b0:	a1 1d       	adc	r26, r1
    18b2:	62 1f       	adc	r22, r18
    18b4:	83 9f       	mul	r24, r19
    18b6:	a0 0d       	add	r26, r0
    18b8:	61 1d       	adc	r22, r1
    18ba:	22 1f       	adc	r18, r18
    18bc:	74 9f       	mul	r23, r20
    18be:	33 27       	eor	r19, r19
    18c0:	a0 0d       	add	r26, r0
    18c2:	61 1d       	adc	r22, r1
    18c4:	23 1f       	adc	r18, r19
    18c6:	84 9f       	mul	r24, r20
    18c8:	60 0d       	add	r22, r0
    18ca:	21 1d       	adc	r18, r1
    18cc:	82 2f       	mov	r24, r18
    18ce:	76 2f       	mov	r23, r22
    18d0:	6a 2f       	mov	r22, r26
    18d2:	11 24       	eor	r1, r1
    18d4:	9f 57       	subi	r25, 0x7F	; 127
    18d6:	50 40       	sbci	r21, 0x00	; 0
    18d8:	8a f0       	brmi	.+34     	; 0x18fc <__mulsf3_pse+0x84>
    18da:	e1 f0       	breq	.+56     	; 0x1914 <__mulsf3_pse+0x9c>
    18dc:	88 23       	and	r24, r24
    18de:	4a f0       	brmi	.+18     	; 0x18f2 <__mulsf3_pse+0x7a>
    18e0:	ee 0f       	add	r30, r30
    18e2:	ff 1f       	adc	r31, r31
    18e4:	bb 1f       	adc	r27, r27
    18e6:	66 1f       	adc	r22, r22
    18e8:	77 1f       	adc	r23, r23
    18ea:	88 1f       	adc	r24, r24
    18ec:	91 50       	subi	r25, 0x01	; 1
    18ee:	50 40       	sbci	r21, 0x00	; 0
    18f0:	a9 f7       	brne	.-22     	; 0x18dc <__mulsf3_pse+0x64>
    18f2:	9e 3f       	cpi	r25, 0xFE	; 254
    18f4:	51 05       	cpc	r21, r1
    18f6:	70 f0       	brcs	.+28     	; 0x1914 <__mulsf3_pse+0x9c>
    18f8:	5c cf       	rjmp	.-328    	; 0x17b2 <__fp_inf>
    18fa:	a6 cf       	rjmp	.-180    	; 0x1848 <__fp_szero>
    18fc:	5f 3f       	cpi	r21, 0xFF	; 255
    18fe:	ec f3       	brlt	.-6      	; 0x18fa <__mulsf3_pse+0x82>
    1900:	98 3e       	cpi	r25, 0xE8	; 232
    1902:	dc f3       	brlt	.-10     	; 0x18fa <__mulsf3_pse+0x82>
    1904:	86 95       	lsr	r24
    1906:	77 95       	ror	r23
    1908:	67 95       	ror	r22
    190a:	b7 95       	ror	r27
    190c:	f7 95       	ror	r31
    190e:	e7 95       	ror	r30
    1910:	9f 5f       	subi	r25, 0xFF	; 255
    1912:	c1 f7       	brne	.-16     	; 0x1904 <__mulsf3_pse+0x8c>
    1914:	fe 2b       	or	r31, r30
    1916:	88 0f       	add	r24, r24
    1918:	91 1d       	adc	r25, r1
    191a:	96 95       	lsr	r25
    191c:	87 95       	ror	r24
    191e:	97 f9       	bld	r25, 7
    1920:	08 95       	ret

00001922 <__udivmodsi4>:
    1922:	a1 e2       	ldi	r26, 0x21	; 33
    1924:	1a 2e       	mov	r1, r26
    1926:	aa 1b       	sub	r26, r26
    1928:	bb 1b       	sub	r27, r27
    192a:	fd 01       	movw	r30, r26
    192c:	0d c0       	rjmp	.+26     	; 0x1948 <__udivmodsi4_ep>

0000192e <__udivmodsi4_loop>:
    192e:	aa 1f       	adc	r26, r26
    1930:	bb 1f       	adc	r27, r27
    1932:	ee 1f       	adc	r30, r30
    1934:	ff 1f       	adc	r31, r31
    1936:	a2 17       	cp	r26, r18
    1938:	b3 07       	cpc	r27, r19
    193a:	e4 07       	cpc	r30, r20
    193c:	f5 07       	cpc	r31, r21
    193e:	20 f0       	brcs	.+8      	; 0x1948 <__udivmodsi4_ep>
    1940:	a2 1b       	sub	r26, r18
    1942:	b3 0b       	sbc	r27, r19
    1944:	e4 0b       	sbc	r30, r20
    1946:	f5 0b       	sbc	r31, r21

00001948 <__udivmodsi4_ep>:
    1948:	66 1f       	adc	r22, r22
    194a:	77 1f       	adc	r23, r23
    194c:	88 1f       	adc	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	1a 94       	dec	r1
    1952:	69 f7       	brne	.-38     	; 0x192e <__udivmodsi4_loop>
    1954:	60 95       	com	r22
    1956:	70 95       	com	r23
    1958:	80 95       	com	r24
    195a:	90 95       	com	r25
    195c:	9b 01       	movw	r18, r22
    195e:	ac 01       	movw	r20, r24
    1960:	bd 01       	movw	r22, r26
    1962:	cf 01       	movw	r24, r30
    1964:	08 95       	ret

00001966 <__tablejump2__>:
    1966:	ee 0f       	add	r30, r30
    1968:	ff 1f       	adc	r31, r31
    196a:	88 1f       	adc	r24, r24
    196c:	8b bf       	out	0x3b, r24	; 59
    196e:	07 90       	elpm	r0, Z+
    1970:	f6 91       	elpm	r31, Z
    1972:	e0 2d       	mov	r30, r0
    1974:	19 94       	eijmp

00001976 <dtostrf>:
    1976:	ef 92       	push	r14
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	e8 01       	movw	r28, r16
    1982:	47 fd       	sbrc	r20, 7
    1984:	02 c0       	rjmp	.+4      	; 0x198a <dtostrf+0x14>
    1986:	34 e0       	ldi	r19, 0x04	; 4
    1988:	01 c0       	rjmp	.+2      	; 0x198c <dtostrf+0x16>
    198a:	34 e1       	ldi	r19, 0x14	; 20
    198c:	04 2e       	mov	r0, r20
    198e:	00 0c       	add	r0, r0
    1990:	55 0b       	sbc	r21, r21
    1992:	57 ff       	sbrs	r21, 7
    1994:	03 c0       	rjmp	.+6      	; 0x199c <dtostrf+0x26>
    1996:	51 95       	neg	r21
    1998:	41 95       	neg	r20
    199a:	51 09       	sbc	r21, r1
    199c:	e3 2e       	mov	r14, r19
    199e:	02 2f       	mov	r16, r18
    19a0:	24 2f       	mov	r18, r20
    19a2:	ae 01       	movw	r20, r28
    19a4:	32 d2       	rcall	.+1124   	; 0x1e0a <dtoa_prf>
    19a6:	ce 01       	movw	r24, r28
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ef 90       	pop	r14
    19b2:	08 95       	ret

000019b4 <sprintf>:
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	2e 97       	sbiw	r28, 0x0e	; 14
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	0e 89       	ldd	r16, Y+22	; 0x16
    19ce:	1f 89       	ldd	r17, Y+23	; 0x17
    19d0:	86 e0       	ldi	r24, 0x06	; 6
    19d2:	8c 83       	std	Y+4, r24	; 0x04
    19d4:	1a 83       	std	Y+2, r17	; 0x02
    19d6:	09 83       	std	Y+1, r16	; 0x01
    19d8:	8f ef       	ldi	r24, 0xFF	; 255
    19da:	9f e7       	ldi	r25, 0x7F	; 127
    19dc:	9e 83       	std	Y+6, r25	; 0x06
    19de:	8d 83       	std	Y+5, r24	; 0x05
    19e0:	ae 01       	movw	r20, r28
    19e2:	46 5e       	subi	r20, 0xE6	; 230
    19e4:	5f 4f       	sbci	r21, 0xFF	; 255
    19e6:	68 8d       	ldd	r22, Y+24	; 0x18
    19e8:	79 8d       	ldd	r23, Y+25	; 0x19
    19ea:	ce 01       	movw	r24, r28
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	10 d0       	rcall	.+32     	; 0x1a10 <vfprintf>
    19f0:	ef 81       	ldd	r30, Y+7	; 0x07
    19f2:	f8 85       	ldd	r31, Y+8	; 0x08
    19f4:	e0 0f       	add	r30, r16
    19f6:	f1 1f       	adc	r31, r17
    19f8:	10 82       	st	Z, r1
    19fa:	2e 96       	adiw	r28, 0x0e	; 14
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	08 95       	ret

00001a10 <vfprintf>:
    1a10:	2f 92       	push	r2
    1a12:	3f 92       	push	r3
    1a14:	4f 92       	push	r4
    1a16:	5f 92       	push	r5
    1a18:	6f 92       	push	r6
    1a1a:	7f 92       	push	r7
    1a1c:	8f 92       	push	r8
    1a1e:	9f 92       	push	r9
    1a20:	af 92       	push	r10
    1a22:	bf 92       	push	r11
    1a24:	cf 92       	push	r12
    1a26:	df 92       	push	r13
    1a28:	ef 92       	push	r14
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	2b 97       	sbiw	r28, 0x0b	; 11
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	6c 01       	movw	r12, r24
    1a46:	7b 01       	movw	r14, r22
    1a48:	8a 01       	movw	r16, r20
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	17 82       	std	Z+7, r1	; 0x07
    1a4e:	16 82       	std	Z+6, r1	; 0x06
    1a50:	83 81       	ldd	r24, Z+3	; 0x03
    1a52:	81 ff       	sbrs	r24, 1
    1a54:	bf c1       	rjmp	.+894    	; 0x1dd4 <vfprintf+0x3c4>
    1a56:	ce 01       	movw	r24, r28
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	3c 01       	movw	r6, r24
    1a5c:	f6 01       	movw	r30, r12
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	f7 01       	movw	r30, r14
    1a62:	93 fd       	sbrc	r25, 3
    1a64:	85 91       	lpm	r24, Z+
    1a66:	93 ff       	sbrs	r25, 3
    1a68:	81 91       	ld	r24, Z+
    1a6a:	7f 01       	movw	r14, r30
    1a6c:	88 23       	and	r24, r24
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <vfprintf+0x62>
    1a70:	ad c1       	rjmp	.+858    	; 0x1dcc <vfprintf+0x3bc>
    1a72:	85 32       	cpi	r24, 0x25	; 37
    1a74:	39 f4       	brne	.+14     	; 0x1a84 <vfprintf+0x74>
    1a76:	93 fd       	sbrc	r25, 3
    1a78:	85 91       	lpm	r24, Z+
    1a7a:	93 ff       	sbrs	r25, 3
    1a7c:	81 91       	ld	r24, Z+
    1a7e:	7f 01       	movw	r14, r30
    1a80:	85 32       	cpi	r24, 0x25	; 37
    1a82:	21 f4       	brne	.+8      	; 0x1a8c <vfprintf+0x7c>
    1a84:	b6 01       	movw	r22, r12
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	24 d4       	rcall	.+2120   	; 0x22d2 <fputc>
    1a8a:	e8 cf       	rjmp	.-48     	; 0x1a5c <vfprintf+0x4c>
    1a8c:	91 2c       	mov	r9, r1
    1a8e:	21 2c       	mov	r2, r1
    1a90:	31 2c       	mov	r3, r1
    1a92:	ff e1       	ldi	r31, 0x1F	; 31
    1a94:	f3 15       	cp	r31, r3
    1a96:	d8 f0       	brcs	.+54     	; 0x1ace <vfprintf+0xbe>
    1a98:	8b 32       	cpi	r24, 0x2B	; 43
    1a9a:	79 f0       	breq	.+30     	; 0x1aba <vfprintf+0xaa>
    1a9c:	38 f4       	brcc	.+14     	; 0x1aac <vfprintf+0x9c>
    1a9e:	80 32       	cpi	r24, 0x20	; 32
    1aa0:	79 f0       	breq	.+30     	; 0x1ac0 <vfprintf+0xb0>
    1aa2:	83 32       	cpi	r24, 0x23	; 35
    1aa4:	a1 f4       	brne	.+40     	; 0x1ace <vfprintf+0xbe>
    1aa6:	23 2d       	mov	r18, r3
    1aa8:	20 61       	ori	r18, 0x10	; 16
    1aaa:	1d c0       	rjmp	.+58     	; 0x1ae6 <vfprintf+0xd6>
    1aac:	8d 32       	cpi	r24, 0x2D	; 45
    1aae:	61 f0       	breq	.+24     	; 0x1ac8 <vfprintf+0xb8>
    1ab0:	80 33       	cpi	r24, 0x30	; 48
    1ab2:	69 f4       	brne	.+26     	; 0x1ace <vfprintf+0xbe>
    1ab4:	23 2d       	mov	r18, r3
    1ab6:	21 60       	ori	r18, 0x01	; 1
    1ab8:	16 c0       	rjmp	.+44     	; 0x1ae6 <vfprintf+0xd6>
    1aba:	83 2d       	mov	r24, r3
    1abc:	82 60       	ori	r24, 0x02	; 2
    1abe:	38 2e       	mov	r3, r24
    1ac0:	e3 2d       	mov	r30, r3
    1ac2:	e4 60       	ori	r30, 0x04	; 4
    1ac4:	3e 2e       	mov	r3, r30
    1ac6:	2a c0       	rjmp	.+84     	; 0x1b1c <vfprintf+0x10c>
    1ac8:	f3 2d       	mov	r31, r3
    1aca:	f8 60       	ori	r31, 0x08	; 8
    1acc:	1d c0       	rjmp	.+58     	; 0x1b08 <vfprintf+0xf8>
    1ace:	37 fc       	sbrc	r3, 7
    1ad0:	2d c0       	rjmp	.+90     	; 0x1b2c <vfprintf+0x11c>
    1ad2:	20 ed       	ldi	r18, 0xD0	; 208
    1ad4:	28 0f       	add	r18, r24
    1ad6:	2a 30       	cpi	r18, 0x0A	; 10
    1ad8:	40 f0       	brcs	.+16     	; 0x1aea <vfprintf+0xda>
    1ada:	8e 32       	cpi	r24, 0x2E	; 46
    1adc:	b9 f4       	brne	.+46     	; 0x1b0c <vfprintf+0xfc>
    1ade:	36 fc       	sbrc	r3, 6
    1ae0:	75 c1       	rjmp	.+746    	; 0x1dcc <vfprintf+0x3bc>
    1ae2:	23 2d       	mov	r18, r3
    1ae4:	20 64       	ori	r18, 0x40	; 64
    1ae6:	32 2e       	mov	r3, r18
    1ae8:	19 c0       	rjmp	.+50     	; 0x1b1c <vfprintf+0x10c>
    1aea:	36 fe       	sbrs	r3, 6
    1aec:	06 c0       	rjmp	.+12     	; 0x1afa <vfprintf+0xea>
    1aee:	8a e0       	ldi	r24, 0x0A	; 10
    1af0:	98 9e       	mul	r9, r24
    1af2:	20 0d       	add	r18, r0
    1af4:	11 24       	eor	r1, r1
    1af6:	92 2e       	mov	r9, r18
    1af8:	11 c0       	rjmp	.+34     	; 0x1b1c <vfprintf+0x10c>
    1afa:	ea e0       	ldi	r30, 0x0A	; 10
    1afc:	2e 9e       	mul	r2, r30
    1afe:	20 0d       	add	r18, r0
    1b00:	11 24       	eor	r1, r1
    1b02:	22 2e       	mov	r2, r18
    1b04:	f3 2d       	mov	r31, r3
    1b06:	f0 62       	ori	r31, 0x20	; 32
    1b08:	3f 2e       	mov	r3, r31
    1b0a:	08 c0       	rjmp	.+16     	; 0x1b1c <vfprintf+0x10c>
    1b0c:	8c 36       	cpi	r24, 0x6C	; 108
    1b0e:	21 f4       	brne	.+8      	; 0x1b18 <vfprintf+0x108>
    1b10:	83 2d       	mov	r24, r3
    1b12:	80 68       	ori	r24, 0x80	; 128
    1b14:	38 2e       	mov	r3, r24
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <vfprintf+0x10c>
    1b18:	88 36       	cpi	r24, 0x68	; 104
    1b1a:	41 f4       	brne	.+16     	; 0x1b2c <vfprintf+0x11c>
    1b1c:	f7 01       	movw	r30, r14
    1b1e:	93 fd       	sbrc	r25, 3
    1b20:	85 91       	lpm	r24, Z+
    1b22:	93 ff       	sbrs	r25, 3
    1b24:	81 91       	ld	r24, Z+
    1b26:	7f 01       	movw	r14, r30
    1b28:	81 11       	cpse	r24, r1
    1b2a:	b3 cf       	rjmp	.-154    	; 0x1a92 <vfprintf+0x82>
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	9f 7d       	andi	r25, 0xDF	; 223
    1b30:	95 54       	subi	r25, 0x45	; 69
    1b32:	93 30       	cpi	r25, 0x03	; 3
    1b34:	28 f4       	brcc	.+10     	; 0x1b40 <vfprintf+0x130>
    1b36:	0c 5f       	subi	r16, 0xFC	; 252
    1b38:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3a:	9f e3       	ldi	r25, 0x3F	; 63
    1b3c:	99 83       	std	Y+1, r25	; 0x01
    1b3e:	0d c0       	rjmp	.+26     	; 0x1b5a <vfprintf+0x14a>
    1b40:	83 36       	cpi	r24, 0x63	; 99
    1b42:	31 f0       	breq	.+12     	; 0x1b50 <vfprintf+0x140>
    1b44:	83 37       	cpi	r24, 0x73	; 115
    1b46:	71 f0       	breq	.+28     	; 0x1b64 <vfprintf+0x154>
    1b48:	83 35       	cpi	r24, 0x53	; 83
    1b4a:	09 f0       	breq	.+2      	; 0x1b4e <vfprintf+0x13e>
    1b4c:	55 c0       	rjmp	.+170    	; 0x1bf8 <vfprintf+0x1e8>
    1b4e:	20 c0       	rjmp	.+64     	; 0x1b90 <vfprintf+0x180>
    1b50:	f8 01       	movw	r30, r16
    1b52:	80 81       	ld	r24, Z
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	0e 5f       	subi	r16, 0xFE	; 254
    1b58:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5a:	88 24       	eor	r8, r8
    1b5c:	83 94       	inc	r8
    1b5e:	91 2c       	mov	r9, r1
    1b60:	53 01       	movw	r10, r6
    1b62:	12 c0       	rjmp	.+36     	; 0x1b88 <vfprintf+0x178>
    1b64:	28 01       	movw	r4, r16
    1b66:	f2 e0       	ldi	r31, 0x02	; 2
    1b68:	4f 0e       	add	r4, r31
    1b6a:	51 1c       	adc	r5, r1
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	a0 80       	ld	r10, Z
    1b70:	b1 80       	ldd	r11, Z+1	; 0x01
    1b72:	36 fe       	sbrs	r3, 6
    1b74:	03 c0       	rjmp	.+6      	; 0x1b7c <vfprintf+0x16c>
    1b76:	69 2d       	mov	r22, r9
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <vfprintf+0x170>
    1b7c:	6f ef       	ldi	r22, 0xFF	; 255
    1b7e:	7f ef       	ldi	r23, 0xFF	; 255
    1b80:	c5 01       	movw	r24, r10
    1b82:	9c d3       	rcall	.+1848   	; 0x22bc <strnlen>
    1b84:	4c 01       	movw	r8, r24
    1b86:	82 01       	movw	r16, r4
    1b88:	f3 2d       	mov	r31, r3
    1b8a:	ff 77       	andi	r31, 0x7F	; 127
    1b8c:	3f 2e       	mov	r3, r31
    1b8e:	15 c0       	rjmp	.+42     	; 0x1bba <vfprintf+0x1aa>
    1b90:	28 01       	movw	r4, r16
    1b92:	22 e0       	ldi	r18, 0x02	; 2
    1b94:	42 0e       	add	r4, r18
    1b96:	51 1c       	adc	r5, r1
    1b98:	f8 01       	movw	r30, r16
    1b9a:	a0 80       	ld	r10, Z
    1b9c:	b1 80       	ldd	r11, Z+1	; 0x01
    1b9e:	36 fe       	sbrs	r3, 6
    1ba0:	03 c0       	rjmp	.+6      	; 0x1ba8 <vfprintf+0x198>
    1ba2:	69 2d       	mov	r22, r9
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <vfprintf+0x19c>
    1ba8:	6f ef       	ldi	r22, 0xFF	; 255
    1baa:	7f ef       	ldi	r23, 0xFF	; 255
    1bac:	c5 01       	movw	r24, r10
    1bae:	7b d3       	rcall	.+1782   	; 0x22a6 <strnlen_P>
    1bb0:	4c 01       	movw	r8, r24
    1bb2:	f3 2d       	mov	r31, r3
    1bb4:	f0 68       	ori	r31, 0x80	; 128
    1bb6:	3f 2e       	mov	r3, r31
    1bb8:	82 01       	movw	r16, r4
    1bba:	33 fc       	sbrc	r3, 3
    1bbc:	19 c0       	rjmp	.+50     	; 0x1bf0 <vfprintf+0x1e0>
    1bbe:	82 2d       	mov	r24, r2
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	88 16       	cp	r8, r24
    1bc4:	99 06       	cpc	r9, r25
    1bc6:	a0 f4       	brcc	.+40     	; 0x1bf0 <vfprintf+0x1e0>
    1bc8:	b6 01       	movw	r22, r12
    1bca:	80 e2       	ldi	r24, 0x20	; 32
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	81 d3       	rcall	.+1794   	; 0x22d2 <fputc>
    1bd0:	2a 94       	dec	r2
    1bd2:	f5 cf       	rjmp	.-22     	; 0x1bbe <vfprintf+0x1ae>
    1bd4:	f5 01       	movw	r30, r10
    1bd6:	37 fc       	sbrc	r3, 7
    1bd8:	85 91       	lpm	r24, Z+
    1bda:	37 fe       	sbrs	r3, 7
    1bdc:	81 91       	ld	r24, Z+
    1bde:	5f 01       	movw	r10, r30
    1be0:	b6 01       	movw	r22, r12
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	76 d3       	rcall	.+1772   	; 0x22d2 <fputc>
    1be6:	21 10       	cpse	r2, r1
    1be8:	2a 94       	dec	r2
    1bea:	21 e0       	ldi	r18, 0x01	; 1
    1bec:	82 1a       	sub	r8, r18
    1bee:	91 08       	sbc	r9, r1
    1bf0:	81 14       	cp	r8, r1
    1bf2:	91 04       	cpc	r9, r1
    1bf4:	79 f7       	brne	.-34     	; 0x1bd4 <vfprintf+0x1c4>
    1bf6:	e1 c0       	rjmp	.+450    	; 0x1dba <vfprintf+0x3aa>
    1bf8:	84 36       	cpi	r24, 0x64	; 100
    1bfa:	11 f0       	breq	.+4      	; 0x1c00 <vfprintf+0x1f0>
    1bfc:	89 36       	cpi	r24, 0x69	; 105
    1bfe:	39 f5       	brne	.+78     	; 0x1c4e <vfprintf+0x23e>
    1c00:	f8 01       	movw	r30, r16
    1c02:	37 fe       	sbrs	r3, 7
    1c04:	07 c0       	rjmp	.+14     	; 0x1c14 <vfprintf+0x204>
    1c06:	60 81       	ld	r22, Z
    1c08:	71 81       	ldd	r23, Z+1	; 0x01
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	0c 5f       	subi	r16, 0xFC	; 252
    1c10:	1f 4f       	sbci	r17, 0xFF	; 255
    1c12:	08 c0       	rjmp	.+16     	; 0x1c24 <vfprintf+0x214>
    1c14:	60 81       	ld	r22, Z
    1c16:	71 81       	ldd	r23, Z+1	; 0x01
    1c18:	07 2e       	mov	r0, r23
    1c1a:	00 0c       	add	r0, r0
    1c1c:	88 0b       	sbc	r24, r24
    1c1e:	99 0b       	sbc	r25, r25
    1c20:	0e 5f       	subi	r16, 0xFE	; 254
    1c22:	1f 4f       	sbci	r17, 0xFF	; 255
    1c24:	f3 2d       	mov	r31, r3
    1c26:	ff 76       	andi	r31, 0x6F	; 111
    1c28:	3f 2e       	mov	r3, r31
    1c2a:	97 ff       	sbrs	r25, 7
    1c2c:	09 c0       	rjmp	.+18     	; 0x1c40 <vfprintf+0x230>
    1c2e:	90 95       	com	r25
    1c30:	80 95       	com	r24
    1c32:	70 95       	com	r23
    1c34:	61 95       	neg	r22
    1c36:	7f 4f       	sbci	r23, 0xFF	; 255
    1c38:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3c:	f0 68       	ori	r31, 0x80	; 128
    1c3e:	3f 2e       	mov	r3, r31
    1c40:	2a e0       	ldi	r18, 0x0A	; 10
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	a3 01       	movw	r20, r6
    1c46:	81 d3       	rcall	.+1794   	; 0x234a <__ultoa_invert>
    1c48:	88 2e       	mov	r8, r24
    1c4a:	86 18       	sub	r8, r6
    1c4c:	44 c0       	rjmp	.+136    	; 0x1cd6 <vfprintf+0x2c6>
    1c4e:	85 37       	cpi	r24, 0x75	; 117
    1c50:	31 f4       	brne	.+12     	; 0x1c5e <vfprintf+0x24e>
    1c52:	23 2d       	mov	r18, r3
    1c54:	2f 7e       	andi	r18, 0xEF	; 239
    1c56:	b2 2e       	mov	r11, r18
    1c58:	2a e0       	ldi	r18, 0x0A	; 10
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	25 c0       	rjmp	.+74     	; 0x1ca8 <vfprintf+0x298>
    1c5e:	93 2d       	mov	r25, r3
    1c60:	99 7f       	andi	r25, 0xF9	; 249
    1c62:	b9 2e       	mov	r11, r25
    1c64:	8f 36       	cpi	r24, 0x6F	; 111
    1c66:	c1 f0       	breq	.+48     	; 0x1c98 <vfprintf+0x288>
    1c68:	18 f4       	brcc	.+6      	; 0x1c70 <vfprintf+0x260>
    1c6a:	88 35       	cpi	r24, 0x58	; 88
    1c6c:	79 f0       	breq	.+30     	; 0x1c8c <vfprintf+0x27c>
    1c6e:	ae c0       	rjmp	.+348    	; 0x1dcc <vfprintf+0x3bc>
    1c70:	80 37       	cpi	r24, 0x70	; 112
    1c72:	19 f0       	breq	.+6      	; 0x1c7a <vfprintf+0x26a>
    1c74:	88 37       	cpi	r24, 0x78	; 120
    1c76:	21 f0       	breq	.+8      	; 0x1c80 <vfprintf+0x270>
    1c78:	a9 c0       	rjmp	.+338    	; 0x1dcc <vfprintf+0x3bc>
    1c7a:	e9 2f       	mov	r30, r25
    1c7c:	e0 61       	ori	r30, 0x10	; 16
    1c7e:	be 2e       	mov	r11, r30
    1c80:	b4 fe       	sbrs	r11, 4
    1c82:	0d c0       	rjmp	.+26     	; 0x1c9e <vfprintf+0x28e>
    1c84:	fb 2d       	mov	r31, r11
    1c86:	f4 60       	ori	r31, 0x04	; 4
    1c88:	bf 2e       	mov	r11, r31
    1c8a:	09 c0       	rjmp	.+18     	; 0x1c9e <vfprintf+0x28e>
    1c8c:	34 fe       	sbrs	r3, 4
    1c8e:	0a c0       	rjmp	.+20     	; 0x1ca4 <vfprintf+0x294>
    1c90:	29 2f       	mov	r18, r25
    1c92:	26 60       	ori	r18, 0x06	; 6
    1c94:	b2 2e       	mov	r11, r18
    1c96:	06 c0       	rjmp	.+12     	; 0x1ca4 <vfprintf+0x294>
    1c98:	28 e0       	ldi	r18, 0x08	; 8
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	05 c0       	rjmp	.+10     	; 0x1ca8 <vfprintf+0x298>
    1c9e:	20 e1       	ldi	r18, 0x10	; 16
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <vfprintf+0x298>
    1ca4:	20 e1       	ldi	r18, 0x10	; 16
    1ca6:	32 e0       	ldi	r19, 0x02	; 2
    1ca8:	f8 01       	movw	r30, r16
    1caa:	b7 fe       	sbrs	r11, 7
    1cac:	07 c0       	rjmp	.+14     	; 0x1cbc <vfprintf+0x2ac>
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	0c 5f       	subi	r16, 0xFC	; 252
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	06 c0       	rjmp	.+12     	; 0x1cc8 <vfprintf+0x2b8>
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 5f       	subi	r16, 0xFE	; 254
    1cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc8:	a3 01       	movw	r20, r6
    1cca:	3f d3       	rcall	.+1662   	; 0x234a <__ultoa_invert>
    1ccc:	88 2e       	mov	r8, r24
    1cce:	86 18       	sub	r8, r6
    1cd0:	fb 2d       	mov	r31, r11
    1cd2:	ff 77       	andi	r31, 0x7F	; 127
    1cd4:	3f 2e       	mov	r3, r31
    1cd6:	36 fe       	sbrs	r3, 6
    1cd8:	0d c0       	rjmp	.+26     	; 0x1cf4 <vfprintf+0x2e4>
    1cda:	23 2d       	mov	r18, r3
    1cdc:	2e 7f       	andi	r18, 0xFE	; 254
    1cde:	a2 2e       	mov	r10, r18
    1ce0:	89 14       	cp	r8, r9
    1ce2:	58 f4       	brcc	.+22     	; 0x1cfa <vfprintf+0x2ea>
    1ce4:	34 fe       	sbrs	r3, 4
    1ce6:	0b c0       	rjmp	.+22     	; 0x1cfe <vfprintf+0x2ee>
    1ce8:	32 fc       	sbrc	r3, 2
    1cea:	09 c0       	rjmp	.+18     	; 0x1cfe <vfprintf+0x2ee>
    1cec:	83 2d       	mov	r24, r3
    1cee:	8e 7e       	andi	r24, 0xEE	; 238
    1cf0:	a8 2e       	mov	r10, r24
    1cf2:	05 c0       	rjmp	.+10     	; 0x1cfe <vfprintf+0x2ee>
    1cf4:	b8 2c       	mov	r11, r8
    1cf6:	a3 2c       	mov	r10, r3
    1cf8:	03 c0       	rjmp	.+6      	; 0x1d00 <vfprintf+0x2f0>
    1cfa:	b8 2c       	mov	r11, r8
    1cfc:	01 c0       	rjmp	.+2      	; 0x1d00 <vfprintf+0x2f0>
    1cfe:	b9 2c       	mov	r11, r9
    1d00:	a4 fe       	sbrs	r10, 4
    1d02:	0f c0       	rjmp	.+30     	; 0x1d22 <vfprintf+0x312>
    1d04:	fe 01       	movw	r30, r28
    1d06:	e8 0d       	add	r30, r8
    1d08:	f1 1d       	adc	r31, r1
    1d0a:	80 81       	ld	r24, Z
    1d0c:	80 33       	cpi	r24, 0x30	; 48
    1d0e:	21 f4       	brne	.+8      	; 0x1d18 <vfprintf+0x308>
    1d10:	9a 2d       	mov	r25, r10
    1d12:	99 7e       	andi	r25, 0xE9	; 233
    1d14:	a9 2e       	mov	r10, r25
    1d16:	09 c0       	rjmp	.+18     	; 0x1d2a <vfprintf+0x31a>
    1d18:	a2 fe       	sbrs	r10, 2
    1d1a:	06 c0       	rjmp	.+12     	; 0x1d28 <vfprintf+0x318>
    1d1c:	b3 94       	inc	r11
    1d1e:	b3 94       	inc	r11
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <vfprintf+0x31a>
    1d22:	8a 2d       	mov	r24, r10
    1d24:	86 78       	andi	r24, 0x86	; 134
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <vfprintf+0x31a>
    1d28:	b3 94       	inc	r11
    1d2a:	a3 fc       	sbrc	r10, 3
    1d2c:	10 c0       	rjmp	.+32     	; 0x1d4e <vfprintf+0x33e>
    1d2e:	a0 fe       	sbrs	r10, 0
    1d30:	06 c0       	rjmp	.+12     	; 0x1d3e <vfprintf+0x32e>
    1d32:	b2 14       	cp	r11, r2
    1d34:	80 f4       	brcc	.+32     	; 0x1d56 <vfprintf+0x346>
    1d36:	28 0c       	add	r2, r8
    1d38:	92 2c       	mov	r9, r2
    1d3a:	9b 18       	sub	r9, r11
    1d3c:	0d c0       	rjmp	.+26     	; 0x1d58 <vfprintf+0x348>
    1d3e:	b2 14       	cp	r11, r2
    1d40:	58 f4       	brcc	.+22     	; 0x1d58 <vfprintf+0x348>
    1d42:	b6 01       	movw	r22, r12
    1d44:	80 e2       	ldi	r24, 0x20	; 32
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	c4 d2       	rcall	.+1416   	; 0x22d2 <fputc>
    1d4a:	b3 94       	inc	r11
    1d4c:	f8 cf       	rjmp	.-16     	; 0x1d3e <vfprintf+0x32e>
    1d4e:	b2 14       	cp	r11, r2
    1d50:	18 f4       	brcc	.+6      	; 0x1d58 <vfprintf+0x348>
    1d52:	2b 18       	sub	r2, r11
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <vfprintf+0x34a>
    1d56:	98 2c       	mov	r9, r8
    1d58:	21 2c       	mov	r2, r1
    1d5a:	a4 fe       	sbrs	r10, 4
    1d5c:	0f c0       	rjmp	.+30     	; 0x1d7c <vfprintf+0x36c>
    1d5e:	b6 01       	movw	r22, r12
    1d60:	80 e3       	ldi	r24, 0x30	; 48
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	b6 d2       	rcall	.+1388   	; 0x22d2 <fputc>
    1d66:	a2 fe       	sbrs	r10, 2
    1d68:	16 c0       	rjmp	.+44     	; 0x1d96 <vfprintf+0x386>
    1d6a:	a1 fc       	sbrc	r10, 1
    1d6c:	03 c0       	rjmp	.+6      	; 0x1d74 <vfprintf+0x364>
    1d6e:	88 e7       	ldi	r24, 0x78	; 120
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <vfprintf+0x368>
    1d74:	88 e5       	ldi	r24, 0x58	; 88
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	b6 01       	movw	r22, r12
    1d7a:	0c c0       	rjmp	.+24     	; 0x1d94 <vfprintf+0x384>
    1d7c:	8a 2d       	mov	r24, r10
    1d7e:	86 78       	andi	r24, 0x86	; 134
    1d80:	51 f0       	breq	.+20     	; 0x1d96 <vfprintf+0x386>
    1d82:	a1 fe       	sbrs	r10, 1
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <vfprintf+0x37a>
    1d86:	8b e2       	ldi	r24, 0x2B	; 43
    1d88:	01 c0       	rjmp	.+2      	; 0x1d8c <vfprintf+0x37c>
    1d8a:	80 e2       	ldi	r24, 0x20	; 32
    1d8c:	a7 fc       	sbrc	r10, 7
    1d8e:	8d e2       	ldi	r24, 0x2D	; 45
    1d90:	b6 01       	movw	r22, r12
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9e d2       	rcall	.+1340   	; 0x22d2 <fputc>
    1d96:	89 14       	cp	r8, r9
    1d98:	30 f4       	brcc	.+12     	; 0x1da6 <vfprintf+0x396>
    1d9a:	b6 01       	movw	r22, r12
    1d9c:	80 e3       	ldi	r24, 0x30	; 48
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	98 d2       	rcall	.+1328   	; 0x22d2 <fputc>
    1da2:	9a 94       	dec	r9
    1da4:	f8 cf       	rjmp	.-16     	; 0x1d96 <vfprintf+0x386>
    1da6:	8a 94       	dec	r8
    1da8:	f3 01       	movw	r30, r6
    1daa:	e8 0d       	add	r30, r8
    1dac:	f1 1d       	adc	r31, r1
    1dae:	80 81       	ld	r24, Z
    1db0:	b6 01       	movw	r22, r12
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	8e d2       	rcall	.+1308   	; 0x22d2 <fputc>
    1db6:	81 10       	cpse	r8, r1
    1db8:	f6 cf       	rjmp	.-20     	; 0x1da6 <vfprintf+0x396>
    1dba:	22 20       	and	r2, r2
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <vfprintf+0x3b0>
    1dbe:	4e ce       	rjmp	.-868    	; 0x1a5c <vfprintf+0x4c>
    1dc0:	b6 01       	movw	r22, r12
    1dc2:	80 e2       	ldi	r24, 0x20	; 32
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	85 d2       	rcall	.+1290   	; 0x22d2 <fputc>
    1dc8:	2a 94       	dec	r2
    1dca:	f7 cf       	rjmp	.-18     	; 0x1dba <vfprintf+0x3aa>
    1dcc:	f6 01       	movw	r30, r12
    1dce:	86 81       	ldd	r24, Z+6	; 0x06
    1dd0:	97 81       	ldd	r25, Z+7	; 0x07
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <vfprintf+0x3c8>
    1dd4:	8f ef       	ldi	r24, 0xFF	; 255
    1dd6:	9f ef       	ldi	r25, 0xFF	; 255
    1dd8:	2b 96       	adiw	r28, 0x0b	; 11
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	1f 91       	pop	r17
    1dea:	0f 91       	pop	r16
    1dec:	ff 90       	pop	r15
    1dee:	ef 90       	pop	r14
    1df0:	df 90       	pop	r13
    1df2:	cf 90       	pop	r12
    1df4:	bf 90       	pop	r11
    1df6:	af 90       	pop	r10
    1df8:	9f 90       	pop	r9
    1dfa:	8f 90       	pop	r8
    1dfc:	7f 90       	pop	r7
    1dfe:	6f 90       	pop	r6
    1e00:	5f 90       	pop	r5
    1e02:	4f 90       	pop	r4
    1e04:	3f 90       	pop	r3
    1e06:	2f 90       	pop	r2
    1e08:	08 95       	ret

00001e0a <dtoa_prf>:
    1e0a:	8f 92       	push	r8
    1e0c:	9f 92       	push	r9
    1e0e:	af 92       	push	r10
    1e10:	bf 92       	push	r11
    1e12:	cf 92       	push	r12
    1e14:	df 92       	push	r13
    1e16:	ef 92       	push	r14
    1e18:	ff 92       	push	r15
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	29 97       	sbiw	r28, 0x09	; 9
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	6a 01       	movw	r12, r20
    1e34:	12 2f       	mov	r17, r18
    1e36:	b0 2e       	mov	r11, r16
    1e38:	2b e3       	ldi	r18, 0x3B	; 59
    1e3a:	20 17       	cp	r18, r16
    1e3c:	20 f0       	brcs	.+8      	; 0x1e46 <dtoa_prf+0x3c>
    1e3e:	ff 24       	eor	r15, r15
    1e40:	f3 94       	inc	r15
    1e42:	f0 0e       	add	r15, r16
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <dtoa_prf+0x40>
    1e46:	2c e3       	ldi	r18, 0x3C	; 60
    1e48:	f2 2e       	mov	r15, r18
    1e4a:	0f 2d       	mov	r16, r15
    1e4c:	27 e0       	ldi	r18, 0x07	; 7
    1e4e:	ae 01       	movw	r20, r28
    1e50:	4f 5f       	subi	r20, 0xFF	; 255
    1e52:	5f 4f       	sbci	r21, 0xFF	; 255
    1e54:	50 d1       	rcall	.+672    	; 0x20f6 <__ftoa_engine>
    1e56:	bc 01       	movw	r22, r24
    1e58:	49 81       	ldd	r20, Y+1	; 0x01
    1e5a:	84 2f       	mov	r24, r20
    1e5c:	89 70       	andi	r24, 0x09	; 9
    1e5e:	81 30       	cpi	r24, 0x01	; 1
    1e60:	31 f0       	breq	.+12     	; 0x1e6e <dtoa_prf+0x64>
    1e62:	e1 fc       	sbrc	r14, 1
    1e64:	06 c0       	rjmp	.+12     	; 0x1e72 <dtoa_prf+0x68>
    1e66:	e0 fe       	sbrs	r14, 0
    1e68:	06 c0       	rjmp	.+12     	; 0x1e76 <dtoa_prf+0x6c>
    1e6a:	90 e2       	ldi	r25, 0x20	; 32
    1e6c:	05 c0       	rjmp	.+10     	; 0x1e78 <dtoa_prf+0x6e>
    1e6e:	9d e2       	ldi	r25, 0x2D	; 45
    1e70:	03 c0       	rjmp	.+6      	; 0x1e78 <dtoa_prf+0x6e>
    1e72:	9b e2       	ldi	r25, 0x2B	; 43
    1e74:	01 c0       	rjmp	.+2      	; 0x1e78 <dtoa_prf+0x6e>
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	5e 2d       	mov	r21, r14
    1e7a:	50 71       	andi	r21, 0x10	; 16
    1e7c:	43 ff       	sbrs	r20, 3
    1e7e:	3c c0       	rjmp	.+120    	; 0x1ef8 <dtoa_prf+0xee>
    1e80:	91 11       	cpse	r25, r1
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <dtoa_prf+0x7e>
    1e84:	83 e0       	ldi	r24, 0x03	; 3
    1e86:	01 c0       	rjmp	.+2      	; 0x1e8a <dtoa_prf+0x80>
    1e88:	84 e0       	ldi	r24, 0x04	; 4
    1e8a:	81 17       	cp	r24, r17
    1e8c:	18 f4       	brcc	.+6      	; 0x1e94 <dtoa_prf+0x8a>
    1e8e:	21 2f       	mov	r18, r17
    1e90:	28 1b       	sub	r18, r24
    1e92:	01 c0       	rjmp	.+2      	; 0x1e96 <dtoa_prf+0x8c>
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	51 11       	cpse	r21, r1
    1e98:	0b c0       	rjmp	.+22     	; 0x1eb0 <dtoa_prf+0xa6>
    1e9a:	f6 01       	movw	r30, r12
    1e9c:	82 2f       	mov	r24, r18
    1e9e:	30 e2       	ldi	r19, 0x20	; 32
    1ea0:	88 23       	and	r24, r24
    1ea2:	19 f0       	breq	.+6      	; 0x1eaa <dtoa_prf+0xa0>
    1ea4:	31 93       	st	Z+, r19
    1ea6:	81 50       	subi	r24, 0x01	; 1
    1ea8:	fb cf       	rjmp	.-10     	; 0x1ea0 <dtoa_prf+0x96>
    1eaa:	c2 0e       	add	r12, r18
    1eac:	d1 1c       	adc	r13, r1
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	99 23       	and	r25, r25
    1eb2:	29 f0       	breq	.+10     	; 0x1ebe <dtoa_prf+0xb4>
    1eb4:	d6 01       	movw	r26, r12
    1eb6:	9c 93       	st	X, r25
    1eb8:	f6 01       	movw	r30, r12
    1eba:	31 96       	adiw	r30, 0x01	; 1
    1ebc:	6f 01       	movw	r12, r30
    1ebe:	c6 01       	movw	r24, r12
    1ec0:	03 96       	adiw	r24, 0x03	; 3
    1ec2:	e2 fe       	sbrs	r14, 2
    1ec4:	0a c0       	rjmp	.+20     	; 0x1eda <dtoa_prf+0xd0>
    1ec6:	3e e4       	ldi	r19, 0x4E	; 78
    1ec8:	d6 01       	movw	r26, r12
    1eca:	3c 93       	st	X, r19
    1ecc:	41 e4       	ldi	r20, 0x41	; 65
    1ece:	11 96       	adiw	r26, 0x01	; 1
    1ed0:	4c 93       	st	X, r20
    1ed2:	11 97       	sbiw	r26, 0x01	; 1
    1ed4:	12 96       	adiw	r26, 0x02	; 2
    1ed6:	3c 93       	st	X, r19
    1ed8:	06 c0       	rjmp	.+12     	; 0x1ee6 <dtoa_prf+0xdc>
    1eda:	3e e6       	ldi	r19, 0x6E	; 110
    1edc:	f6 01       	movw	r30, r12
    1ede:	30 83       	st	Z, r19
    1ee0:	41 e6       	ldi	r20, 0x61	; 97
    1ee2:	41 83       	std	Z+1, r20	; 0x01
    1ee4:	32 83       	std	Z+2, r19	; 0x02
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	32 2f       	mov	r19, r18
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	33 23       	and	r19, r19
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <dtoa_prf+0xe8>
    1ef0:	42 c0       	rjmp	.+132    	; 0x1f76 <dtoa_prf+0x16c>
    1ef2:	41 93       	st	Z+, r20
    1ef4:	31 50       	subi	r19, 0x01	; 1
    1ef6:	fa cf       	rjmp	.-12     	; 0x1eec <dtoa_prf+0xe2>
    1ef8:	42 ff       	sbrs	r20, 2
    1efa:	44 c0       	rjmp	.+136    	; 0x1f84 <dtoa_prf+0x17a>
    1efc:	91 11       	cpse	r25, r1
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <dtoa_prf+0xfa>
    1f00:	83 e0       	ldi	r24, 0x03	; 3
    1f02:	01 c0       	rjmp	.+2      	; 0x1f06 <dtoa_prf+0xfc>
    1f04:	84 e0       	ldi	r24, 0x04	; 4
    1f06:	81 17       	cp	r24, r17
    1f08:	18 f4       	brcc	.+6      	; 0x1f10 <dtoa_prf+0x106>
    1f0a:	21 2f       	mov	r18, r17
    1f0c:	28 1b       	sub	r18, r24
    1f0e:	01 c0       	rjmp	.+2      	; 0x1f12 <dtoa_prf+0x108>
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	51 11       	cpse	r21, r1
    1f14:	0b c0       	rjmp	.+22     	; 0x1f2c <dtoa_prf+0x122>
    1f16:	f6 01       	movw	r30, r12
    1f18:	82 2f       	mov	r24, r18
    1f1a:	30 e2       	ldi	r19, 0x20	; 32
    1f1c:	88 23       	and	r24, r24
    1f1e:	19 f0       	breq	.+6      	; 0x1f26 <dtoa_prf+0x11c>
    1f20:	31 93       	st	Z+, r19
    1f22:	81 50       	subi	r24, 0x01	; 1
    1f24:	fb cf       	rjmp	.-10     	; 0x1f1c <dtoa_prf+0x112>
    1f26:	c2 0e       	add	r12, r18
    1f28:	d1 1c       	adc	r13, r1
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	99 23       	and	r25, r25
    1f2e:	29 f0       	breq	.+10     	; 0x1f3a <dtoa_prf+0x130>
    1f30:	d6 01       	movw	r26, r12
    1f32:	9c 93       	st	X, r25
    1f34:	f6 01       	movw	r30, r12
    1f36:	31 96       	adiw	r30, 0x01	; 1
    1f38:	6f 01       	movw	r12, r30
    1f3a:	c6 01       	movw	r24, r12
    1f3c:	03 96       	adiw	r24, 0x03	; 3
    1f3e:	e2 fe       	sbrs	r14, 2
    1f40:	0b c0       	rjmp	.+22     	; 0x1f58 <dtoa_prf+0x14e>
    1f42:	39 e4       	ldi	r19, 0x49	; 73
    1f44:	d6 01       	movw	r26, r12
    1f46:	3c 93       	st	X, r19
    1f48:	3e e4       	ldi	r19, 0x4E	; 78
    1f4a:	11 96       	adiw	r26, 0x01	; 1
    1f4c:	3c 93       	st	X, r19
    1f4e:	11 97       	sbiw	r26, 0x01	; 1
    1f50:	36 e4       	ldi	r19, 0x46	; 70
    1f52:	12 96       	adiw	r26, 0x02	; 2
    1f54:	3c 93       	st	X, r19
    1f56:	07 c0       	rjmp	.+14     	; 0x1f66 <dtoa_prf+0x15c>
    1f58:	39 e6       	ldi	r19, 0x69	; 105
    1f5a:	f6 01       	movw	r30, r12
    1f5c:	30 83       	st	Z, r19
    1f5e:	3e e6       	ldi	r19, 0x6E	; 110
    1f60:	31 83       	std	Z+1, r19	; 0x01
    1f62:	36 e6       	ldi	r19, 0x66	; 102
    1f64:	32 83       	std	Z+2, r19	; 0x02
    1f66:	fc 01       	movw	r30, r24
    1f68:	32 2f       	mov	r19, r18
    1f6a:	40 e2       	ldi	r20, 0x20	; 32
    1f6c:	33 23       	and	r19, r19
    1f6e:	19 f0       	breq	.+6      	; 0x1f76 <dtoa_prf+0x16c>
    1f70:	41 93       	st	Z+, r20
    1f72:	31 50       	subi	r19, 0x01	; 1
    1f74:	fb cf       	rjmp	.-10     	; 0x1f6c <dtoa_prf+0x162>
    1f76:	fc 01       	movw	r30, r24
    1f78:	e2 0f       	add	r30, r18
    1f7a:	f1 1d       	adc	r31, r1
    1f7c:	10 82       	st	Z, r1
    1f7e:	8e ef       	ldi	r24, 0xFE	; 254
    1f80:	9f ef       	ldi	r25, 0xFF	; 255
    1f82:	a6 c0       	rjmp	.+332    	; 0x20d0 <dtoa_prf+0x2c6>
    1f84:	21 e0       	ldi	r18, 0x01	; 1
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	91 11       	cpse	r25, r1
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <dtoa_prf+0x186>
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	16 16       	cp	r1, r22
    1f92:	17 06       	cpc	r1, r23
    1f94:	1c f4       	brge	.+6      	; 0x1f9c <dtoa_prf+0x192>
    1f96:	fb 01       	movw	r30, r22
    1f98:	31 96       	adiw	r30, 0x01	; 1
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <dtoa_prf+0x196>
    1f9c:	e1 e0       	ldi	r30, 0x01	; 1
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	2e 0f       	add	r18, r30
    1fa2:	3f 1f       	adc	r19, r31
    1fa4:	bb 20       	and	r11, r11
    1fa6:	21 f0       	breq	.+8      	; 0x1fb0 <dtoa_prf+0x1a6>
    1fa8:	eb 2d       	mov	r30, r11
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	31 96       	adiw	r30, 0x01	; 1
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <dtoa_prf+0x1aa>
    1fb0:	e0 e0       	ldi	r30, 0x00	; 0
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	2e 0f       	add	r18, r30
    1fb6:	3f 1f       	adc	r19, r31
    1fb8:	e1 2f       	mov	r30, r17
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	2e 17       	cp	r18, r30
    1fbe:	3f 07       	cpc	r19, r31
    1fc0:	1c f4       	brge	.+6      	; 0x1fc8 <dtoa_prf+0x1be>
    1fc2:	12 1b       	sub	r17, r18
    1fc4:	21 2f       	mov	r18, r17
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <dtoa_prf+0x1c0>
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	8e 2d       	mov	r24, r14
    1fcc:	88 71       	andi	r24, 0x18	; 24
    1fce:	59 f4       	brne	.+22     	; 0x1fe6 <dtoa_prf+0x1dc>
    1fd0:	f6 01       	movw	r30, r12
    1fd2:	82 2f       	mov	r24, r18
    1fd4:	30 e2       	ldi	r19, 0x20	; 32
    1fd6:	88 23       	and	r24, r24
    1fd8:	19 f0       	breq	.+6      	; 0x1fe0 <dtoa_prf+0x1d6>
    1fda:	31 93       	st	Z+, r19
    1fdc:	81 50       	subi	r24, 0x01	; 1
    1fde:	fb cf       	rjmp	.-10     	; 0x1fd6 <dtoa_prf+0x1cc>
    1fe0:	c2 0e       	add	r12, r18
    1fe2:	d1 1c       	adc	r13, r1
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	99 23       	and	r25, r25
    1fe8:	29 f0       	breq	.+10     	; 0x1ff4 <dtoa_prf+0x1ea>
    1fea:	d6 01       	movw	r26, r12
    1fec:	9c 93       	st	X, r25
    1fee:	f6 01       	movw	r30, r12
    1ff0:	31 96       	adiw	r30, 0x01	; 1
    1ff2:	6f 01       	movw	r12, r30
    1ff4:	51 11       	cpse	r21, r1
    1ff6:	0b c0       	rjmp	.+22     	; 0x200e <dtoa_prf+0x204>
    1ff8:	f6 01       	movw	r30, r12
    1ffa:	82 2f       	mov	r24, r18
    1ffc:	90 e3       	ldi	r25, 0x30	; 48
    1ffe:	88 23       	and	r24, r24
    2000:	19 f0       	breq	.+6      	; 0x2008 <dtoa_prf+0x1fe>
    2002:	91 93       	st	Z+, r25
    2004:	81 50       	subi	r24, 0x01	; 1
    2006:	fb cf       	rjmp	.-10     	; 0x1ffe <dtoa_prf+0x1f4>
    2008:	c2 0e       	add	r12, r18
    200a:	d1 1c       	adc	r13, r1
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	0f 2d       	mov	r16, r15
    2010:	06 0f       	add	r16, r22
    2012:	9a 81       	ldd	r25, Y+2	; 0x02
    2014:	34 2f       	mov	r19, r20
    2016:	30 71       	andi	r19, 0x10	; 16
    2018:	44 ff       	sbrs	r20, 4
    201a:	03 c0       	rjmp	.+6      	; 0x2022 <dtoa_prf+0x218>
    201c:	91 33       	cpi	r25, 0x31	; 49
    201e:	09 f4       	brne	.+2      	; 0x2022 <dtoa_prf+0x218>
    2020:	01 50       	subi	r16, 0x01	; 1
    2022:	10 16       	cp	r1, r16
    2024:	24 f4       	brge	.+8      	; 0x202e <dtoa_prf+0x224>
    2026:	09 30       	cpi	r16, 0x09	; 9
    2028:	18 f0       	brcs	.+6      	; 0x2030 <dtoa_prf+0x226>
    202a:	08 e0       	ldi	r16, 0x08	; 8
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <dtoa_prf+0x226>
    202e:	01 e0       	ldi	r16, 0x01	; 1
    2030:	ab 01       	movw	r20, r22
    2032:	77 ff       	sbrs	r23, 7
    2034:	02 c0       	rjmp	.+4      	; 0x203a <dtoa_prf+0x230>
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	fb 01       	movw	r30, r22
    203c:	e4 1b       	sub	r30, r20
    203e:	f5 0b       	sbc	r31, r21
    2040:	a1 e0       	ldi	r26, 0x01	; 1
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	ac 0f       	add	r26, r28
    2046:	bd 1f       	adc	r27, r29
    2048:	ea 0f       	add	r30, r26
    204a:	fb 1f       	adc	r31, r27
    204c:	8e e2       	ldi	r24, 0x2E	; 46
    204e:	a8 2e       	mov	r10, r24
    2050:	4b 01       	movw	r8, r22
    2052:	80 1a       	sub	r8, r16
    2054:	91 08       	sbc	r9, r1
    2056:	0b 2d       	mov	r16, r11
    2058:	10 e0       	ldi	r17, 0x00	; 0
    205a:	11 95       	neg	r17
    205c:	01 95       	neg	r16
    205e:	11 09       	sbc	r17, r1
    2060:	4f 3f       	cpi	r20, 0xFF	; 255
    2062:	bf ef       	ldi	r27, 0xFF	; 255
    2064:	5b 07       	cpc	r21, r27
    2066:	21 f4       	brne	.+8      	; 0x2070 <dtoa_prf+0x266>
    2068:	d6 01       	movw	r26, r12
    206a:	ac 92       	st	X, r10
    206c:	11 96       	adiw	r26, 0x01	; 1
    206e:	6d 01       	movw	r12, r26
    2070:	64 17       	cp	r22, r20
    2072:	75 07       	cpc	r23, r21
    2074:	2c f0       	brlt	.+10     	; 0x2080 <dtoa_prf+0x276>
    2076:	84 16       	cp	r8, r20
    2078:	95 06       	cpc	r9, r21
    207a:	14 f4       	brge	.+4      	; 0x2080 <dtoa_prf+0x276>
    207c:	81 81       	ldd	r24, Z+1	; 0x01
    207e:	01 c0       	rjmp	.+2      	; 0x2082 <dtoa_prf+0x278>
    2080:	80 e3       	ldi	r24, 0x30	; 48
    2082:	41 50       	subi	r20, 0x01	; 1
    2084:	51 09       	sbc	r21, r1
    2086:	31 96       	adiw	r30, 0x01	; 1
    2088:	d6 01       	movw	r26, r12
    208a:	11 96       	adiw	r26, 0x01	; 1
    208c:	7d 01       	movw	r14, r26
    208e:	40 17       	cp	r20, r16
    2090:	51 07       	cpc	r21, r17
    2092:	24 f0       	brlt	.+8      	; 0x209c <dtoa_prf+0x292>
    2094:	d6 01       	movw	r26, r12
    2096:	8c 93       	st	X, r24
    2098:	67 01       	movw	r12, r14
    209a:	e2 cf       	rjmp	.-60     	; 0x2060 <dtoa_prf+0x256>
    209c:	64 17       	cp	r22, r20
    209e:	75 07       	cpc	r23, r21
    20a0:	39 f4       	brne	.+14     	; 0x20b0 <dtoa_prf+0x2a6>
    20a2:	96 33       	cpi	r25, 0x36	; 54
    20a4:	20 f4       	brcc	.+8      	; 0x20ae <dtoa_prf+0x2a4>
    20a6:	95 33       	cpi	r25, 0x35	; 53
    20a8:	19 f4       	brne	.+6      	; 0x20b0 <dtoa_prf+0x2a6>
    20aa:	31 11       	cpse	r19, r1
    20ac:	01 c0       	rjmp	.+2      	; 0x20b0 <dtoa_prf+0x2a6>
    20ae:	81 e3       	ldi	r24, 0x31	; 49
    20b0:	f6 01       	movw	r30, r12
    20b2:	80 83       	st	Z, r24
    20b4:	f7 01       	movw	r30, r14
    20b6:	82 2f       	mov	r24, r18
    20b8:	90 e2       	ldi	r25, 0x20	; 32
    20ba:	88 23       	and	r24, r24
    20bc:	19 f0       	breq	.+6      	; 0x20c4 <dtoa_prf+0x2ba>
    20be:	91 93       	st	Z+, r25
    20c0:	81 50       	subi	r24, 0x01	; 1
    20c2:	fb cf       	rjmp	.-10     	; 0x20ba <dtoa_prf+0x2b0>
    20c4:	f7 01       	movw	r30, r14
    20c6:	e2 0f       	add	r30, r18
    20c8:	f1 1d       	adc	r31, r1
    20ca:	10 82       	st	Z, r1
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	29 96       	adiw	r28, 0x09	; 9
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	df 91       	pop	r29
    20de:	cf 91       	pop	r28
    20e0:	1f 91       	pop	r17
    20e2:	0f 91       	pop	r16
    20e4:	ff 90       	pop	r15
    20e6:	ef 90       	pop	r14
    20e8:	df 90       	pop	r13
    20ea:	cf 90       	pop	r12
    20ec:	bf 90       	pop	r11
    20ee:	af 90       	pop	r10
    20f0:	9f 90       	pop	r9
    20f2:	8f 90       	pop	r8
    20f4:	08 95       	ret

000020f6 <__ftoa_engine>:
    20f6:	28 30       	cpi	r18, 0x08	; 8
    20f8:	08 f0       	brcs	.+2      	; 0x20fc <__ftoa_engine+0x6>
    20fa:	27 e0       	ldi	r18, 0x07	; 7
    20fc:	33 27       	eor	r19, r19
    20fe:	da 01       	movw	r26, r20
    2100:	99 0f       	add	r25, r25
    2102:	31 1d       	adc	r19, r1
    2104:	87 fd       	sbrc	r24, 7
    2106:	91 60       	ori	r25, 0x01	; 1
    2108:	00 96       	adiw	r24, 0x00	; 0
    210a:	61 05       	cpc	r22, r1
    210c:	71 05       	cpc	r23, r1
    210e:	39 f4       	brne	.+14     	; 0x211e <__ftoa_engine+0x28>
    2110:	32 60       	ori	r19, 0x02	; 2
    2112:	2e 5f       	subi	r18, 0xFE	; 254
    2114:	3d 93       	st	X+, r19
    2116:	30 e3       	ldi	r19, 0x30	; 48
    2118:	2a 95       	dec	r18
    211a:	e1 f7       	brne	.-8      	; 0x2114 <__ftoa_engine+0x1e>
    211c:	08 95       	ret
    211e:	9f 3f       	cpi	r25, 0xFF	; 255
    2120:	30 f0       	brcs	.+12     	; 0x212e <__ftoa_engine+0x38>
    2122:	80 38       	cpi	r24, 0x80	; 128
    2124:	71 05       	cpc	r23, r1
    2126:	61 05       	cpc	r22, r1
    2128:	09 f0       	breq	.+2      	; 0x212c <__ftoa_engine+0x36>
    212a:	3c 5f       	subi	r19, 0xFC	; 252
    212c:	3c 5f       	subi	r19, 0xFC	; 252
    212e:	3d 93       	st	X+, r19
    2130:	91 30       	cpi	r25, 0x01	; 1
    2132:	08 f0       	brcs	.+2      	; 0x2136 <__ftoa_engine+0x40>
    2134:	80 68       	ori	r24, 0x80	; 128
    2136:	91 1d       	adc	r25, r1
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	1f 93       	push	r17
    213e:	0f 93       	push	r16
    2140:	ff 92       	push	r15
    2142:	ef 92       	push	r14
    2144:	19 2f       	mov	r17, r25
    2146:	98 7f       	andi	r25, 0xF8	; 248
    2148:	96 95       	lsr	r25
    214a:	e9 2f       	mov	r30, r25
    214c:	96 95       	lsr	r25
    214e:	96 95       	lsr	r25
    2150:	e9 0f       	add	r30, r25
    2152:	ff 27       	eor	r31, r31
    2154:	e0 53       	subi	r30, 0x30	; 48
    2156:	fd 4f       	sbci	r31, 0xFD	; 253
    2158:	99 27       	eor	r25, r25
    215a:	33 27       	eor	r19, r19
    215c:	ee 24       	eor	r14, r14
    215e:	ff 24       	eor	r15, r15
    2160:	a7 01       	movw	r20, r14
    2162:	e7 01       	movw	r28, r14
    2164:	05 90       	lpm	r0, Z+
    2166:	08 94       	sec
    2168:	07 94       	ror	r0
    216a:	28 f4       	brcc	.+10     	; 0x2176 <__ftoa_engine+0x80>
    216c:	36 0f       	add	r19, r22
    216e:	e7 1e       	adc	r14, r23
    2170:	f8 1e       	adc	r15, r24
    2172:	49 1f       	adc	r20, r25
    2174:	51 1d       	adc	r21, r1
    2176:	66 0f       	add	r22, r22
    2178:	77 1f       	adc	r23, r23
    217a:	88 1f       	adc	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	06 94       	lsr	r0
    2180:	a1 f7       	brne	.-24     	; 0x216a <__ftoa_engine+0x74>
    2182:	05 90       	lpm	r0, Z+
    2184:	07 94       	ror	r0
    2186:	28 f4       	brcc	.+10     	; 0x2192 <__ftoa_engine+0x9c>
    2188:	e7 0e       	add	r14, r23
    218a:	f8 1e       	adc	r15, r24
    218c:	49 1f       	adc	r20, r25
    218e:	56 1f       	adc	r21, r22
    2190:	c1 1d       	adc	r28, r1
    2192:	77 0f       	add	r23, r23
    2194:	88 1f       	adc	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	66 1f       	adc	r22, r22
    219a:	06 94       	lsr	r0
    219c:	a1 f7       	brne	.-24     	; 0x2186 <__ftoa_engine+0x90>
    219e:	05 90       	lpm	r0, Z+
    21a0:	07 94       	ror	r0
    21a2:	28 f4       	brcc	.+10     	; 0x21ae <__ftoa_engine+0xb8>
    21a4:	f8 0e       	add	r15, r24
    21a6:	49 1f       	adc	r20, r25
    21a8:	56 1f       	adc	r21, r22
    21aa:	c7 1f       	adc	r28, r23
    21ac:	d1 1d       	adc	r29, r1
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	66 1f       	adc	r22, r22
    21b4:	77 1f       	adc	r23, r23
    21b6:	06 94       	lsr	r0
    21b8:	a1 f7       	brne	.-24     	; 0x21a2 <__ftoa_engine+0xac>
    21ba:	05 90       	lpm	r0, Z+
    21bc:	07 94       	ror	r0
    21be:	20 f4       	brcc	.+8      	; 0x21c8 <__ftoa_engine+0xd2>
    21c0:	49 0f       	add	r20, r25
    21c2:	56 1f       	adc	r21, r22
    21c4:	c7 1f       	adc	r28, r23
    21c6:	d8 1f       	adc	r29, r24
    21c8:	99 0f       	add	r25, r25
    21ca:	66 1f       	adc	r22, r22
    21cc:	77 1f       	adc	r23, r23
    21ce:	88 1f       	adc	r24, r24
    21d0:	06 94       	lsr	r0
    21d2:	a9 f7       	brne	.-22     	; 0x21be <__ftoa_engine+0xc8>
    21d4:	84 91       	lpm	r24, Z
    21d6:	10 95       	com	r17
    21d8:	17 70       	andi	r17, 0x07	; 7
    21da:	41 f0       	breq	.+16     	; 0x21ec <__ftoa_engine+0xf6>
    21dc:	d6 95       	lsr	r29
    21de:	c7 95       	ror	r28
    21e0:	57 95       	ror	r21
    21e2:	47 95       	ror	r20
    21e4:	f7 94       	ror	r15
    21e6:	e7 94       	ror	r14
    21e8:	1a 95       	dec	r17
    21ea:	c1 f7       	brne	.-16     	; 0x21dc <__ftoa_engine+0xe6>
    21ec:	e6 e7       	ldi	r30, 0x76	; 118
    21ee:	f2 e0       	ldi	r31, 0x02	; 2
    21f0:	68 94       	set
    21f2:	15 90       	lpm	r1, Z+
    21f4:	15 91       	lpm	r17, Z+
    21f6:	35 91       	lpm	r19, Z+
    21f8:	65 91       	lpm	r22, Z+
    21fa:	95 91       	lpm	r25, Z+
    21fc:	05 90       	lpm	r0, Z+
    21fe:	7f e2       	ldi	r23, 0x2F	; 47
    2200:	73 95       	inc	r23
    2202:	e1 18       	sub	r14, r1
    2204:	f1 0a       	sbc	r15, r17
    2206:	43 0b       	sbc	r20, r19
    2208:	56 0b       	sbc	r21, r22
    220a:	c9 0b       	sbc	r28, r25
    220c:	d0 09       	sbc	r29, r0
    220e:	c0 f7       	brcc	.-16     	; 0x2200 <__stack+0x1>
    2210:	e1 0c       	add	r14, r1
    2212:	f1 1e       	adc	r15, r17
    2214:	43 1f       	adc	r20, r19
    2216:	56 1f       	adc	r21, r22
    2218:	c9 1f       	adc	r28, r25
    221a:	d0 1d       	adc	r29, r0
    221c:	7e f4       	brtc	.+30     	; 0x223c <__stack+0x3d>
    221e:	70 33       	cpi	r23, 0x30	; 48
    2220:	11 f4       	brne	.+4      	; 0x2226 <__stack+0x27>
    2222:	8a 95       	dec	r24
    2224:	e6 cf       	rjmp	.-52     	; 0x21f2 <__ftoa_engine+0xfc>
    2226:	e8 94       	clt
    2228:	01 50       	subi	r16, 0x01	; 1
    222a:	30 f0       	brcs	.+12     	; 0x2238 <__stack+0x39>
    222c:	08 0f       	add	r16, r24
    222e:	0a f4       	brpl	.+2      	; 0x2232 <__stack+0x33>
    2230:	00 27       	eor	r16, r16
    2232:	02 17       	cp	r16, r18
    2234:	08 f4       	brcc	.+2      	; 0x2238 <__stack+0x39>
    2236:	20 2f       	mov	r18, r16
    2238:	23 95       	inc	r18
    223a:	02 2f       	mov	r16, r18
    223c:	7a 33       	cpi	r23, 0x3A	; 58
    223e:	28 f0       	brcs	.+10     	; 0x224a <__stack+0x4b>
    2240:	79 e3       	ldi	r23, 0x39	; 57
    2242:	7d 93       	st	X+, r23
    2244:	2a 95       	dec	r18
    2246:	e9 f7       	brne	.-6      	; 0x2242 <__stack+0x43>
    2248:	10 c0       	rjmp	.+32     	; 0x226a <__stack+0x6b>
    224a:	7d 93       	st	X+, r23
    224c:	2a 95       	dec	r18
    224e:	89 f6       	brne	.-94     	; 0x21f2 <__ftoa_engine+0xfc>
    2250:	06 94       	lsr	r0
    2252:	97 95       	ror	r25
    2254:	67 95       	ror	r22
    2256:	37 95       	ror	r19
    2258:	17 95       	ror	r17
    225a:	17 94       	ror	r1
    225c:	e1 18       	sub	r14, r1
    225e:	f1 0a       	sbc	r15, r17
    2260:	43 0b       	sbc	r20, r19
    2262:	56 0b       	sbc	r21, r22
    2264:	c9 0b       	sbc	r28, r25
    2266:	d0 09       	sbc	r29, r0
    2268:	98 f0       	brcs	.+38     	; 0x2290 <__stack+0x91>
    226a:	23 95       	inc	r18
    226c:	7e 91       	ld	r23, -X
    226e:	73 95       	inc	r23
    2270:	7a 33       	cpi	r23, 0x3A	; 58
    2272:	08 f0       	brcs	.+2      	; 0x2276 <__stack+0x77>
    2274:	70 e3       	ldi	r23, 0x30	; 48
    2276:	7c 93       	st	X, r23
    2278:	20 13       	cpse	r18, r16
    227a:	b8 f7       	brcc	.-18     	; 0x226a <__stack+0x6b>
    227c:	7e 91       	ld	r23, -X
    227e:	70 61       	ori	r23, 0x10	; 16
    2280:	7d 93       	st	X+, r23
    2282:	30 f0       	brcs	.+12     	; 0x2290 <__stack+0x91>
    2284:	83 95       	inc	r24
    2286:	71 e3       	ldi	r23, 0x31	; 49
    2288:	7d 93       	st	X+, r23
    228a:	70 e3       	ldi	r23, 0x30	; 48
    228c:	2a 95       	dec	r18
    228e:	e1 f7       	brne	.-8      	; 0x2288 <__stack+0x89>
    2290:	11 24       	eor	r1, r1
    2292:	ef 90       	pop	r14
    2294:	ff 90       	pop	r15
    2296:	0f 91       	pop	r16
    2298:	1f 91       	pop	r17
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	99 27       	eor	r25, r25
    22a0:	87 fd       	sbrc	r24, 7
    22a2:	90 95       	com	r25
    22a4:	08 95       	ret

000022a6 <strnlen_P>:
    22a6:	fc 01       	movw	r30, r24
    22a8:	05 90       	lpm	r0, Z+
    22aa:	61 50       	subi	r22, 0x01	; 1
    22ac:	70 40       	sbci	r23, 0x00	; 0
    22ae:	01 10       	cpse	r0, r1
    22b0:	d8 f7       	brcc	.-10     	; 0x22a8 <strnlen_P+0x2>
    22b2:	80 95       	com	r24
    22b4:	90 95       	com	r25
    22b6:	8e 0f       	add	r24, r30
    22b8:	9f 1f       	adc	r25, r31
    22ba:	08 95       	ret

000022bc <strnlen>:
    22bc:	fc 01       	movw	r30, r24
    22be:	61 50       	subi	r22, 0x01	; 1
    22c0:	70 40       	sbci	r23, 0x00	; 0
    22c2:	01 90       	ld	r0, Z+
    22c4:	01 10       	cpse	r0, r1
    22c6:	d8 f7       	brcc	.-10     	; 0x22be <strnlen+0x2>
    22c8:	80 95       	com	r24
    22ca:	90 95       	com	r25
    22cc:	8e 0f       	add	r24, r30
    22ce:	9f 1f       	adc	r25, r31
    22d0:	08 95       	ret

000022d2 <fputc>:
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	fb 01       	movw	r30, r22
    22dc:	23 81       	ldd	r18, Z+3	; 0x03
    22de:	21 fd       	sbrc	r18, 1
    22e0:	03 c0       	rjmp	.+6      	; 0x22e8 <fputc+0x16>
    22e2:	8f ef       	ldi	r24, 0xFF	; 255
    22e4:	9f ef       	ldi	r25, 0xFF	; 255
    22e6:	2c c0       	rjmp	.+88     	; 0x2340 <fputc+0x6e>
    22e8:	22 ff       	sbrs	r18, 2
    22ea:	16 c0       	rjmp	.+44     	; 0x2318 <fputc+0x46>
    22ec:	46 81       	ldd	r20, Z+6	; 0x06
    22ee:	57 81       	ldd	r21, Z+7	; 0x07
    22f0:	24 81       	ldd	r18, Z+4	; 0x04
    22f2:	35 81       	ldd	r19, Z+5	; 0x05
    22f4:	42 17       	cp	r20, r18
    22f6:	53 07       	cpc	r21, r19
    22f8:	44 f4       	brge	.+16     	; 0x230a <fputc+0x38>
    22fa:	a0 81       	ld	r26, Z
    22fc:	b1 81       	ldd	r27, Z+1	; 0x01
    22fe:	9d 01       	movw	r18, r26
    2300:	2f 5f       	subi	r18, 0xFF	; 255
    2302:	3f 4f       	sbci	r19, 0xFF	; 255
    2304:	31 83       	std	Z+1, r19	; 0x01
    2306:	20 83       	st	Z, r18
    2308:	8c 93       	st	X, r24
    230a:	26 81       	ldd	r18, Z+6	; 0x06
    230c:	37 81       	ldd	r19, Z+7	; 0x07
    230e:	2f 5f       	subi	r18, 0xFF	; 255
    2310:	3f 4f       	sbci	r19, 0xFF	; 255
    2312:	37 83       	std	Z+7, r19	; 0x07
    2314:	26 83       	std	Z+6, r18	; 0x06
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <fputc+0x6e>
    2318:	8b 01       	movw	r16, r22
    231a:	ec 01       	movw	r28, r24
    231c:	fb 01       	movw	r30, r22
    231e:	00 84       	ldd	r0, Z+8	; 0x08
    2320:	f1 85       	ldd	r31, Z+9	; 0x09
    2322:	e0 2d       	mov	r30, r0
    2324:	19 95       	eicall
    2326:	89 2b       	or	r24, r25
    2328:	e1 f6       	brne	.-72     	; 0x22e2 <fputc+0x10>
    232a:	d8 01       	movw	r26, r16
    232c:	16 96       	adiw	r26, 0x06	; 6
    232e:	8d 91       	ld	r24, X+
    2330:	9c 91       	ld	r25, X
    2332:	17 97       	sbiw	r26, 0x07	; 7
    2334:	01 96       	adiw	r24, 0x01	; 1
    2336:	17 96       	adiw	r26, 0x07	; 7
    2338:	9c 93       	st	X, r25
    233a:	8e 93       	st	-X, r24
    233c:	16 97       	sbiw	r26, 0x06	; 6
    233e:	ce 01       	movw	r24, r28
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	1f 91       	pop	r17
    2346:	0f 91       	pop	r16
    2348:	08 95       	ret

0000234a <__ultoa_invert>:
    234a:	fa 01       	movw	r30, r20
    234c:	aa 27       	eor	r26, r26
    234e:	28 30       	cpi	r18, 0x08	; 8
    2350:	51 f1       	breq	.+84     	; 0x23a6 <__ultoa_invert+0x5c>
    2352:	20 31       	cpi	r18, 0x10	; 16
    2354:	81 f1       	breq	.+96     	; 0x23b6 <__ultoa_invert+0x6c>
    2356:	e8 94       	clt
    2358:	6f 93       	push	r22
    235a:	6e 7f       	andi	r22, 0xFE	; 254
    235c:	6e 5f       	subi	r22, 0xFE	; 254
    235e:	7f 4f       	sbci	r23, 0xFF	; 255
    2360:	8f 4f       	sbci	r24, 0xFF	; 255
    2362:	9f 4f       	sbci	r25, 0xFF	; 255
    2364:	af 4f       	sbci	r26, 0xFF	; 255
    2366:	b1 e0       	ldi	r27, 0x01	; 1
    2368:	3e d0       	rcall	.+124    	; 0x23e6 <__ultoa_invert+0x9c>
    236a:	b4 e0       	ldi	r27, 0x04	; 4
    236c:	3c d0       	rcall	.+120    	; 0x23e6 <__ultoa_invert+0x9c>
    236e:	67 0f       	add	r22, r23
    2370:	78 1f       	adc	r23, r24
    2372:	89 1f       	adc	r24, r25
    2374:	9a 1f       	adc	r25, r26
    2376:	a1 1d       	adc	r26, r1
    2378:	68 0f       	add	r22, r24
    237a:	79 1f       	adc	r23, r25
    237c:	8a 1f       	adc	r24, r26
    237e:	91 1d       	adc	r25, r1
    2380:	a1 1d       	adc	r26, r1
    2382:	6a 0f       	add	r22, r26
    2384:	71 1d       	adc	r23, r1
    2386:	81 1d       	adc	r24, r1
    2388:	91 1d       	adc	r25, r1
    238a:	a1 1d       	adc	r26, r1
    238c:	20 d0       	rcall	.+64     	; 0x23ce <__ultoa_invert+0x84>
    238e:	09 f4       	brne	.+2      	; 0x2392 <__ultoa_invert+0x48>
    2390:	68 94       	set
    2392:	3f 91       	pop	r19
    2394:	2a e0       	ldi	r18, 0x0A	; 10
    2396:	26 9f       	mul	r18, r22
    2398:	11 24       	eor	r1, r1
    239a:	30 19       	sub	r19, r0
    239c:	30 5d       	subi	r19, 0xD0	; 208
    239e:	31 93       	st	Z+, r19
    23a0:	de f6       	brtc	.-74     	; 0x2358 <__ultoa_invert+0xe>
    23a2:	cf 01       	movw	r24, r30
    23a4:	08 95       	ret
    23a6:	46 2f       	mov	r20, r22
    23a8:	47 70       	andi	r20, 0x07	; 7
    23aa:	40 5d       	subi	r20, 0xD0	; 208
    23ac:	41 93       	st	Z+, r20
    23ae:	b3 e0       	ldi	r27, 0x03	; 3
    23b0:	0f d0       	rcall	.+30     	; 0x23d0 <__ultoa_invert+0x86>
    23b2:	c9 f7       	brne	.-14     	; 0x23a6 <__ultoa_invert+0x5c>
    23b4:	f6 cf       	rjmp	.-20     	; 0x23a2 <__ultoa_invert+0x58>
    23b6:	46 2f       	mov	r20, r22
    23b8:	4f 70       	andi	r20, 0x0F	; 15
    23ba:	40 5d       	subi	r20, 0xD0	; 208
    23bc:	4a 33       	cpi	r20, 0x3A	; 58
    23be:	18 f0       	brcs	.+6      	; 0x23c6 <__ultoa_invert+0x7c>
    23c0:	49 5d       	subi	r20, 0xD9	; 217
    23c2:	31 fd       	sbrc	r19, 1
    23c4:	40 52       	subi	r20, 0x20	; 32
    23c6:	41 93       	st	Z+, r20
    23c8:	02 d0       	rcall	.+4      	; 0x23ce <__ultoa_invert+0x84>
    23ca:	a9 f7       	brne	.-22     	; 0x23b6 <__ultoa_invert+0x6c>
    23cc:	ea cf       	rjmp	.-44     	; 0x23a2 <__ultoa_invert+0x58>
    23ce:	b4 e0       	ldi	r27, 0x04	; 4
    23d0:	a6 95       	lsr	r26
    23d2:	97 95       	ror	r25
    23d4:	87 95       	ror	r24
    23d6:	77 95       	ror	r23
    23d8:	67 95       	ror	r22
    23da:	ba 95       	dec	r27
    23dc:	c9 f7       	brne	.-14     	; 0x23d0 <__ultoa_invert+0x86>
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	61 05       	cpc	r22, r1
    23e2:	71 05       	cpc	r23, r1
    23e4:	08 95       	ret
    23e6:	9b 01       	movw	r18, r22
    23e8:	ac 01       	movw	r20, r24
    23ea:	0a 2e       	mov	r0, r26
    23ec:	06 94       	lsr	r0
    23ee:	57 95       	ror	r21
    23f0:	47 95       	ror	r20
    23f2:	37 95       	ror	r19
    23f4:	27 95       	ror	r18
    23f6:	ba 95       	dec	r27
    23f8:	c9 f7       	brne	.-14     	; 0x23ec <__ultoa_invert+0xa2>
    23fa:	62 0f       	add	r22, r18
    23fc:	73 1f       	adc	r23, r19
    23fe:	84 1f       	adc	r24, r20
    2400:	95 1f       	adc	r25, r21
    2402:	a0 1d       	adc	r26, r0
    2404:	08 95       	ret

00002406 <_exit>:
    2406:	f8 94       	cli

00002408 <__stop_program>:
    2408:	ff cf       	rjmp	.-2      	; 0x2408 <__stop_program>
